OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-01-25T09:51:13.338299-04:00' ],		#prior : OmReference [ 'Pharo8.0-SNAPSHOT-32bit-7dc39ed.a58xqqsem5ux4zato3rcglt3j', '11274' ],		#self : OmReference [ '1' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'BaselineOfDataFrame-CompatibleUserName.1607699955'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ],		#time : DateAndTime [ '2021-01-25T09:51:13.376837-04:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #BaselineOfDataFrame,		#affectedPackageName : #BaselineOfDataFrame	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ],		#time : DateAndTime [ '2021-01-25T09:51:13.382721-04:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BaselineOf',				#traitCompositionSource : '{}',				#definitionSource : 'BaselineOf subclass: #BaselineOfDataFrame\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'BaselineOfDataFrame\''			},			#name : #BaselineOfDataFrame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BaselineOfDataFrame class\r\tinstanceVariableNames: \'\''				},				#name : #'BaselineOfDataFrame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BaselineOfDataFrame,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #BaselineOfDataFrame,			#package : #BaselineOfDataFrame,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ],		#time : DateAndTime [ '2021-01-25T09:51:13.406978-04:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BaselineOfDataFrame,				#isMetaSide : false			},			#name : #'baseline:',			#protocol : #baselines,			#sourceCode : 'baseline: spec\r\t<baseline>\r\tspec for: #common do: [\t\r\t\t"External dependencies"\r\t\tspec\r\t\t\tbaseline: \'NeoCSV\'\r\t\t\twith: [ spec repository: \'github://svenvc/NeoCSV/repository\' ].\r\t\tspec\r\t\t\tbaseline: \'NeoJSON\'\r\t\t\twith: [ spec repository: \'github://svenvc/NeoJSON/repository\' ].\r\t\t\t\t\r\t\t"Packages"\r\t\tspec \r\t\t\tpackage: \'DataFrame\';\r\t\t\tpackage: \'DataFrame-Tests\' with: [ spec requires: #(\'DataFrame\') ];\r\t\t\tpackage: \'DataFrame-Type\' with: [ spec requires: #(\'DataFrame\') ];\r\t\t\tpackage: \'DataFrame-Type-Tests\' with: [ spec requires: #(\'DataFrame-Type\') ];\r\t\t\tpackage: \'DataFrame-IO\' with: [ spec requires: #(\'DataFrame\' \'DataFrame-Type\' \'NeoCSV\' \'NeoJSON\') ];\r\t\t\tpackage: \'DataFrame-IO-Tests\' with: [ spec requires: #(\'DataFrame-IO\') ]].\r\t\t\r\t\tspec\r\t\t\tfor: #\'pharo7.x\'\r\t\t\tdo: [\r\t\t\t\tspec\r\t\t\t\t\tpackage: \'DataFrame-Pharo67\' ].\r\t\t\r\t\tspec\r\t\t\tfor: #\'pharo6.x\'\r\t\t\tdo: [\r\t\t\t\tspec\r\t\t\t\t\tpackage: \'DataFrame-Pharo6\';\r\t\t\t\t\tpackage: \'DataFrame-Pharo67\' ].',			#stamp : '',			#package : #BaselineOfDataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-01-25T09:51:17.341547-04:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'BaselineOfNeoJSON-CompatibleUserName.1551110229'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ],		#time : DateAndTime [ '2021-01-25T09:51:17.375503-04:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #BaselineOfNeoJSON,		#affectedPackageName : #BaselineOfNeoJSON	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ],		#time : DateAndTime [ '2021-01-25T09:51:17.379462-04:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BaselineOf',				#traitCompositionSource : '{}',				#definitionSource : 'BaselineOf subclass: #BaselineOfNeoJSON\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'BaselineOfNeoJSON\''			},			#name : #BaselineOfNeoJSON,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BaselineOfNeoJSON class\r\tinstanceVariableNames: \'\''				},				#name : #'BaselineOfNeoJSON class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BaselineOfNeoJSON,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #BaselineOfNeoJSON,			#package : #BaselineOfNeoJSON,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ],		#time : DateAndTime [ '2021-01-25T09:51:17.381403-04:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BaselineOf',				#traitCompositionSource : '{}',				#definitionSource : 'BaselineOf subclass: #BaselineOfNeoJSON\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'BaselineOfNeoJSON\''			},			#name : #BaselineOfNeoJSON,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BaselineOfNeoJSON class\r\tinstanceVariableNames: \'\''				},				#name : #'BaselineOfNeoJSON class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BaselineOfNeoJSON,					#isMetaSide : false				},				#parent : @8,				#content : 'I am BaselineOfNeoJSON, I load the code for the NeoJSON project.\rI am a BaselineOf.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #BaselineOfNeoJSON,			#package : #BaselineOfNeoJSON,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am BaselineOfNeoJSON, I load the code for the NeoJSON project.\rI am a BaselineOf.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ],		#time : DateAndTime [ '2021-01-25T09:51:17.403866-04:00' ],		#trigger : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BaselineOfNeoJSON,				#isMetaSide : false			},			#name : #'baseline:',			#protocol : #baselines,			#sourceCode : 'baseline: spec\r\t<baseline>\r\tspec\r\t\tfor: #common\r\t\tdo: [ spec\r\t\t\t\tpackage: \'Neo-JSON-Core\';\r\t\t\t\tpackage: \'Neo-JSON-Tests\' with: [ spec requires: #(\'Neo-JSON-Core\') ];\r\t\t\t\tgroup: \'default\' with: #(\'core\' \'tests\');\r\t\t\t\tgroup: \'core\' with: #(\'Neo-JSON-Core\');\r\t\t\t\tgroup: \'tests\' with: #(\'Neo-JSON-Tests\') ].\r\tspec\r\t\tfor: #pharo\r\t\tdo: [ spec\r\t\t\t\tpackage: \'Neo-JSON-Pharo-Core\' with: [ spec requires: #(\'Neo-JSON-Core\') ];\r\t\t\t\tpackage: \'Neo-JSON-Pharo-Tests\' with: [ spec requires: #(\'Neo-JSON-Tests\') ];\r\t\t\t\tpackage: \'Neo-JSON-Pharo-Examples\' with: [ spec requires: #(\'Neo-JSON-Core\') ];\t\t\t\t\r\t\t\t\tgroup: \'core\' with: #(\'Neo-JSON-Core\' \'Neo-JSON-Pharo-Core\');\r\t\t\t\tgroup: \'tests\' with: #(\'Neo-JSON-Tests\' \'Neo-JSON-Pharo-Tests\');\r\t\t\t\tgroup: \'examples\' with: #(\'Neo-JSON-Pharo-Examples\') ].',			#stamp : '',			#package : #BaselineOfNeoJSON		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-01-25T09:51:17.892034-04:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Neo-JSON-Core-CompatibleUserName.1551110229'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ],		#time : DateAndTime [ '2021-01-25T09:51:17.925654-04:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #Neo-JSON-Core,		#affectedPackageName : #Neo-JSON-Core	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ],		#time : DateAndTime [ '2021-01-25T09:51:17.92778-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONMapper\r\tinstanceVariableNames: \'mappings\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONMapper,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONMapper,						#isMetaSide : false					},					#name : #mappings,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMapper class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMapper class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMapper,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ],		#time : DateAndTime [ '2021-01-25T09:51:17.929254-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONMapper\r\tinstanceVariableNames: \'mappings\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONMapper,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONMapper,						#isMetaSide : false					},					#name : #mappings,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMapper class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMapper class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMapper,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONMapper.\rI hold a mapping from schema identifiers to objects that known how to read or write instances from or to JSON.\r\rSchema identifiers are either Smalltalk classes or Symbols.\r\rI offer a builder interface to construct mappings. \r\rThe standard object mapping represents a Smalltalk object as a map, mapping some or all instance variables, or a set of accessors (getter/setter methods). Furthermore, for each value an optional schema can be specified.\r\rUsing a custom mapping, a reader and/or writer block can deal with special cases such as specific collection types with an optional schema for the elements, or a direct mapping of semi primitive types such as Date or DateAndTime.\r\rA mapping can be specified explicitely on a mapper, or can be resolved using the #neoJsonMapping: class method.\r\rHere are some examples:\r\r\tmapper mapAllInstVarsFor: Point.\r\tmapper for: TestObject do: [ :mapping |\r\t\tmapping mapInstVars: #(id name).\r\t\t(mapping mapInstVar: #timestamp to: \'created-at\') valueSchema: DateAndTime.\r\t\t(mapping mapInstVar: #points) valueSchema: #ArrayOfPoints.\r\t\t(mapping mapInstVar: #bytes) valueSchema: ByteArray ].\r\tmapper for: DateAndTime customDo: [ :mapping |\r\t\tmapping decoder: [ :string | DateAndTime fromString: string ].\r\t\tmapping encoder: [ :dateAndTime | dateAndTime printString ] ].\r\tmapper for: #ArrayOfPoints customDo: [ :mapping |\r\t\tmapping listOfElementSchema: Point ].  \r\tmapper for: ByteArray customDo: [ :mapping |\r\t\tmapping listOfType: ByteArray ]\r',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONMapper.\rI hold a mapping from schema identifiers to objects that known how to read or write instances from or to JSON.\r\rSchema identifiers are either Smalltalk classes or Symbols.\r\rI offer a builder interface to construct mappings. \r\rThe standard object mapping represents a Smalltalk object as a map, mapping some or all instance variables, or a set of accessors (getter/setter methods). Furthermore, for each value an optional schema can be specified.\r\rUsing a custom mapping, a reader and/or writer block can deal with special cases such as specific collection types with an optional schema for the elements, or a direct mapping of semi primitive types such as Date or DateAndTime.\r\rA mapping can be specified explicitely on a mapper, or can be resolved using the #neoJsonMapping: class method.\r\rHere are some examples:\r\r\tmapper mapAllInstVarsFor: Point.\r\tmapper for: TestObject do: [ :mapping |\r\t\tmapping mapInstVars: #(id name).\r\t\t(mapping mapInstVar: #timestamp to: \'created-at\') valueSchema: DateAndTime.\r\t\t(mapping mapInstVar: #points) valueSchema: #ArrayOfPoints.\r\t\t(mapping mapInstVar: #bytes) valueSchema: ByteArray ].\r\tmapper for: DateAndTime customDo: [ :mapping |\r\t\tmapping decoder: [ :string | DateAndTime fromString: string ].\r\t\tmapping encoder: [ :dateAndTime | dateAndTime printString ] ].\r\tmapper for: #ArrayOfPoints customDo: [ :mapping |\r\t\tmapping listOfElementSchema: Point ].  \r\tmapper for: ByteArray customDo: [ :mapping |\r\t\tmapping listOfType: ByteArray ]\r',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ],		#time : DateAndTime [ '2021-01-25T09:51:17.933197-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapper',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapper subclass: #NeoJSONReader\r\tinstanceVariableNames: \'readStream stringStream listClass mapClass propertyNamesAsSymbols\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONReader,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #readStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #stringStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #listClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #mapClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #propertyNamesAsSymbols,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONReader class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONReader class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONReader,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ],		#time : DateAndTime [ '2021-01-25T09:51:17.934348-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapper',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapper subclass: #NeoJSONReader\r\tinstanceVariableNames: \'readStream stringStream listClass mapClass propertyNamesAsSymbols\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONReader,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #readStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #stringStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #listClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #mapClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONReader,						#isMetaSide : false					},					#name : #propertyNamesAsSymbols,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONReader class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONReader class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONReader,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONReader.\rI am a NeoJSONMapper.\rI parse a JSON representation from a textual stream into Smalltalk objects.\r\rPrimitive types are automatically mapped to their Smalltalk counterpart: Numbers, Strings, Booleans and UndefinedObject.\rWhen parsing using #next, lists normally become Arrays and maps become Dictionaries.\rAn alternative listClass or mapClass can be specified.\r\rWhen parsing using #nextAs: a schema can be specified. This schema defines a mapping to be used.\r\rHere are some examples:\r\r\tNeoJSONReader fromString: \' [ 1,2,3 ] \'.\r\tNeoJSONReader fromString: \' [ 3.14159, true, false, null, "string" ] \'.\r\tNeoJSONReader fromString: \' { "x" : 1, "y" : 2 } \'.\r\t\r\t(NeoJSONReader on: \' { "x" : 1, "y" : 2 } \' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tnextAs: Point.\t\r\t\t\t\r\t(NeoJSONReader on: \'[ { "x" : 1, "y" : 2 }, { "x" : 3, "y" : 4 } ]\' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tfor: #ArrayOfPoints customDo: [ :mapping |\r\t\t\tmapping listOfElementSchema: Point ];\r\t\tnextAs: #ArrayOfPoints.\r\r\t(NeoJSONReader on: \'[ { "x" : 1, "y" : 2 }, { "x" : 3, "y" : 4 } ]\' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tnextListAs: Point.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONReader.\rI am a NeoJSONMapper.\rI parse a JSON representation from a textual stream into Smalltalk objects.\r\rPrimitive types are automatically mapped to their Smalltalk counterpart: Numbers, Strings, Booleans and UndefinedObject.\rWhen parsing using #next, lists normally become Arrays and maps become Dictionaries.\rAn alternative listClass or mapClass can be specified.\r\rWhen parsing using #nextAs: a schema can be specified. This schema defines a mapping to be used.\r\rHere are some examples:\r\r\tNeoJSONReader fromString: \' [ 1,2,3 ] \'.\r\tNeoJSONReader fromString: \' [ 3.14159, true, false, null, "string" ] \'.\r\tNeoJSONReader fromString: \' { "x" : 1, "y" : 2 } \'.\r\t\r\t(NeoJSONReader on: \' { "x" : 1, "y" : 2 } \' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tnextAs: Point.\t\r\t\t\t\r\t(NeoJSONReader on: \'[ { "x" : 1, "y" : 2 }, { "x" : 3, "y" : 4 } ]\' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tfor: #ArrayOfPoints customDo: [ :mapping |\r\t\t\tmapping listOfElementSchema: Point ];\r\t\tnextAs: #ArrayOfPoints.\r\r\t(NeoJSONReader on: \'[ { "x" : 1, "y" : 2 }, { "x" : 3, "y" : 4 } ]\' readStream)\r\t\tmapInstVarsFor: Point;\r\t\tnextListAs: Point.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ],		#time : DateAndTime [ '2021-01-25T09:51:17.936629-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapper',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapper subclass: #NeoJSONWriter\r\tinstanceVariableNames: \'writeStream prettyPrint level newLine asciiOnly writeNil\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #writeStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #prettyPrint,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #level,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #newLine,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #asciiOnly,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #writeNil,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriter,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ],		#time : DateAndTime [ '2021-01-25T09:51:17.937493-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapper',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapper subclass: #NeoJSONWriter\r\tinstanceVariableNames: \'writeStream prettyPrint level newLine asciiOnly writeNil\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #writeStream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #prettyPrint,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #level,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #newLine,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #asciiOnly,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONWriter,						#isMetaSide : false					},					#name : #writeNil,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriter.\rI am a NeoJSONMapper.\rI write a JSON representation of Smalltalk objects to a textual stream.\r\rObjects implementing #neoJsonOn: can be encoded.\rA number of primitive types, like Strings, Numbers, Booleans and UndefinedObject are treated specially.\rCollection are encoded as lists, except for Dictionaries that are encoded as maps.\r\rAll other objects need a mapping to help in doing the encoding.\r\rHere are some examples:\r\r\tNeoJSONWriter toString: #(1 2 3).\r\tNeoJSONWriter toString: { Float pi. true. false. \'string\' }.\r\tNeoJSONWriter toStringPretty: (Dictionary new at: #x put: 1; at: #y put: 2; yourself).\r\t\r\tString streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream)\r\t\t\tprettyPrint: true;\r\t\t\tmapInstVarsFor: Point;\r\t\t\tnextPut: (Array with: 1@3 with: -1@3) ].\r\t',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONWriter.\rI am a NeoJSONMapper.\rI write a JSON representation of Smalltalk objects to a textual stream.\r\rObjects implementing #neoJsonOn: can be encoded.\rA number of primitive types, like Strings, Numbers, Booleans and UndefinedObject are treated specially.\rCollection are encoded as lists, except for Dictionaries that are encoded as maps.\r\rAll other objects need a mapping to help in doing the encoding.\r\rHere are some examples:\r\r\tNeoJSONWriter toString: #(1 2 3).\r\tNeoJSONWriter toString: { Float pi. true. false. \'string\' }.\r\tNeoJSONWriter toStringPretty: (Dictionary new at: #x put: 1; at: #y put: 2; yourself).\r\t\r\tString streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream)\r\t\t\tprettyPrint: true;\r\t\t\tmapInstVarsFor: Point;\r\t\t\tnextPut: (Array with: 1@3 with: -1@3) ].\r\t',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ],		#time : DateAndTime [ '2021-01-25T09:51:17.939853-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONMapping\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMapping,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ],		#time : DateAndTime [ '2021-01-25T09:51:17.943284-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONMapping\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMapping,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONMapping, an abstract superclass for mapping definitions.\r',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONMapping, an abstract superclass for mapping definitions.\r',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ],		#time : DateAndTime [ '2021-01-25T09:51:17.946657-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapping',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapping subclass: #NeoJSONCustomMapping\r\tinstanceVariableNames: \'schemaName reader writer\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONCustomMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONCustomMapping,						#isMetaSide : false					},					#name : #schemaName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONCustomMapping,						#isMetaSide : false					},					#name : #reader,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONCustomMapping,						#isMetaSide : false					},					#name : #writer,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONCustomMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONCustomMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONCustomMapping,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ],		#time : DateAndTime [ '2021-01-25T09:51:17.947953-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapping',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapping subclass: #NeoJSONCustomMapping\r\tinstanceVariableNames: \'schemaName reader writer\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONCustomMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONCustomMapping,						#isMetaSide : false					},					#name : #schemaName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONCustomMapping,						#isMetaSide : false					},					#name : #reader,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONCustomMapping,						#isMetaSide : false					},					#name : #writer,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONCustomMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONCustomMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONCustomMapping,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONCustomMapping.\r\rI read the next JSON value and turn it into a Smalltalk object using a converter block.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONCustomMapping.\r\rI read the next JSON value and turn it into a Smalltalk object using a converter block.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ],		#time : DateAndTime [ '2021-01-25T09:51:17.950676-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapping',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapping subclass: #NeoJSONObjectMapping\r\tinstanceVariableNames: \'subjectClass properties allowNil\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONObjectMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONObjectMapping,						#isMetaSide : false					},					#name : #subjectClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONObjectMapping,						#isMetaSide : false					},					#name : #properties,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONObjectMapping,						#isMetaSide : false					},					#name : #allowNil,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONObjectMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONObjectMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONObjectMapping,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ],		#time : DateAndTime [ '2021-01-25T09:51:17.951405-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONMapping',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONMapping subclass: #NeoJSONObjectMapping\r\tinstanceVariableNames: \'subjectClass properties allowNil\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONObjectMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONObjectMapping,						#isMetaSide : false					},					#name : #subjectClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONObjectMapping,						#isMetaSide : false					},					#name : #properties,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONObjectMapping,						#isMetaSide : false					},					#name : #allowNil,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONObjectMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONObjectMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONObjectMapping,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONObjectMapping.\rI describe how instances of a Smalltalk class are mapped to a JSON map.\r\rI do this using set of NeoJSONPropertyMappings.\r\rI know the Smalltalk class that I am a mapping for. This class is the schema identifier and is used to instanciate new objects.\r\rA mapping can be based on any combination of instance variables or accessors (getter/setter pairs). \r\rI offer a builder interface to constuct property mappings.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONObjectMapping.\rI describe how instances of a Smalltalk class are mapped to a JSON map.\r\rI do this using set of NeoJSONPropertyMappings.\r\rI know the Smalltalk class that I am a mapping for. This class is the schema identifier and is used to instanciate new objects.\r\rA mapping can be based on any combination of instance variables or accessors (getter/setter pairs). \r\rI offer a builder interface to constuct property mappings.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ],		#time : DateAndTime [ '2021-01-25T09:51:17.952878-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONPropertyMapping\r\tinstanceVariableNames: \'propertyName valueSchema getter setter\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONPropertyMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #propertyName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #valueSchema,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #getter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #setter,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONPropertyMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONPropertyMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONPropertyMapping,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ],		#time : DateAndTime [ '2021-01-25T09:51:17.953493-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONPropertyMapping\r\tinstanceVariableNames: \'propertyName valueSchema getter setter\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONPropertyMapping,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #propertyName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #valueSchema,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #getter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONPropertyMapping,						#isMetaSide : false					},					#name : #setter,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONPropertyMapping class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONPropertyMapping class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONPropertyMapping,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONPropertyMapping.\rI describe how a property of a Smalltalk class maps to a JSON property.\r\rA property is either an instance variable or getter/setter pair.\rI hold a getter and setter block to do the actual work. The property name is used in JSON.\r\rOptionally, the schema for the value of my property can be specified. This is then used recursively.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONPropertyMapping.\rI describe how a property of a Smalltalk class maps to a JSON property.\r\rA property is either an instance variable or getter/setter pair.\rI hold a getter and setter block to do the actual work. The property name is used in JSON.\r\rOptionally, the schema for the value of my property can be specified. This is then used recursively.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ],		#time : DateAndTime [ '2021-01-25T09:51:17.955324-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONStreamingWriter\r\tinstanceVariableNames: \'jsonWriter first\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONStreamingWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONStreamingWriter,						#isMetaSide : false					},					#name : #jsonWriter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONStreamingWriter,						#isMetaSide : false					},					#name : #first,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONStreamingWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONStreamingWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONStreamingWriter,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ],		#time : DateAndTime [ '2021-01-25T09:51:17.95597-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONStreamingWriter\r\tinstanceVariableNames: \'jsonWriter first\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONStreamingWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONStreamingWriter,						#isMetaSide : false					},					#name : #jsonWriter,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONStreamingWriter,						#isMetaSide : false					},					#name : #first,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONStreamingWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONStreamingWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONStreamingWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONStreamingWriter.\rI help in writing streamed maps and lists.\r\rThis is an internal class used by NeoJSONWriter to deal with interleaving elements and separators as well as pretty printing.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONStreamingWriter.\rI help in writing streamed maps and lists.\r\rThis is an internal class used by NeoJSONWriter to deal with interleaving elements and separators as well as pretty printing.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ],		#time : DateAndTime [ '2021-01-25T09:51:17.957965-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Error',				#traitCompositionSource : '{}',				#definitionSource : 'Error subclass: #NeoJSONMappingNotFound\r\tinstanceVariableNames: \'object collection\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONMappingNotFound,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONMappingNotFound,						#isMetaSide : false					},					#name : #object,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONMappingNotFound,						#isMetaSide : false					},					#name : #collection,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMappingNotFound class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMappingNotFound class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMappingNotFound,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ],		#time : DateAndTime [ '2021-01-25T09:51:17.958712-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Error',				#traitCompositionSource : '{}',				#definitionSource : 'Error subclass: #NeoJSONMappingNotFound\r\tinstanceVariableNames: \'object collection\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONMappingNotFound,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONMappingNotFound,						#isMetaSide : false					},					#name : #object,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONMappingNotFound,						#isMetaSide : false					},					#name : #collection,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMappingNotFound class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMappingNotFound class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMappingNotFound,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONMappingNotFound. I am signalled when no mapping is found for a schema.\r\rPortability comment: In Pharo,  I could technically subclass from NotFound directly, avoid all my defined methods and only keep #messageText and #standardMessageText. However, NotFound exception does not exist in other dialects. To keep NeoJSON as portable as possible we duplicate some Pharo code into myself. ',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONMappingNotFound. I am signalled when no mapping is found for a schema.\r\rPortability comment: In Pharo,  I could technically subclass from NotFound directly, avoid all my defined methods and only keep #messageText and #standardMessageText. However, NotFound exception does not exist in other dialects. To keep NeoJSON as portable as possible we duplicate some Pharo code into myself. ',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ],		#time : DateAndTime [ '2021-01-25T09:51:17.960029-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Error',				#traitCompositionSource : '{}',				#definitionSource : 'Error subclass: #NeoJSONParseError\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONParseError,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONParseError class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONParseError class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONParseError,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ],		#time : DateAndTime [ '2021-01-25T09:51:17.960701-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Error',				#traitCompositionSource : '{}',				#definitionSource : 'Error subclass: #NeoJSONParseError\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONParseError,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONParseError class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONParseError class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONParseError,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONParseError.\rI am an Error.\r\rI am signalled when JSON input is not valid while parsing.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONParseError.\rI am an Error.\r\rI am signalled when JSON input is not valid while parsing.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ],		#time : DateAndTime [ '2021-01-25T09:51:17.962015-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Dictionary',				#traitCompositionSource : '{}',				#definitionSource : 'Dictionary subclass: #NeoJSONObject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONObject class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONObject,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ],		#time : DateAndTime [ '2021-01-25T09:51:17.96284-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Dictionary',				#traitCompositionSource : '{}',				#definitionSource : 'Dictionary subclass: #NeoJSONObject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Core\''			},			#name : #NeoJSONObject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONObject class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONObject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONObject,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONObject.\rI am a Dictionary.\r\rI behave more like a JavaScript object. I return nil for missing keys. I allow any property to be read or set by using a normal accessor message.\r\rThe following are equivalent:\r\r\tself foo.\r\tself at: #foo.\r\rAs are the following\r\r\tself foo: 1. \r\tself at: #foo put: 1.\r\t\rExcept that in the first case, self is returned.\r\rI can optionally be used by NeoJSONReader as mapClass (see #mapClass:).\r\rFor output, I act just like my superclass (it is thus not necessary to do any conversions).\r\rExample:\r\r\tNeoJSONObject fromString: \'{"foo":1,"bar":-2}\'.\r\tNeoJSONObject new foo: 1; bar: -2.\r\t{ #x -> 100. #y -> 200 } as: NeoJSONObject.\r\t(NeoJSONObject new data: (NeoJSONObject new id: #sensor1; value: 37.5)) asString.\r\rI use JSON as my printed representation. To convert me to JSON, use #printString or #asString.\r\rAdditionally, I support path access for nested instances of me, using #atPath: and #atPath:put:\r\rThe first is special because it returns nil as soon as a key is missing. The second is special because it creates extra levels (instances of me) as needed to follow the path of keys.\r\r\tNeoJSONObject new atPath: #(one two three) put: 42; yourself.\r\tNeoJSONObject new atPath: #(one two three) put: 42; atPath: #(one two three).\r\t\t',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Core,			#package : #Neo-JSON-Core,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONObject.\rI am a Dictionary.\r\rI behave more like a JavaScript object. I return nil for missing keys. I allow any property to be read or set by using a normal accessor message.\r\rThe following are equivalent:\r\r\tself foo.\r\tself at: #foo.\r\rAs are the following\r\r\tself foo: 1. \r\tself at: #foo put: 1.\r\t\rExcept that in the first case, self is returned.\r\rI can optionally be used by NeoJSONReader as mapClass (see #mapClass:).\r\rFor output, I act just like my superclass (it is thus not necessary to do any conversions).\r\rExample:\r\r\tNeoJSONObject fromString: \'{"foo":1,"bar":-2}\'.\r\tNeoJSONObject new foo: 1; bar: -2.\r\t{ #x -> 100. #y -> 200 } as: NeoJSONObject.\r\t(NeoJSONObject new data: (NeoJSONObject new id: #sensor1; value: 37.5)) asString.\r\rI use JSON as my printed representation. To convert me to JSON, use #printString or #asString.\r\rAdditionally, I support path access for nested instances of me, using #atPath: and #atPath:put:\r\rThe first is special because it returns nil as soon as a key is missing. The second is special because it creates extra levels (instances of me) as needed to follow the path of keys.\r\r\tNeoJSONObject new atPath: #(one two three) put: 42; yourself.\r\tNeoJSONObject new atPath: #(one two three) put: 42; atPath: #(one two three).\r\t\t',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ],		#time : DateAndTime [ '2021-01-25T09:51:18.094613-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Collection,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeList: self',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ],		#time : DateAndTime [ '2021-01-25T09:51:18.095829-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Boolean,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeBoolean: self',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ],		#time : DateAndTime [ '2021-01-25T09:51:18.096744-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UndefinedObject,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeNull',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ],		#time : DateAndTime [ '2021-01-25T09:51:18.098446-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'customMappingFor:',			#protocol : #private,			#sourceCode : 'customMappingFor: schemaName\r\t^ self mappings\r\t\tat: schemaName\r\t\tifAbsentPut: [ \r\t\t\tNeoJSONCustomMapping new\r\t\t\t\tschemaName: schemaName;\r\t\t\t\tyourself ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ],		#time : DateAndTime [ '2021-01-25T09:51:18.098805-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'for:customDo:',			#protocol : #mapping,			#sourceCode : 'for: schemaName customDo: block\r\t"Execute the code in block to further customize the mapping for schemaName.\r\tCreate and add a new custom mapping for schemaName if necessary."\r\t\r\t| mapping |\r\tmapping := self customMappingFor: schemaName.\r\tblock value: mapping.\r\t^ mapping',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ],		#time : DateAndTime [ '2021-01-25T09:51:18.099061-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'for:do:',			#protocol : #mapping,			#sourceCode : 'for: smalltalkClass do: block\r\t"Execute the code in block to further customize the mapping for schemaName.\r\tCreate and add a new standard object mapping for schemaName if necessary."\r\t\r\t| mapping |\r\tmapping := self objectMappingFor: smalltalkClass.\r\tblock value: mapping.\r\t^ mapping',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ],		#time : DateAndTime [ '2021-01-25T09:51:18.099246-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'mapAllInstVarsFor:',			#protocol : #convencience,			#sourceCode : 'mapAllInstVarsFor: smalltalkClass\r\t"Map the instance variables of smalltalkClass and all its super classes"\r\r\t| mapping |\r\tmapping := self objectMappingFor: smalltalkClass.\r\tmapping mapAllInstVars.\r\t^ mapping',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ],		#time : DateAndTime [ '2021-01-25T09:51:18.099418-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'mapInstVarsFor:',			#protocol : #convencience,			#sourceCode : 'mapInstVarsFor: smalltalkClass\r\t"Map the instance variables of smalltalkClass"\r\r\t| mapping |\r\tmapping := self objectMappingFor: smalltalkClass.\r\tmapping mapInstVars.\r\t^ mapping',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ],		#time : DateAndTime [ '2021-01-25T09:51:18.099581-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'mappingFor:',			#protocol : #accessing,			#sourceCode : 'mappingFor: schema\r\t^ self \r\t\tmappingFor: schema \r\t\tifAbsent: [ NeoJSONMappingNotFound signalFor: schema in: self ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ],		#time : DateAndTime [ '2021-01-25T09:51:18.099736-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'mappingFor:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'mappingFor: schema ifAbsent: block\r\t(self mappings includesKey: schema)\r\t\tifFalse: [ self resolveMappingFor: schema ].\r\t^ self mappings\r\t\tat: schema\r\t\tifAbsent: block',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ],		#time : DateAndTime [ '2021-01-25T09:51:18.099885-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #mappings,			#protocol : #private,			#sourceCode : 'mappings\r\t^ mappings\r\t\tifNil: [ mappings := Dictionary new ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ],		#time : DateAndTime [ '2021-01-25T09:51:18.100038-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'objectMappingFor:',			#protocol : #private,			#sourceCode : 'objectMappingFor: smalltalkClass\r\t^ self mappings\r\t\tat: smalltalkClass\r\t\tifAbsentPut: [ \r\t\t\tNeoJSONObjectMapping new\r\t\t\t\tsubjectClass: smalltalkClass;\r\t\t\t\tyourself ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ],		#time : DateAndTime [ '2021-01-25T09:51:18.100206-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapper,				#isMetaSide : false			},			#name : #'resolveMappingFor:',			#protocol : #private,			#sourceCode : 'resolveMappingFor: class\r\t(class respondsTo: #neoJsonMapping:)\r\t\tifTrue: [ \r\t\t\tclass perform: #neoJsonMapping: with: self ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ],		#time : DateAndTime [ '2021-01-25T09:51:18.100394-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONReader class',				#isMetaSide : true			},			#name : #'fromString:',			#protocol : #convenience,			#sourceCode : 'fromString: string\r\t^ (self on: string readStream) next',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ],		#time : DateAndTime [ '2021-01-25T09:51:18.100584-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONReader class',				#isMetaSide : true			},			#name : #'fromString:as:',			#protocol : #convenience,			#sourceCode : 'fromString: string as: schema\r\t^ (self on: string readStream) nextAs: schema',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ],		#time : DateAndTime [ '2021-01-25T09:51:18.100757-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONReader class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: readStream\r\t"Initialize on readStream, which should be a character stream that \r\timplements #next, #peek, #atEnd and (optionally) #close."\r\r\t^ self new\r\t\ton: readStream;\r\t\tyourself',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ],		#time : DateAndTime [ '2021-01-25T09:51:18.10107-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\t^ readStream atEnd',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ],		#time : DateAndTime [ '2021-01-25T09:51:18.101244-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #close,			#protocol : #initialize-release,			#sourceCode : 'close\r\treadStream ifNotNil: [\r\t\treadStream close.\r\t\treadStream := nil ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ],		#time : DateAndTime [ '2021-01-25T09:51:18.101399-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #consumeWhitespace,			#protocol : #private,			#sourceCode : 'consumeWhitespace\r\t"Strip whitespaces from the input stream."\r\r\t[ readStream atEnd not and: [ readStream peek isSeparator ] ]\r\t\twhileTrue: [ \r\t\t\treadStream next ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ],		#time : DateAndTime [ '2021-01-25T09:51:18.101542-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'error:',			#protocol : #private,			#sourceCode : 'error: text\r\tNeoJSONParseError signal: text',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ],		#time : DateAndTime [ '2021-01-25T09:51:18.101737-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'expectChar:',			#protocol : #private,			#sourceCode : 'expectChar: character\r\t"Expect character and consume input and optional whitespace at the end,\r\t throw an error otherwise."\r\r\t(self matchChar: character)\r\t\tifFalse: [ self error: character asString, \' expected\' ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ],		#time : DateAndTime [ '2021-01-25T09:51:18.101886-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #failIfNotAtEnd,			#protocol : #parsing,			#sourceCode : 'failIfNotAtEnd\r\tself atEnd\r\t\tifFalse: [ self error: \'extraneous input detected\' ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ],		#time : DateAndTime [ '2021-01-25T09:51:18.102031-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize \r\tsuper initialize.\r\tpropertyNamesAsSymbols := false',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ],		#time : DateAndTime [ '2021-01-25T09:51:18.102228-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #listClass,			#protocol : #accessing,			#sourceCode : 'listClass\r\t"Return the collection type to use for JSON lists"\r\t\r\t^ listClass ifNil: [ Array ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ],		#time : DateAndTime [ '2021-01-25T09:51:18.102453-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'listClass:',			#protocol : #initialize-release,			#sourceCode : 'listClass: collectionClass\r\tlistClass := collectionClass',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ],		#time : DateAndTime [ '2021-01-25T09:51:18.102615-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #mapClass,			#protocol : #accessing,			#sourceCode : 'mapClass\r\t"Return the collection type to use for JSON maps"\r\t\r\t^ mapClass ifNil: [ Dictionary ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ],		#time : DateAndTime [ '2021-01-25T09:51:18.102761-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'mapClass:',			#protocol : #initialize-release,			#sourceCode : 'mapClass: collectionClass\r\tmapClass := collectionClass',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ],		#time : DateAndTime [ '2021-01-25T09:51:18.102914-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'match:do:',			#protocol : #private,			#sourceCode : 'match: string do: block\r\t"Try to read and consume string and execute block if successful.\r\tElse do nothing (but do not back up)"\r\r\t(string allSatisfy: [ :each | readStream peekFor: each ])\r\t\tifTrue: [ \r\t\t\tself consumeWhitespace.\r\t\t\tblock value ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ],		#time : DateAndTime [ '2021-01-25T09:51:18.103073-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'matchChar:',			#protocol : #private,			#sourceCode : 'matchChar: character\r\t"Tries to match character, consume input and \r\tanswer true if successful and consumes whitespace at the end.\r\tWhen character does not match, return false and leave stream untouched."\r\r\t^ (readStream peekFor: character)\r\t\tifTrue: [ \r\t\t\tself consumeWhitespace.\r\t\t\ttrue ]\r\t\tifFalse: [ false ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ],		#time : DateAndTime [ '2021-01-25T09:51:18.103221-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #next,			#protocol : #accessing,			#sourceCode : 'next\r\t"Primary interface to parse a JSON value.\r\tReturn either primitives, a listClass or a mapClass instance."\r\t\r\t^ self \r\t\tconsumeWhitespace; \r\t\tparseValue',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ],		#time : DateAndTime [ '2021-01-25T09:51:18.103373-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'nextAs:',			#protocol : #accessing,			#sourceCode : 'nextAs: schema\r\t"Secondary interface to parse JSON.\r\tReturn an object according to schema.\r\tIf schema is nil, act like #next"\r\t\r\t| mapping |\r\tschema ifNil: [ ^ self next ].\r\tself consumeWhitespace.\r\tmapping := self mappingFor: schema.\r\t^ mapping readFrom: self',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ],		#time : DateAndTime [ '2021-01-25T09:51:18.103524-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'nextListAs:',			#protocol : #accessing,			#sourceCode : 'nextListAs: schema\r\t"Secondary interface to parse JSON.\r\tReturn a list of objects, each element according to schema."\r\t\r\t^ self listClass streamContents: [ :stream |\r\t\t\tself parseListDo: [ \r\t\t\t\tstream nextPut: (self nextAs: schema) ] ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ],		#time : DateAndTime [ '2021-01-25T09:51:18.103673-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'on:',			#protocol : #initialize-release,			#sourceCode : 'on: aReadStream\r\t"Initialize on aReadStream, which should be a character stream that \r\timplements #next, #peek, #atEnd and (optionally) #close."\r\t\r\treadStream := aReadStream',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ],		#time : DateAndTime [ '2021-01-25T09:51:18.103831-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseCharacter,			#protocol : #parsing,			#sourceCode : 'parseCharacter\r\t| char |\r\t(char := readStream next) = $\\ \r\t\tifFalse: [ ^ char ].\r\t(\'/"\\\' includes: (char := readStream next))\r\t\tifTrue: [ ^ char ].\r\t(\'bfnrt\' includes: char)\r\t\tifTrue: [ ^ self unescapeChar: char ].\r\tchar = $u\r\t\tifTrue: [ ^ self parseCharacterHex ].\r\tchar \r\t\tifNil: [ self error: \'invalid escape, end of file\' ]\r\t\tifNotNil: [ self error: \'invalid escape character \\\' , char asString ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ],		#time : DateAndTime [ '2021-01-25T09:51:18.104005-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseCharacterHex,			#protocol : #private,			#sourceCode : 'parseCharacterHex\r\t| value codePoint |\r\tvalue := self parseCharacterHex4Value.\r\t(value < 16rD800 or: [ value > 16rDBFF ])\r\t\tifTrue: [ codePoint := value ]\r\t\tifFalse: [ | leadSurrogate trailSurrogate |\r\t\t\t"Characters not in the Basic Multilingual Plane are encoded as a UTF-16 surrogate pair"\r\t\t\t"See https://tools.ietf.org/html/rfc7159#section-7"\r\t\t\tleadSurrogate := value.\r\t\t\ttrailSurrogate := self parseTrailingSurrogateHexEscape.\r\t\t\tcodePoint := (leadSurrogate - 16rD800) * 16r400 + (trailSurrogate - 16rDC00).\r\t\t\tcodePoint := 16r10000 + codePoint ].\r\t^ Character codePoint: codePoint',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ],		#time : DateAndTime [ '2021-01-25T09:51:18.104153-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseCharacterHex4Value,			#protocol : #private,			#sourceCode : 'parseCharacterHex4Value\r\t| value |\r\tvalue := self parseCharacterHexDigit.\r\t3 timesRepeat: [ \r\t\tvalue := (value << 4) + self parseCharacterHexDigit ].\r\t^ value',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ],		#time : DateAndTime [ '2021-01-25T09:51:18.104308-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseCharacterHexDigit,			#protocol : #private,			#sourceCode : 'parseCharacterHexDigit\r\t| digit |\r\treadStream atEnd \r\t\tifFalse: [ \r\t\t\tdigit := readStream next asInteger.\r\t\t\t(digit between: "$0" 48 and: "$9" 57)\r\t\t\t\tifTrue: [ ^ digit - 48 ].\r\t\t\t(digit between: "$A" 65 and: "$F" 70)\r\t\t\t\tifTrue: [ ^ digit - 55 ].\r\t\t\t(digit between: "$a" 97 and: "$f" 102)\r\t\t\t\tifTrue: [ ^ digit - 87 ] ].\r\tself error: \'hex-digit expected\'',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ],		#time : DateAndTime [ '2021-01-25T09:51:18.10449-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'parseConstantDo:',			#protocol : #private,			#sourceCode : 'parseConstantDo: block\r\t"Parse and consume either true|false|nil|null and execute block \r\tor else do nothing (but do not back up).\r\tHand written implementation to avoid the use of #position:"\r\t\r\t(readStream peek = $t)\r\t\tifTrue: [\r\t\t\t^ self match: \'true\' do: [ block value: true ] ].\r\t(readStream peek = $f)\r\t\tifTrue: [\r\t\t\t^ self match: \'false\' do: [ block value: false ] ].\r\t(readStream peek = $n)\r\t\tifTrue: [\r\t\t\t^ self match: \'null\' do: [ block value: nil ] ]\r',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ],		#time : DateAndTime [ '2021-01-25T09:51:18.104648-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseList,			#protocol : #parsing,			#sourceCode : 'parseList\r\t^ self listClass \r\t\tstreamContents: [ :stream |\r\t\t\tself parseListElementsDo: [ :each |\r\t\t\t\tstream nextPut: each ] ]\r\r\t\t',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ],		#time : DateAndTime [ '2021-01-25T09:51:18.104803-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'parseListDo:',			#protocol : #parsing,			#sourceCode : 'parseListDo: block\r\tself expectChar: $[.\r\t(self matchChar: $]) \r\t\tifTrue: [ ^ self ].\r\t[ readStream atEnd ] \r\t\twhileFalse: [\r\t\t\tblock value.\r\t\t\t(self matchChar: $]) \r\t\t\t\tifTrue: [ ^ self ].\r\t\t\t(self matchChar: $,)\r\t\t\t\tifFalse: [ self error: \', or ] expected\' ] ].\r\tself error: \'incomplete list\'',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ],		#time : DateAndTime [ '2021-01-25T09:51:18.104948-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'parseListElementsDo:',			#protocol : #parsing,			#sourceCode : 'parseListElementsDo: block\r\tself parseListDo: [ \r\t\tblock value: self parseValue ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ],		#time : DateAndTime [ '2021-01-25T09:51:18.105107-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseMap,			#protocol : #parsing,			#sourceCode : 'parseMap\r\t| map |\r\tmap := self mapClass new.\r\tself parseMapKeysAndValuesDo: [ :key :value |\r\t\tmap at: key put: value ].\r\t^ map',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ],		#time : DateAndTime [ '2021-01-25T09:51:18.10526-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'parseMapDo:',			#protocol : #parsing,			#sourceCode : 'parseMapDo: block\r\tself expectChar: ${.\r\t(self matchChar: $})\r\t\tifTrue: [ ^ self ].\r\t[ readStream atEnd ] whileFalse: [\r\t\tblock value.\r\t\t(self matchChar: $}) \r\t\t\tifTrue: [ ^ self ].\r\t\t(self matchChar: $,)\r\t\t\tifFalse: [ self error: \', or } expected\' ] ].\r\tself error: \'incomplete map\'',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ],		#time : DateAndTime [ '2021-01-25T09:51:18.105431-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'parseMapKeysAndValuesDo:',			#protocol : #parsing,			#sourceCode : 'parseMapKeysAndValuesDo: block\r\tself parseMapKeysDo: [ :key |\r\t\tblock value: key value: self parseValue ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ],		#time : DateAndTime [ '2021-01-25T09:51:18.105581-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'parseMapKeysDo:',			#protocol : #parsing,			#sourceCode : 'parseMapKeysDo: block\r\tself parseMapDo: [ | key |\r\t\tkey := self parsePropertyName.\r\t\tself expectChar: $:.\r\t\tblock value: key ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ],		#time : DateAndTime [ '2021-01-25T09:51:18.105743-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseNumber,			#protocol : #parsing,			#sourceCode : 'parseNumber\r\t| negated number |\r\tnegated := readStream peekFor: $-.\r\tnumber := self parseNumberInteger.\r\t(readStream peekFor: $.)\r\t\tifTrue: [ number := number + self parseNumberFraction ].\r\t((readStream peekFor: $e) or: [ readStream peekFor: $E ])\r\t\tifTrue: [ number := number * self parseNumberExponent ].\r\tnegated\r\t\tifTrue: [ number := number negated ].\r\tself consumeWhitespace.\r\t^ number',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ],		#time : DateAndTime [ '2021-01-25T09:51:18.105915-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseNumberExponent,			#protocol : #parsing,			#sourceCode : 'parseNumberExponent\r\t| number negated |\r\tnumber := 0.\r\t(negated := readStream peekFor: $-)\r\t\tifFalse: [ readStream peekFor: $+ ].\r\t(readStream atEnd or: [ readStream peek isDigit not ])\r\t\tifTrue: [ self error: \'number exponent expected\' ].\r\t[ readStream atEnd not and: [ readStream peek isDigit ] ]\r\t\twhileTrue: [ number := 10 * number + readStream next digitValue ].\r\tnegated\r\t\tifTrue: [ number := number negated ].\r\tnumber positive \r\t\tifTrue: [ number > Float emax ifTrue: [ self error: \'number exponent too large\' ] ]\r\t\tifFalse: [ number < Float emin ifTrue: [ self error: \'number exponent too small\' ] ].\r\t^ 10 raisedTo: number',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ],		#time : DateAndTime [ '2021-01-25T09:51:18.106068-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseNumberFraction,			#protocol : #parsing,			#sourceCode : 'parseNumberFraction\r\t| number power |\r\tnumber := 0.\r\tpower := 1.0.\r\t[ readStream atEnd not and: [ readStream peek isDigit ] ] \r\t\twhileTrue: [\r\t\t\tnumber := 10 * number + readStream next digitValue.\r\t\t\tpower := power * 10.0 ].\r\t^ number / power',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ],		#time : DateAndTime [ '2021-01-25T09:51:18.10622-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseNumberInteger,			#protocol : #parsing,			#sourceCode : 'parseNumberInteger\r\t| number |\r\tnumber := nil.\r\t[ readStream atEnd not and: [ readStream peek isDigit ] ] \r\t\twhileTrue: [ \r\t\t\tnumber := 10 * (number ifNil: [ 0 ]) + readStream next digitValue ].\r\tnumber ifNil: [ self error: \'Integer digit expected\' ].\r\t^ number',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ],		#time : DateAndTime [ '2021-01-25T09:51:18.106372-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parsePropertyName,			#protocol : #parsing,			#sourceCode : 'parsePropertyName\r\t| name |\r\tname := self parseValue.\r\t^ name isString\r\t\tifTrue: [ \r\t\t\tpropertyNamesAsSymbols \r\t\t\t\tifTrue: [ name asSymbol ]\r\t\t\t\tifFalse: [ name ] ]\r\t\tifFalse: [ \r\t\t\tself error: \'property name must be a string, not \', name asString ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ],		#time : DateAndTime [ '2021-01-25T09:51:18.106527-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseString,			#protocol : #parsing,			#sourceCode : 'parseString\r\t| result |\r\t(readStream peekFor: $")\r\t\tifFalse: [ self error: \'" expected\' ].\r\tresult := self stringStreamContents: [ :stream | \r\t\t[ readStream atEnd or: [ readStream peek = $" ] ] \r\t\t\twhileFalse: [ stream nextPut: self parseCharacter ] ].\r\tself expectChar: $".\r\t^ result',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ],		#time : DateAndTime [ '2021-01-25T09:51:18.106677-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseTrailingSurrogateHexEscape,			#protocol : #private,			#sourceCode : 'parseTrailingSurrogateHexEscape\r\t(readStream next = $\\ and: [ readStream next = $u ])\r\t\tifTrue: [ ^ self parseCharacterHex4Value ]\r\t\tifFalse: [ self error: \'trailing surrogate hex escape expected\' ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ],		#time : DateAndTime [ '2021-01-25T09:51:18.106861-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #parseValue,			#protocol : #parsing,			#sourceCode : 'parseValue\r\t| char |\r\treadStream atEnd ifFalse: [ \r\t\tchar := readStream peek.\r\t\tchar = ${\r\t\t\tifTrue: [ ^ self parseMap ].\r\t\tchar = $[\r\t\t\tifTrue: [ ^ self parseList ].\r\t\tchar = $"\r\t\t\tifTrue: [ ^ self parseString ].\r\t\t(char = $- or: [ char isDigit ])\r\t\t\tifTrue: [ ^ self parseNumber ].\r\t\tself parseConstantDo: [ :value | ^ value ] ].\r\tself error: \'invalid input: \', char asString',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ],		#time : DateAndTime [ '2021-01-25T09:51:18.107007-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'propertyNamesAsSymbols:',			#protocol : #initialize-release,			#sourceCode : 'propertyNamesAsSymbols: boolean\r\tpropertyNamesAsSymbols := boolean',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ],		#time : DateAndTime [ '2021-01-25T09:51:18.107238-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'stringStreamContents:',			#protocol : #private,			#sourceCode : 'stringStreamContents: block\r\t"Like String streamContents: block\r\tbut reusing the underlying buffer for improved efficiency"\r\t\r\tstringStream \r\t\tifNil: [ \r\t\t\tstringStream := (String new: 32) writeStream ].\r\tstringStream reset.\r\tblock value: stringStream.\r\t^ stringStream contents',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ],		#time : DateAndTime [ '2021-01-25T09:51:18.107434-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReader,				#isMetaSide : false			},			#name : #'unescapeChar:',			#protocol : #private,			#sourceCode : 'unescapeChar: char\r\t"Handle one of the named character escapes, b, f, n, r or t. Else fail."\r\t\r\tchar = $b\r\t\tifTrue: [ ^ Character backspace ].\r\tchar = $f\r\t\tifTrue: [ ^ Character newPage ].\r\tchar = $n\r\t\tifTrue: [ ^ Character lf ].\r\tchar = $r\r\t\tifTrue: [ ^ Character cr ].\r\tchar = $t\r\t\tifTrue: [ ^ Character tab ].\r\tself error: \'Unknown escape char: \', (String with: char)',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ],		#time : DateAndTime [ '2021-01-25T09:51:18.107602-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONWriter class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: writeStream\r\t"Initialize on writeStream, which should be a character stream that \r\timplements #nextPut:, #nextPutAll:, #space and (optionally) #close."\r\r\t^ self new\r\t\ton: writeStream;\r\t\tyourself',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ],		#time : DateAndTime [ '2021-01-25T09:51:18.107763-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONWriter class',				#isMetaSide : true			},			#name : #'toString:',			#protocol : #convenience,			#sourceCode : 'toString: object\r\t^ String streamContents: [ :stream |\r\t\t\t(self on: stream) nextPut: object ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ],		#time : DateAndTime [ '2021-01-25T09:51:18.107913-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONWriter class',				#isMetaSide : true			},			#name : #'toStringPretty:',			#protocol : #convenience,			#sourceCode : 'toStringPretty: object\r\t^ String streamContents: [ :stream |\r\t\t\t(self on: stream)\r\t\t\t\tprettyPrint: true; \r\t\t\t\tnextPut: object ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ],		#time : DateAndTime [ '2021-01-25T09:51:18.108083-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'asciiOnly:',			#protocol : #initialize-release,			#sourceCode : 'asciiOnly: boolean\r\t"Set whether I should escape all non ASCII characters or not"\r\t\r\tasciiOnly := boolean',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ],		#time : DateAndTime [ '2021-01-25T09:51:18.108238-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #close,			#protocol : #initialize-release,			#sourceCode : 'close\r\t"Close the stream that I write to"\r\t\r\twriteStream ifNotNil: [\r\t\twriteStream close.\r\t\twriteStream := nil ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ],		#time : DateAndTime [ '2021-01-25T09:51:18.108387-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'doesCodePointNeedEscaping:',			#protocol : #private,			#sourceCode : 'doesCodePointNeedEscaping: code\r\tcode < 32 ifTrue: [ ^ true ].\r\t( code = 34 or: [ code = 92 ]) ifTrue: [ ^ true ].\r\t^ asciiOnly and: [ code > 126 ]\t',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ],		#time : DateAndTime [ '2021-01-25T09:51:18.108533-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'encodeChar:',			#protocol : #private,			#sourceCode : 'encodeChar: char\r\t| code |\r\tcode := char codePoint.\r\t(self doesCodePointNeedEscaping: code)\r\t\tifTrue: [ self escapeChar: code ]\r\t\tifFalse: [ writeStream nextPut: char ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ],		#time : DateAndTime [ '2021-01-25T09:51:18.108711-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'encodeKey:',			#protocol : #private,			#sourceCode : 'encodeKey: key\r\tkey isString ifFalse: [ ^ self error: \'JSON key names in objects must be strings\' ].\r\tself nextPut: key.\r\tself prettyPrintSpace.\r\twriteStream nextPut: $:.\r\tself prettyPrintSpace',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ],		#time : DateAndTime [ '2021-01-25T09:51:18.10885-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'encodeKey:value:',			#protocol : #private,			#sourceCode : 'encodeKey: key value: value\r\tself encodeKey: key.\r\tself nextPut: value',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ],		#time : DateAndTime [ '2021-01-25T09:51:18.109135-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'encodeKey:value:as:',			#protocol : #private,			#sourceCode : 'encodeKey: key value: value as: valueSchema\r\tself encodeKey: key.\r\tself nextPut: value as: valueSchema',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ],		#time : DateAndTime [ '2021-01-25T09:51:18.109404-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'escapeChar:',			#protocol : #private,			#sourceCode : 'escapeChar: code\r\tcode = 34\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\"\' ].\r\tcode = 92\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\\\\' ].\r\tcode = 47\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\/\' ].\r\tcode = 8\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\b\' ].\r\tcode = 12\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\f\' ].\t\t\r\tcode = 10\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\n\' ].\t\t\r\tcode = 13\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\r\' ].\t\t\r\tcode = 9\r\t\tifTrue: [ ^ writeStream nextPutAll: \'\\t\' ].\t\t\r\tself escapeUnicode: code',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ],		#time : DateAndTime [ '2021-01-25T09:51:18.109567-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'escapeUnicode4:',			#protocol : #private,			#sourceCode : 'escapeUnicode4: codePoint\r\twriteStream nextPutAll: \'\\u\'.\r\tcodePoint printOn: writeStream base: 16 nDigits: 4',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ],		#time : DateAndTime [ '2021-01-25T09:51:18.109772-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'escapeUnicode:',			#protocol : #private,			#sourceCode : 'escapeUnicode: codePoint\r\tcodePoint <= 16rFFFF\r\t\tifTrue: [ self escapeUnicode4: codePoint ]\r\t\tifFalse: [ \r\t\t\tcodePoint <= 16r10FFFF\r\t\t\t\tifTrue: [ | leadSurrogate trailSurrogate shifted |\r\t\t\t\t\t"Characters not in the Basic Multilingual Plane are encoded as a UTF-16 surrogate pair"\r\t\t\t\t\t"See https://tools.ietf.org/html/rfc7159#section-7"\r\t\t\t\t\tshifted := codePoint - 16r10000.\r\t\t\t\t\tleadSurrogate := 16rD800 + (shifted // 16r400).\r\t\t\t\t\ttrailSurrogate := 16rDC00 + (shifted \\\\ 16r400).\r\t\t\t\t\tself escapeUnicode4: leadSurrogate.\r\t\t\t\t\tself escapeUnicode4: trailSurrogate ]\r\t\t\t\tifFalse: [ self error: \'Character Unicode code point outside encoder range\' ] ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ],		#time : DateAndTime [ '2021-01-25T09:51:18.109923-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'indentedDo:',			#protocol : #private,			#sourceCode : 'indentedDo: block\r\tlevel := level + 1.\r\tblock value.\r\tlevel := level - 1',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ],		#time : DateAndTime [ '2021-01-25T09:51:18.110074-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tsuper initialize.\r\t"For portability reasons use `Character cr asString` rather than `String cr`"\r\tself newLine: Character cr asString.\r\tself prettyPrint: false.\r\tself asciiOnly: false.\r\tself writeNil: false.\r\tlevel := 0',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ],		#time : DateAndTime [ '2021-01-25T09:51:18.110943-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #listElementSeparator,			#protocol : #private,			#sourceCode : 'listElementSeparator\r\twriteStream nextPut: $,.\r\tself newlineIndent\r',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ],		#time : DateAndTime [ '2021-01-25T09:51:18.11112-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #mapElementSeparator,			#protocol : #private,			#sourceCode : 'mapElementSeparator\r\twriteStream nextPut: $,.\r\tself newlineIndent\r',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ],		#time : DateAndTime [ '2021-01-25T09:51:18.111306-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'newLine:',			#protocol : #initialize-release,			#sourceCode : 'newLine: string\r\t"Set the newline string that I should use when pretty printing"\r\t\r\tnewLine := string',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ],		#time : DateAndTime [ '2021-01-25T09:51:18.111459-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #newline,			#protocol : #accessing,			#sourceCode : 'newline\r\t"Write a newline on the stream that I wrap.\r\tWhat gets written depends on the configuration, see #newLine:"\r\t\r\twriteStream nextPutAll: newLine',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ],		#time : DateAndTime [ '2021-01-25T09:51:18.111607-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #newlineIndent,			#protocol : #private,			#sourceCode : 'newlineIndent\r\tprettyPrint\r\t\tifTrue: [ \r\t\t\tself newline.\r\t\t\tlevel timesRepeat: [ writeStream nextPut: Character tab ] ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ],		#time : DateAndTime [ '2021-01-25T09:51:18.111751-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'nextPut:',			#protocol : #accessing,			#sourceCode : 'nextPut: anObject\r\t"Primary interface. Write a JSON representation of anObject to my stream."\r\t\r\tanObject neoJsonOn: self',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ],		#time : DateAndTime [ '2021-01-25T09:51:18.111909-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'nextPut:as:',			#protocol : #accessing,			#sourceCode : 'nextPut: anObject as: schema\r\t"Secondary interface to write JSON.\r\tWrite objects according to schema."\r\t\r\t| mapping |\r\t(schema isNil or: [ anObject isNil ]) ifTrue: [ ^ self nextPut: anObject ].\r\tmapping := self mappingFor: schema.\r\t^ mapping writeObject: anObject on: self',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ],		#time : DateAndTime [ '2021-01-25T09:51:18.112085-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'on:',			#protocol : #initialize-release,			#sourceCode : 'on: aWriteStream\r\t"Initialize on aWriteStream, which should be a character stream that \r\timplements #nextPut:, #nextPutAll:, #space and (optionally) #close."\r\r\twriteStream := aWriteStream\r',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ],		#time : DateAndTime [ '2021-01-25T09:51:18.112228-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'prettyPrint:',			#protocol : #initialize-release,			#sourceCode : 'prettyPrint: boolean\r\t"Set whether I should pretty print the JSON that I write"\r\r\tprettyPrint := boolean',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ],		#time : DateAndTime [ '2021-01-25T09:51:18.11237-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #prettyPrintSpace,			#protocol : #private,			#sourceCode : 'prettyPrintSpace\r\tprettyPrint\r\t\tifTrue: [ writeStream nextPut: Character space ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ],		#time : DateAndTime [ '2021-01-25T09:51:18.112513-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeBoolean:',			#protocol : #writing,			#sourceCode : 'writeBoolean: boolean\r\tboolean printOn: writeStream',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ],		#time : DateAndTime [ '2021-01-25T09:51:18.112657-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeFloat:',			#protocol : #writing,			#sourceCode : 'writeFloat: float\r\tfloat printOn: writeStream',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ],		#time : DateAndTime [ '2021-01-25T09:51:18.112799-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeInteger:',			#protocol : #writing,			#sourceCode : 'writeInteger: integer\r\tinteger printOn: writeStream\r\t',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ],		#time : DateAndTime [ '2021-01-25T09:51:18.112948-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeList:',			#protocol : #writing,			#sourceCode : 'writeList: collection\r\tself writeListStreamingDo: [ :jsonListWriter |\r\t\tcollection do: [ :each |\r\t\t\tjsonListWriter writeElement: each ] ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ],		#time : DateAndTime [ '2021-01-25T09:51:18.113093-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeListStreamingDo:',			#protocol : #writing,			#sourceCode : 'writeListStreamingDo: block\r\twriteStream nextPut: $[.\r\tself writeStreamingDo: block.\r\twriteStream nextPut: $]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ],		#time : DateAndTime [ '2021-01-25T09:51:18.11324-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeMap:',			#protocol : #writing,			#sourceCode : 'writeMap: keyValueCollection\r\tself writeMapStreamingDo: [ :jsonMapWriter |\r\t\tkeyValueCollection keysAndValuesDo: [ :key :value |\r\t\t\tjsonMapWriter writeKey: key value: value ] ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ],		#time : DateAndTime [ '2021-01-25T09:51:18.113384-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeMapStreamingDo:',			#protocol : #writing,			#sourceCode : 'writeMapStreamingDo: block\r\twriteStream nextPut: ${.\r\tself writeStreamingDo: block.\r\twriteStream nextPut: $}',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ],		#time : DateAndTime [ '2021-01-25T09:51:18.11355-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #writeNil,			#protocol : #accessing,			#sourceCode : 'writeNil\r\t"Return whether I will write nil/null properties of objects or skip them."\r\t\r\t^ writeNil',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ],		#time : DateAndTime [ '2021-01-25T09:51:18.113698-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeNil:',			#protocol : #initialize-release,			#sourceCode : 'writeNil: boolean\r\t"Set whether I will write nil/null properties of objects or skip them."\r\t\r\twriteNil := boolean',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ],		#time : DateAndTime [ '2021-01-25T09:51:18.113841-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #writeNull,			#protocol : #writing,			#sourceCode : 'writeNull\r\twriteStream nextPutAll: \'null\'',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ],		#time : DateAndTime [ '2021-01-25T09:51:18.113988-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeObject:',			#protocol : #writing,			#sourceCode : 'writeObject: anObject\r\t| mapping |\r\tmapping := self mappingFor: anObject class.\r\tmapping\r\t\twriteObject: anObject\r\t\ton: self',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ],		#time : DateAndTime [ '2021-01-25T09:51:18.11414-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeStreamingDo:',			#protocol : #writing,			#sourceCode : 'writeStreamingDo: block\r\t| mapWriter |\r\tmapWriter := NeoJSONStreamingWriter on: self.\r\tself indentedDo: [\r\t\tblock value: mapWriter ].\r\tmapWriter wasUsed\r\t\tifTrue: [ self newlineIndent ]\r\t\tifFalse: [ self prettyPrintSpace ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ],		#time : DateAndTime [ '2021-01-25T09:51:18.11432-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriter,				#isMetaSide : false			},			#name : #'writeString:',			#protocol : #writing,			#sourceCode : 'writeString: string\r\twriteStream nextPut: $".\r\t1 to: string size do: [ :index |\r\t\tself encodeChar: (string at: index) ].\r\twriteStream nextPut: $"',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ],		#time : DateAndTime [ '2021-01-25T09:51:18.114524-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'decoder:',			#protocol : #mapping,			#sourceCode : 'decoder: block\r\t"Set a decoder block that accepts the next object representation read \r\tand converts it into the actual object to be returned."\r\r\tself reader: [ :jsonReader | | representation |\r\t\trepresentation := jsonReader next.\r\t\tblock value: representation ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ],		#time : DateAndTime [ '2021-01-25T09:51:18.114691-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'encoder:',			#protocol : #mapping,			#sourceCode : 'encoder: block\r\t"Set a encoder block that accepts the next object to be written \r\tand converts it into the actual representation to be written."\r\r\tself writer: [ :jsonWriter :anObject | | representation |\r\t\trepresentation := block value: anObject.\r\t\tjsonWriter nextPut: representation ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ],		#time : DateAndTime [ '2021-01-25T09:51:18.114835-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #identifier,			#protocol : #accessing,			#sourceCode : 'identifier\r\t^ schemaName ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ],		#time : DateAndTime [ '2021-01-25T09:51:18.115018-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'listOfElementSchema:',			#protocol : #mapping,			#sourceCode : 'listOfElementSchema: elementSchema\r\t"Set the reader to a block that will create an instance of the\r\tstandard listClass while reading a list of elements of type elementSchema"\r\r\tself reader: [ :jsonReader |\r\t\tjsonReader listClass streamContents: [ :stream |\r\t\t\tjsonReader parseListDo: [ | element |\r\t\t\t\telement := jsonReader nextAs: elementSchema.\r\t\t\t\tstream nextPut: element ] ] ].\r\tself writer: [ :jsonWriter :list | \r\t\tjsonWriter writeListStreamingDo: [ :listWriter |\r\t\t\tlist do: [ :each | listWriter writeElement: each as: elementSchema ] ] ]\r',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ],		#time : DateAndTime [ '2021-01-25T09:51:18.115182-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'listOfType:',			#protocol : #mapping,			#sourceCode : 'listOfType: collectionClass\r\t"Set the reader to a block that will create an instance of collectionClass \r\tusing #streamContents: while reading a list of elements"\r\r\tself reader: [ :jsonReader |\r\t\tcollectionClass streamContents: [ :stream |\r\t\t\tjsonReader parseListDo: [ | element |\r\t\t\t\telement := jsonReader next.\r\t\t\t\tstream nextPut: element ] ] ]\r\t"we do not set a writer, #neoJsonOn: should be sufficient, no element type known anyway"\r',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ],		#time : DateAndTime [ '2021-01-25T09:51:18.115463-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'listOfType:andElementSchema:',			#protocol : #mapping,			#sourceCode : 'listOfType: collectionClass andElementSchema: elementSchema\r\t"Set the reader to a block that will create an instance of collectionClass \r\tusing #streamContents: while reading a list of elements of type elementSchema"\r\r\tself reader: [ :jsonReader |\r\t\tcollectionClass streamContents: [ :stream |\r\t\t\tjsonReader parseListDo: [ | element |\r\t\t\t\telement := jsonReader nextAs: elementSchema.\r\t\t\t\tstream nextPut: element ] ] ].\r\tself writer: [ :jsonWriter :list | \r\t\tjsonWriter writeListStreamingDo: [ :listWriter |\r\t\t\tlist do: [ :each | \r\t\t\t\tlistWriter writeElement: each as: elementSchema ] ] ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ],		#time : DateAndTime [ '2021-01-25T09:51:18.115711-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'mapWithValueSchema:',			#protocol : #mapping,			#sourceCode : 'mapWithValueSchema: valueSchema\r\t"Set the reader to a block that will create an instance of the\r\tstandard mapClass while reading values of type valueSchema,\r\twith standard keys"\r\r\tself reader: [ :jsonReader | | map |\r\t\tmap := jsonReader mapClass new.\r\t\tjsonReader parseMapKeysDo: [ :key | | value |\r\t\t\t\tvalue := jsonReader nextAs: valueSchema.\r\t\t\t\tmap at: key put: value ].\r\t\tmap ].\r\tself writer: [ :jsonWriter :map | \r\t\tjsonWriter writeMapStreamingDo: [ :mapWriter |\r\t\t\tmap keysAndValuesDo: [ :key :value | \r\t\t\t\tmapWriter writeKey: key value: value as: valueSchema ] ] ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ],		#time : DateAndTime [ '2021-01-25T09:51:18.115875-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'readFrom:',			#protocol : #parsing,			#sourceCode : 'readFrom: jsonReader\r\t^ reader \r\t\tifNil: [ jsonReader next ]\r\t\tifNotNil: [ reader value: jsonReader ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ],		#time : DateAndTime [ '2021-01-25T09:51:18.116027-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'reader:',			#protocol : #accessing,			#sourceCode : 'reader: block\r\t"Set the reader to block, a 1 argument block that when given \r\ta jsonReader as argument reads the object that I represent.\r\tWhen there is no reader block, the default #next will be used."\r\t\r\treader := block',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ],		#time : DateAndTime [ '2021-01-25T09:51:18.116161-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'schemaName:',			#protocol : #accessing,			#sourceCode : 'schemaName: schema\r\tschemaName := schema',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ],		#time : DateAndTime [ '2021-01-25T09:51:18.116367-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'writeObject:on:',			#protocol : #writing,			#sourceCode : 'writeObject: anObject on: jsonWriter\r\twriter \r\t\tifNil: [ anObject neoJsonOn: jsonWriter ]\r\t\tifNotNil: [ writer value: jsonWriter value: anObject ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ],		#time : DateAndTime [ '2021-01-25T09:51:18.116569-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONCustomMapping,				#isMetaSide : false			},			#name : #'writer:',			#protocol : #accessing,			#sourceCode : 'writer: block\r\t"Set the writer to block, a 2 argument block that when given: a jsonWriter \r\tand the object to write will write the object that I represent.\r\tWhen there is no writer block, the default #neoJsonOn: will be used."\r\t\r\twriter := block',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ],		#time : DateAndTime [ '2021-01-25T09:51:18.116747-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapping,				#isMetaSide : false			},			#name : #identifier,			#protocol : #accessing,			#sourceCode : 'identifier\r\tself subclassResponsibility ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ],		#time : DateAndTime [ '2021-01-25T09:51:18.116935-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapping,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: stream\r\tsuper printOn: stream.\r\tstream nextPut: $(; print: self identifier; nextPut: $)',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ],		#time : DateAndTime [ '2021-01-25T09:51:18.117346-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapping,				#isMetaSide : false			},			#name : #'readFrom:',			#protocol : #parsing,			#sourceCode : 'readFrom: jsonReader\r\tself subclassResponsibility ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ],		#time : DateAndTime [ '2021-01-25T09:51:18.117552-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMapping,				#isMetaSide : false			},			#name : #'writeObject:on:',			#protocol : #writing,			#sourceCode : 'writeObject: anObject on: jsonWriter\r\tself subclassResponsibility ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ],		#time : DateAndTime [ '2021-01-25T09:51:18.117753-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #allowNil,			#protocol : #initialize-release,			#sourceCode : 'allowNil\r\t"Set that I will allow nil/null values when I read/expect an object"\r\t\r\tallowNil := true',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ],		#time : DateAndTime [ '2021-01-25T09:51:18.117907-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #identifier,			#protocol : #accessing,			#sourceCode : 'identifier\r\t^ subjectClass ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ],		#time : DateAndTime [ '2021-01-25T09:51:18.118051-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tsuper initialize.\r\tproperties := OrderedCollection new.\r\tallowNil := false',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ],		#time : DateAndTime [ '2021-01-25T09:51:18.118203-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapAccessor:',			#protocol : #mapping,			#sourceCode : 'mapAccessor: accessor\r\t^ self mapAccessor: accessor to: accessor ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ],		#time : DateAndTime [ '2021-01-25T09:51:18.118349-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapAccessor:mutator:to:',			#protocol : #mapping,			#sourceCode : 'mapAccessor: accessor mutator: mutator to: propertyName\r\t^ self \r\t\tmapProperty: propertyName\r\t\tgetter: [ :object | object perform: accessor ]\r\t\tsetter: [ :object :value | object perform: mutator with: value ] ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ],		#time : DateAndTime [ '2021-01-25T09:51:18.118496-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapAccessor:to:',			#protocol : #mapping,			#sourceCode : 'mapAccessor: accessor to: propertyName\r\t^ self \r\t\tmapProperty: propertyName\r\t\tgetter: [ :object | object perform: accessor ]\r\t\tsetter: [ :object :value | object perform: accessor asMutator with: value ] ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ],		#time : DateAndTime [ '2021-01-25T09:51:18.118707-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapAccessors:',			#protocol : #mapping,			#sourceCode : 'mapAccessors: accessors\r\t^ accessors collect: [ :each | self mapAccessor: each ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ],		#time : DateAndTime [ '2021-01-25T09:51:18.118947-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #mapAllInstVars,			#protocol : #convenience,			#sourceCode : 'mapAllInstVars\r\t^ self mapInstVars: subjectClass allInstVarNames',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ],		#time : DateAndTime [ '2021-01-25T09:51:18.119097-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapInstVar:',			#protocol : #mapping,			#sourceCode : 'mapInstVar: instVarName\r\t^ self mapInstVar: instVarName to: instVarName ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ],		#time : DateAndTime [ '2021-01-25T09:51:18.119261-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapInstVar:to:',			#protocol : #mapping,			#sourceCode : 'mapInstVar: instVarName to: propertyName\r\t| index |\r\tindex := \r\t\t"For portability reasons, do not use instVarIndexFor:ifAbsent: \r\t\t(it doesn\'t exist in all Smalltalk dialects) but the below approach.\r\t\tAlso, convert to symbols for portability reasons"\r\t\t(subjectClass allInstVarNames collect: [ :each | each asSymbol ]) \r\t\t\tindexOf: instVarName asSymbol \r\t\t\tifAbsent: [ self error: \'Inst var not found: \', instVarName printString ].\r\t^ self \r\t\tmapProperty: propertyName asString\r\t\tgetter: [ :object | object instVarAt: index ]\r\t\tsetter: [ :object :value | object instVarAt: index put: value ] \r\t\r',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ],		#time : DateAndTime [ '2021-01-25T09:51:18.119396-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #mapInstVars,			#protocol : #convenience,			#sourceCode : 'mapInstVars\r\t^ self mapInstVars: subjectClass instVarNames',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ],		#time : DateAndTime [ '2021-01-25T09:51:18.119542-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapInstVars:',			#protocol : #mapping,			#sourceCode : 'mapInstVars: instVarNames\r\t^ instVarNames collect: [ :each | self mapInstVar: each ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ],		#time : DateAndTime [ '2021-01-25T09:51:18.119689-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'mapProperty:getter:setter:',			#protocol : #mapping,			#sourceCode : 'mapProperty: propertyName getter: readBlock setter: writeBlock\r\t| propertyMapping |\r\tpropertyMapping := NeoJSONPropertyMapping new.\r\tpropertyMapping \r\t\tpropertyName: propertyName;\r\t\tgetter: readBlock;\r\t\tsetter: writeBlock.\r\tproperties removeAllSuchThat: [ :each | each propertyName = propertyMapping propertyName ].\r\tproperties addLast: propertyMapping.\r\t^ propertyMapping ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ],		#time : DateAndTime [ '2021-01-25T09:51:18.119827-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'propertyNamed:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'propertyNamed: propertyName ifAbsent: block\r\t| symbolPropertyName |\r\tsymbolPropertyName := propertyName asSymbol.\r\t^ properties detect: [ :each | each propertyName = symbolPropertyName ] ifNone: block',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ],		#time : DateAndTime [ '2021-01-25T09:51:18.11998-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'readFrom:',			#protocol : #parsing,			#sourceCode : 'readFrom: jsonReader\r\t| anObject |\r\tanObject := subjectClass new.\r\tallowNil ifTrue: [ \r\t\tjsonReader parseConstantDo: [ :value | \r\t\t\t^ value ifNotNil: [ jsonReader error: \'Unexpected boolean constant\' ] ] ].\r\tjsonReader parseMapKeysDo: [ :key |\r\t\t(self propertyNamed: key ifAbsent: [ nil ])\r\t\t\tifNil: [\r\t\t\t\t"read, skip & ignore value"\r\t\t\t\tjsonReader next ]\r\t\t\tifNotNil: [ :mapping |\r\t\t\t\tmapping readObject: anObject from: jsonReader ] ].\r\t^ anObject',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ],		#time : DateAndTime [ '2021-01-25T09:51:18.120164-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'subjectClass:',			#protocol : #accessing,			#sourceCode : 'subjectClass: smalltalkClass\r\tsubjectClass := smalltalkClass',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ],		#time : DateAndTime [ '2021-01-25T09:51:18.120305-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectMapping,				#isMetaSide : false			},			#name : #'writeObject:on:',			#protocol : #writing,			#sourceCode : 'writeObject: anObject on: jsonWriter\r\tjsonWriter writeMapStreamingDo: [ :jsonMapWriter |\r\t\tproperties do: [ :each |\r\t\t\teach writeObject: anObject on: jsonMapWriter ] ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ],		#time : DateAndTime [ '2021-01-25T09:51:18.120523-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'getter:',			#protocol : #accessing,			#sourceCode : 'getter: block\r\tgetter := block',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ],		#time : DateAndTime [ '2021-01-25T09:51:18.120676-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: stream\r\tsuper printOn: stream.\r\tstream nextPut: $(; print: propertyName; nextPut: $)',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ],		#time : DateAndTime [ '2021-01-25T09:51:18.120882-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #propertyName,			#protocol : #accessing,			#sourceCode : 'propertyName\r\t^ propertyName ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ],		#time : DateAndTime [ '2021-01-25T09:51:18.121187-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'propertyName:',			#protocol : #accessing,			#sourceCode : 'propertyName: symbolOrString\r\tpropertyName := symbolOrString asSymbol',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ],		#time : DateAndTime [ '2021-01-25T09:51:18.121351-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'readObject:from:',			#protocol : #parsing,			#sourceCode : 'readObject: anObject from: jsonReader\r\t| value |\r\tvalue := jsonReader nextAs: valueSchema.\r\tsetter value: anObject value: value',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ],		#time : DateAndTime [ '2021-01-25T09:51:18.121496-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'setter:',			#protocol : #accessing,			#sourceCode : 'setter: block\r\tsetter := block',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ],		#time : DateAndTime [ '2021-01-25T09:51:18.121641-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'valueSchema:',			#protocol : #accessing,			#sourceCode : 'valueSchema: schemaName\r\tvalueSchema := schemaName',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ],		#time : DateAndTime [ '2021-01-25T09:51:18.12179-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONPropertyMapping,				#isMetaSide : false			},			#name : #'writeObject:on:',			#protocol : #writing,			#sourceCode : 'writeObject: anObject on: jsonMapWriter\r\t| value |\r\tvalue := getter value: anObject.\r\t(value notNil or: [ jsonMapWriter writeNil ])\r\t\tifTrue: [ jsonMapWriter writeKey: propertyName value: value as: valueSchema ] ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ],		#time : DateAndTime [ '2021-01-25T09:51:18.121947-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONStreamingWriter class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: jsonWriter\r\t^ self new\r\t\ton: jsonWriter;\r\t\tyourself',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ],		#time : DateAndTime [ '2021-01-25T09:51:18.122106-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tsuper initialize.\r\tfirst := true',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ],		#time : DateAndTime [ '2021-01-25T09:51:18.122271-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #'on:',			#protocol : #initialize-release,			#sourceCode : 'on: aJSONWriter\r\tjsonWriter := aJSONWriter',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ],		#time : DateAndTime [ '2021-01-25T09:51:18.122438-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #wasUsed,			#protocol : #testing,			#sourceCode : 'wasUsed\r\t^ first not',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ],		#time : DateAndTime [ '2021-01-25T09:51:18.122586-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #'writeElement:',			#protocol : #writing,			#sourceCode : 'writeElement: value\r\tfirst \r\t\tifTrue: [ \r\t\t\tjsonWriter newlineIndent. \r\t\t\tfirst := false ]\r\t\tifFalse: [ \r\t\t\tjsonWriter listElementSeparator ].\r\tjsonWriter nextPut: value ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ],		#time : DateAndTime [ '2021-01-25T09:51:18.122734-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #'writeElement:as:',			#protocol : #writing,			#sourceCode : 'writeElement: value as: valueSchema\r\tfirst \r\t\tifTrue: [ \r\t\t\tjsonWriter newlineIndent. \r\t\t\tfirst := false ]\r\t\tifFalse: [ \r\t\t\tjsonWriter listElementSeparator ].\r\tjsonWriter nextPut: value as: valueSchema',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ],		#time : DateAndTime [ '2021-01-25T09:51:18.123674-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #'writeKey:value:',			#protocol : #writing,			#sourceCode : 'writeKey: key value: value\r\tfirst \r\t\tifTrue: [ \r\t\t\tjsonWriter newlineIndent. \r\t\t\tfirst := false ]\r\t\tifFalse: [ \r\t\t\tjsonWriter mapElementSeparator ].\r\tjsonWriter encodeKey: key value: value ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ],		#time : DateAndTime [ '2021-01-25T09:51:18.123839-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #'writeKey:value:as:',			#protocol : #writing,			#sourceCode : 'writeKey: key value: value as: valueSchema\r\tfirst \r\t\tifTrue: [ \r\t\t\tjsonWriter newlineIndent. \r\t\t\tfirst := false ]\r\t\tifFalse: [ \r\t\t\tjsonWriter mapElementSeparator ].\r\tjsonWriter encodeKey: key value: value as: valueSchema',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ],		#time : DateAndTime [ '2021-01-25T09:51:18.123983-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONStreamingWriter,				#isMetaSide : false			},			#name : #writeNil,			#protocol : #accessing,			#sourceCode : 'writeNil\r\t^ jsonWriter writeNil',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ],		#time : DateAndTime [ '2021-01-25T09:51:18.124705-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeObject: self',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ],		#time : DateAndTime [ '2021-01-25T09:51:18.125477-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeString: self',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ],		#time : DateAndTime [ '2021-01-25T09:51:18.125767-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONMappingNotFound class',				#isMetaSide : true			},			#name : #'signalFor:',			#protocol : #'instance creation',			#sourceCode : 'signalFor: anObject\r\t"Create and signal an exception for anObject in the default receiver."\r\t\r\t^ self new\r\t\tobject: anObject;\r\t\tsignal',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ],		#time : DateAndTime [ '2021-01-25T09:51:18.125941-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONMappingNotFound class',				#isMetaSide : true			},			#name : #'signalFor:in:',			#protocol : #'instance creation',			#sourceCode : 'signalFor: anObject in: aCollection\r\t"Create and signal an exception for anObject in aCollection."\r\r\t^ self new\r\t\tobject: anObject;\r\t\tcollection: aCollection;\r\t\tsignal',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ],		#time : DateAndTime [ '2021-01-25T09:51:18.126096-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMappingNotFound,				#isMetaSide : false			},			#name : #collection,			#protocol : #accessing,			#sourceCode : 'collection\r\t"Return the collection where something is not found in"\r\t\r\t^ collection',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ],		#time : DateAndTime [ '2021-01-25T09:51:18.126251-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMappingNotFound,				#isMetaSide : false			},			#name : #'collection:',			#protocol : #accessing,			#sourceCode : 'collection: aCollection\r\t"Set the collection where something is not found in"\r\t\r\tcollection := aCollection',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ],		#time : DateAndTime [ '2021-01-25T09:51:18.126397-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMappingNotFound,				#isMetaSide : false			},			#name : #messageText,			#protocol : #accessing,			#sourceCode : 'messageText\r\t"Overwritten with standard text. To ease portability to other Smalltalk dialects we do not access the instVar \'messageText\' as not all dialects have it. Not caching the value on the instVar shouldn\'t bring any performance hit in this case. "\r\t\r\t^ self standardMessageText ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ],		#time : DateAndTime [ '2021-01-25T09:51:18.126574-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMappingNotFound,				#isMetaSide : false			},			#name : #object,			#protocol : #accessing,			#sourceCode : 'object\r\t"Return the object that was not found"\r\t\r\t^ object',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ],		#time : DateAndTime [ '2021-01-25T09:51:18.126719-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMappingNotFound,				#isMetaSide : false			},			#name : #'object:',			#protocol : #accessing,			#sourceCode : 'object: anObject\r\t"Set the object that was not found"\r\t\r\tobject := anObject',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ],		#time : DateAndTime [ '2021-01-25T09:51:18.126886-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMappingNotFound,				#isMetaSide : false			},			#name : #standardMessageText,			#protocol : #private,			#sourceCode : 'standardMessageText\r\t^ String streamContents: [ :stream |\r\t\tstream << \'No mapping found for \'.\r\t\tstream print: self object.\r\t\tstream << \' in \'.\r\t\tstream print: self collection class ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ],		#time : DateAndTime [ '2021-01-25T09:51:18.127223-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Integer,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeInteger: self',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ],		#time : DateAndTime [ '2021-01-25T09:51:18.127576-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Number,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeFloat: self asFloat',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ],		#time : DateAndTime [ '2021-01-25T09:51:18.127923-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dictionary,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeMap: self',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ],		#time : DateAndTime [ '2021-01-25T09:51:18.128118-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONObject class',				#isMetaSide : true			},			#name : #'fromString:',			#protocol : #convenience,			#sourceCode : 'fromString: string\r\t"Parse string as JSON, so that maps become instances of me"\r\r\t^ (NeoJSONReader on: string readStream)\r\t\t\tmapClass: NeoJSONObject;\r\t\t\tpropertyNamesAsSymbols: true;\r\t\t\tnext',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ],		#time : DateAndTime [ '2021-01-25T09:51:18.128278-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #'at:',			#protocol : #accessing,			#sourceCode : 'at: key\r\t"I return nil for missing keys.\r\tMy superclass would signal a KeyNotFound."\r\t\r\t^ self at: key ifAbsent: [ nil ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ],		#time : DateAndTime [ '2021-01-25T09:51:18.128432-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #'atPath:',			#protocol : #accessing,			#sourceCode : 'atPath: keyCollection\r\t"Use each key in keyCollection recursively, stop when nil is encountered"\r\t\r\t| value |\r\tvalue := self.\r\tkeyCollection do: [ :each |\r\t\tvalue := value at: each.\r\t\tvalue ifNil: [ ^ nil ] ].\r\t^ value ',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ],		#time : DateAndTime [ '2021-01-25T09:51:18.128578-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #'atPath:put:',			#protocol : #accessing,			#sourceCode : 'atPath: keyCollection put: newValue\r\t"Use each key in keyCollection recursively, create new levels when needed"\r\t\r\t| target |\r\tkeyCollection ifEmpty: [ ^ self ].\r\ttarget := self.\r\tkeyCollection allButLastDo: [ :each |\r\t\t(target at: each)\r\t\t\tifNil: [ target := target at: each put: target species new ]\r\t\t\tifNotNil: [ :subValue | target := subValue ] ].\r\t^ target at: keyCollection last put: newValue',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ],		#time : DateAndTime [ '2021-01-25T09:51:18.128725-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #'doesNotUnderstand:',			#protocol : #'reflective operations',			#sourceCode : 'doesNotUnderstand: message\r\t"Overwritten so that \'self foo\' becomes \'self at: #foo\'\r\tand \'self foo: 1\' becomes \'self at: #foo put: 1\' except that self is returned"\r\t\r\t| key |\r\tkey := message selector.\r\tkey isUnary\r\t\tifTrue: [ ^ self at: key ].\r\t^ (key isKeyword and: [ key numArgs = 1 ])\r\t\tifTrue: [ self at: key allButLast asSymbol put: message arguments first; yourself ]\r\t\tifFalse: [ super doesNotUnderstand: message ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ],		#time : DateAndTime [ '2021-01-25T09:51:18.128944-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t"Overwritten to make this accessor available as key"\r\t\r\t^ self at: #name',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ],		#time : DateAndTime [ '2021-01-25T09:51:18.129111-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: stream\r\t"I use my JSON representation when printing myself"\r\r\t[ (NeoJSONWriter on: stream) nextPut: self ]\r\t\ton: Error\r\t\tdo: [ :exception | \r\t\t\tstream\r\t\t\t\tnextPutAll: \' Error printing JSON: \';\r\t\t\t\tnextPutAll: exception printString ]',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ],		#time : DateAndTime [ '2021-01-25T09:51:18.129263-04:00' ],		#trigger : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObject,				#isMetaSide : false			},			#name : #value,			#protocol : #evaluating,			#sourceCode : 'value\r\t"Overwritten to make this accessor available as key"\r\t\r\t^ self at: #value',			#stamp : '',			#package : #Neo-JSON-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-01-25T09:51:18.258365-04:00' ],		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Neo-JSON-Tests-CompatibleUserName.1551110229'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ],		#time : DateAndTime [ '2021-01-25T09:51:18.287147-04:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #Neo-JSON-Tests,		#affectedPackageName : #Neo-JSON-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ],		#time : DateAndTime [ '2021-01-25T09:51:18.289459-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONBenchmarkTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONBenchmarkTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONBenchmarkTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONBenchmarkTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONBenchmarkTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ],		#time : DateAndTime [ '2021-01-25T09:51:18.290997-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONBenchmarkTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONBenchmarkTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONBenchmarkTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONBenchmarkTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONBenchmarkTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONBenchmarkTests.\r\rThis test is obviously dependent on hardware, but the margin is quite high.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONBenchmarkTests.\r\rThis test is obviously dependent on hardware, but the margin is quite high.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ],		#time : DateAndTime [ '2021-01-25T09:51:18.294434-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONExamplesTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONExamplesTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONExamplesTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONExamplesTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONExamplesTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ],		#time : DateAndTime [ '2021-01-25T09:51:18.295232-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONExamplesTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONExamplesTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONExamplesTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONExamplesTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONExamplesTests,					#isMetaSide : false				},				#parent : @8,				#content : 'NeoJSONExamplesTests runs a couple of examples as tests',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'NeoJSONExamplesTests runs a couple of examples as tests',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ],		#time : DateAndTime [ '2021-01-25T09:51:18.297627-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONMappingTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONMappingTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMappingTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMappingTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMappingTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ],		#time : DateAndTime [ '2021-01-25T09:51:18.298388-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONMappingTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONMappingTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMappingTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMappingTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMappingTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONMappingTests, testing more exotic kinds of mapping constructs.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONMappingTests, testing more exotic kinds of mapping constructs.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ],		#time : DateAndTime [ '2021-01-25T09:51:18.300227-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONObjectTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONObjectTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONObjectTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONObjectTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONObjectTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ],		#time : DateAndTime [ '2021-01-25T09:51:18.300903-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONObjectTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONObjectTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONObjectTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONObjectTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONObjectTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONObjectTests, I hold unit tests for NeoJSONObject.\r',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONObjectTests, I hold unit tests for NeoJSONObject.\r',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ],		#time : DateAndTime [ '2021-01-25T09:51:18.302437-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONReaderTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONReaderTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONReaderTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONReaderTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONReaderTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ],		#time : DateAndTime [ '2021-01-25T09:51:18.303137-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONReaderTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONReaderTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONReaderTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONReaderTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONReaderTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONReaderTests, a test suite for NeoJSONReader.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONReaderTests, a test suite for NeoJSONReader.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ],		#time : DateAndTime [ '2021-01-25T09:51:18.305064-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONWriteReadTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriteReadTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ],		#time : DateAndTime [ '2021-01-25T09:51:18.306256-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONWriteReadTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriteReadTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriteReadTests.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONWriteReadTests.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ],		#time : DateAndTime [ '2021-01-25T09:51:18.308983-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONWriteReadTests',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONWriteReadTests subclass: #NeoJSONWriteReadAsciiOnlyTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriteReadAsciiOnlyTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadAsciiOnlyTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadAsciiOnlyTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadAsciiOnlyTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ],		#time : DateAndTime [ '2021-01-25T09:51:18.309783-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONWriteReadTests',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONWriteReadTests subclass: #NeoJSONWriteReadAsciiOnlyTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriteReadAsciiOnlyTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadAsciiOnlyTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadAsciiOnlyTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadAsciiOnlyTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriteReadAsciiOnlyTests.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONWriteReadAsciiOnlyTests.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '214' ],		#self : OmReference [ '215' ],		#time : DateAndTime [ '2021-01-25T09:51:18.311812-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONWriteReadTests',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONWriteReadTests subclass: #NeoJSONWriteReadMockStreamTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriteReadMockStreamTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadMockStreamTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadMockStreamTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadMockStreamTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '215' ],		#self : OmReference [ '216' ],		#time : DateAndTime [ '2021-01-25T09:51:18.312632-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONWriteReadTests',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONWriteReadTests subclass: #NeoJSONWriteReadMockStreamTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriteReadMockStreamTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadMockStreamTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadMockStreamTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadMockStreamTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriteReadMockStreamTests.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONWriteReadMockStreamTests.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '216' ],		#self : OmReference [ '217' ],		#time : DateAndTime [ '2021-01-25T09:51:18.314036-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONWriteReadTests',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONWriteReadTests subclass: #NeoJSONWriteReadPrettyPrintedTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriteReadPrettyPrintedTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadPrettyPrintedTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadPrettyPrintedTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadPrettyPrintedTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '217' ],		#self : OmReference [ '218' ],		#time : DateAndTime [ '2021-01-25T09:51:18.314795-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONWriteReadTests',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONWriteReadTests subclass: #NeoJSONWriteReadPrettyPrintedTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriteReadPrettyPrintedTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriteReadPrettyPrintedTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriteReadPrettyPrintedTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriteReadPrettyPrintedTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriteReadPrettyPrintedTests.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONWriteReadPrettyPrintedTests.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '218' ],		#self : OmReference [ '219' ],		#time : DateAndTime [ '2021-01-25T09:51:18.3163-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONWriterTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriterTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriterTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriterTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriterTests,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '219' ],		#self : OmReference [ '220' ],		#time : DateAndTime [ '2021-01-25T09:51:18.316872-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #NeoJSONWriterTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONWriterTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONWriterTests class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONWriterTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONWriterTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONWriterTests, a test suite for NeoJSONWriter.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONWriterTests, a test suite for NeoJSONWriter.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '220' ],		#self : OmReference [ '221' ],		#time : DateAndTime [ '2021-01-25T09:51:18.318783-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONBenchmark\r\tinstanceVariableNames: \'objects json\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONBenchmark,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONBenchmark,						#isMetaSide : false					},					#name : #objects,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONBenchmark,						#isMetaSide : false					},					#name : #json,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONBenchmark class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONBenchmark class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONBenchmark,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '221' ],		#self : OmReference [ '222' ],		#time : DateAndTime [ '2021-01-25T09:51:18.319416-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONBenchmark\r\tinstanceVariableNames: \'objects json\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONBenchmark,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONBenchmark,						#isMetaSide : false					},					#name : #objects,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONBenchmark,						#isMetaSide : false					},					#name : #json,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONBenchmark class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONBenchmark class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONBenchmark,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONBenchmark.\rI hold 1000 objects of the form Dictionary(\'color\'->\'green\' \'enabled\'->false \'id\'->1 \'name\'->\'Name-1\' \'value\'->0.002 ) in an Array.\rI hold the JSON serialization of that as a String of the form \'[{"value":0.002,"enabled":false,"name":"Name-1","color":"green","id":1}, ...\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark read] bench.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark write] bench.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark read] timeToRun.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark write] timeToRun.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONBenchmark.\rI hold 1000 objects of the form Dictionary(\'color\'->\'green\' \'enabled\'->false \'id\'->1 \'name\'->\'Name-1\' \'value\'->0.002 ) in an Array.\rI hold the JSON serialization of that as a String of the form \'[{"value":0.002,"enabled":false,"name":"Name-1","color":"green","id":1}, ...\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark read] bench.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark write] bench.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark read] timeToRun.\r\r| benchmark |\rbenchmark := NeoJSONBenchmark new.\r[benchmark write] timeToRun.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '222' ],		#self : OmReference [ '223' ],		#time : DateAndTime [ '2021-01-25T09:51:18.320899-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONMockStream\r\tinstanceVariableNames: \'stream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONMockStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONMockStream,						#isMetaSide : false					},					#name : #stream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMockStream class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMockStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMockStream,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '223' ],		#self : OmReference [ '224' ],		#time : DateAndTime [ '2021-01-25T09:51:18.321461-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONMockStream\r\tinstanceVariableNames: \'stream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONMockStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONMockStream,						#isMetaSide : false					},					#name : #stream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONMockStream class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONMockStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONMockStream,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONMockStream.\rI wrap another stream to validate the limited API used.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONMockStream.\rI wrap another stream to validate the limited API used.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '224' ],		#self : OmReference [ '225' ],		#time : DateAndTime [ '2021-01-25T09:51:18.326779-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONTestObject1\r\tinstanceVariableNames: \'id name timestamp points bytes\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONTestObject1,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #id,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #name,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #timestamp,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #points,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #bytes,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONTestObject1 class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONTestObject1 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONTestObject1,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '225' ],		#self : OmReference [ '226' ],		#time : DateAndTime [ '2021-01-25T09:51:18.327386-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONTestObject1\r\tinstanceVariableNames: \'id name timestamp points bytes\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONTestObject1,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #id,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #name,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #timestamp,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #points,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject1,						#isMetaSide : false					},					#name : #bytes,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONTestObject1 class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONTestObject1 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONTestObject1,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONTestObject1.\r\rI repesent a domain model object.\rI have the following properties:\r\r- id <Integer>\r- name <String>\r- timestamp <DateAndTime>\r- points <Array of: Point>\r- bytes <ByteArray>\r\rMy JSON representation is like this:\r\r- id <Number>\r- name <String>\r- created-at <ISO8601 String>\r- points <Array of: <Map x,y>\r- bytes <Array of: Number>\r',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONTestObject1.\r\rI repesent a domain model object.\rI have the following properties:\r\r- id <Integer>\r- name <String>\r- timestamp <DateAndTime>\r- points <Array of: Point>\r- bytes <ByteArray>\r\rMy JSON representation is like this:\r\r- id <Number>\r- name <String>\r- created-at <ISO8601 String>\r- points <Array of: <Map x,y>\r- bytes <Array of: Number>\r',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '226' ],		#self : OmReference [ '227' ],		#time : DateAndTime [ '2021-01-25T09:51:18.328922-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONTestObject2\r\tinstanceVariableNames: \'id width height data\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONTestObject2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #id,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #width,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #height,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #data,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONTestObject2 class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONTestObject2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONTestObject2,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '227' ],		#self : OmReference [ '228' ],		#time : DateAndTime [ '2021-01-25T09:51:18.330718-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONTestObject2\r\tinstanceVariableNames: \'id width height data\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONTestObject2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #id,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #width,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #height,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject2,						#isMetaSide : false					},					#name : #data,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONTestObject2 class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONTestObject2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONTestObject2,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONTestObject2.\r\rInstance Variables\r\tdata:\t\t<String>\r\theight:\t\t<Integer>\r\tid:\t\t\t<Integer>\r\twidth:\t\t<Integer>\r\rUsed for benchmarking and other tests.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONTestObject2.\r\rInstance Variables\r\tdata:\t\t<String>\r\theight:\t\t<Integer>\r\tid:\t\t\t<Integer>\r\twidth:\t\t<Integer>\r\rUsed for benchmarking and other tests.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '228' ],		#self : OmReference [ '229' ],		#time : DateAndTime [ '2021-01-25T09:51:18.332099-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONTestObject2',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONTestObject2 subclass: #NeoJSONTestObject3\r\tinstanceVariableNames: \'color transparent\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONTestObject3,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject3,						#isMetaSide : false					},					#name : #color,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject3,						#isMetaSide : false					},					#name : #transparent,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONTestObject3 class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONTestObject3 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONTestObject3,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '229' ],		#self : OmReference [ '230' ],		#time : DateAndTime [ '2021-01-25T09:51:18.332832-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'NeoJSONTestObject2',				#traitCompositionSource : '{}',				#definitionSource : 'NeoJSONTestObject2 subclass: #NeoJSONTestObject3\r\tinstanceVariableNames: \'color transparent\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONTestObject3,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject3,						#isMetaSide : false					},					#name : #color,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONTestObject3,						#isMetaSide : false					},					#name : #transparent,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONTestObject3 class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONTestObject3 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONTestObject3,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONTestObject3, a subclass of NeoJSONTestObject2.\r\rInstance Variables\r\tcolor:\t\t\t<String>\r\ttransparent :\t<Boolean>\r\rI am used for inheritance testing.\r',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONTestObject3, a subclass of NeoJSONTestObject2.\r\rInstance Variables\r\tcolor:\t\t\t<String>\r\ttransparent :\t<Boolean>\r\rI am used for inheritance testing.\r',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '230' ],		#self : OmReference [ '231' ],		#time : DateAndTime [ '2021-01-25T09:51:18.334342-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONValidation\r\tinstanceVariableNames: \'gitDirectory logStream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONValidation,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONValidation,						#isMetaSide : false					},					#name : #gitDirectory,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONValidation,						#isMetaSide : false					},					#name : #logStream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONValidation class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONValidation class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONValidation,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '231' ],		#self : OmReference [ '232' ],		#time : DateAndTime [ '2021-01-25T09:51:18.335067-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #NeoJSONValidation\r\tinstanceVariableNames: \'gitDirectory logStream\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Neo-JSON-Tests\''			},			#name : #NeoJSONValidation,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONValidation,						#isMetaSide : false					},					#name : #gitDirectory,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #NeoJSONValidation,						#isMetaSide : false					},					#name : #logStream,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'NeoJSONValidation class\r\tinstanceVariableNames: \'\''				},				#name : #'NeoJSONValidation class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #NeoJSONValidation,					#isMetaSide : false				},				#parent : @8,				#content : 'I am NeoJSONValidation, a set of tests to validate NeoJSON against some external rules.\r\rBoth positive & negative tests are includes.\rSome of these are implementation choices.\r\rhttp://seriot.ch/parsing_json.php\rhttps://github.com/nst/JSONTestSuite\rhttps://github.com/nst/JSONTestSuite.git\r  test_parsing\r  test_transform\r\rhttps://github.com/miloyip/nativejson-benchmark\rhttps://github.com/miloyip/nativejson-benchmark.git\r  data/jsonchecker\r  data/roundtrip\r\rThis can only be run with the correct setup (checkout/config).\r\r  NeoJSONValidation new runNativeJsonBenchmarkRoundTrip.\r  NeoJSONValidation new runNativeJsonBenchmarkJsonCheckerPasses.\r  NeoJSONValidation new runNativeJsonBenchmarkJsonCheckerFailures.\r\r  NeoJSONValidation new runJsonTestSuiteTestParsingPasses.\r  NeoJSONValidation new runJsonTestSuiteTestParsingFailures.\r  NeoJSONValidation new runJsonTestSuiteTestParsingInfo.\r\rLogging goes to a file, neo-json-validation.log',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #Neo-JSON-Tests,			#package : #Neo-JSON-Tests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am NeoJSONValidation, a set of tests to validate NeoJSON against some external rules.\r\rBoth positive & negative tests are includes.\rSome of these are implementation choices.\r\rhttp://seriot.ch/parsing_json.php\rhttps://github.com/nst/JSONTestSuite\rhttps://github.com/nst/JSONTestSuite.git\r  test_parsing\r  test_transform\r\rhttps://github.com/miloyip/nativejson-benchmark\rhttps://github.com/miloyip/nativejson-benchmark.git\r  data/jsonchecker\r  data/roundtrip\r\rThis can only be run with the correct setup (checkout/config).\r\r  NeoJSONValidation new runNativeJsonBenchmarkRoundTrip.\r  NeoJSONValidation new runNativeJsonBenchmarkJsonCheckerPasses.\r  NeoJSONValidation new runNativeJsonBenchmarkJsonCheckerFailures.\r\r  NeoJSONValidation new runJsonTestSuiteTestParsingPasses.\r  NeoJSONValidation new runJsonTestSuiteTestParsingFailures.\r  NeoJSONValidation new runJsonTestSuiteTestParsingInfo.\r\rLogging goes to a file, neo-json-validation.log',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '232' ],		#self : OmReference [ '233' ],		#time : DateAndTime [ '2021-01-25T09:51:18.499621-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmarkTests,				#isMetaSide : false			},			#name : #testObject2,			#protocol : #testing,			#sourceCode : 'testObject2\r\t| json |\r\tjson := NeoJSONWriter toString: NeoJSONTestObject2 new.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject2)\r\t\tequals: NeoJSONTestObject2 new',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '233' ],		#self : OmReference [ '234' ],		#time : DateAndTime [ '2021-01-25T09:51:18.500583-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmarkTests,				#isMetaSide : false			},			#name : #testPrettyPrinted,			#protocol : #testing,			#sourceCode : 'testPrettyPrinted\r\t| benchmark |\r\tbenchmark := NeoJSONBenchmark new.\r\tself\r\t\tassert: benchmark writePrettyPrintedRead\r\t\tequals: benchmark read',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '234' ],		#self : OmReference [ '235' ],		#time : DateAndTime [ '2021-01-25T09:51:18.502347-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmarkTests,				#isMetaSide : false			},			#name : #testRead,			#protocol : #testing,			#sourceCode : 'testRead\r\t| benchmark |\r\tbenchmark := NeoJSONBenchmark new.\r\tbenchmark read',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '235' ],		#self : OmReference [ '236' ],		#time : DateAndTime [ '2021-01-25T09:51:18.502669-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmarkTests,				#isMetaSide : false			},			#name : #testWrite,			#protocol : #testing,			#sourceCode : 'testWrite\r\t| benchmark |\r\tbenchmark := NeoJSONBenchmark new.\r\tbenchmark write',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '236' ],		#self : OmReference [ '237' ],		#time : DateAndTime [ '2021-01-25T09:51:18.503244-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONExamplesTests,				#isMetaSide : false			},			#name : #testPoints,			#protocol : #tests,			#sourceCode : 'testPoints\r\t| points json result |\r\t\r\tpoints := Array with: 1@2 with: 3@4 with: 5@6.\r\t\r\tjson := String streamContents: [ :out |\r\t\t(NeoJSONWriter on: out)\r\t\t\tprettyPrint: true;\r\t\t\tmapInstVarsFor: Point;\r\t\t\tnextPut: points ].\r\t\t\r\tresult := (NeoJSONReader on: json readStream)\r\t\tmapInstVarsFor: Point;\r\t\tfor: #ListOfPoints customDo: [ :mapping |\r\t\t\tmapping listOfElementSchema: Point ];\r\t\tnextAs: #ListOfPoints.\r\t\r\tself assert: result equals: points.\r\t\t\t\r\tresult := (NeoJSONReader on: json readStream)\r\t\tmapInstVarsFor: Point;\r\t\tnextListAs: Point.\r\t\r\tself assert: result equals: points.\r\t\t\r\tresult := (NeoJSONReader on: json readStream)\r\t\tmapInstVarsFor: Point;\r\t\tfor: #OrderedCollectionOfPoints customDo: [ :mapping |\r\t\t\tmapping listOfType: OrderedCollection andElementSchema: Point ];\r\t\tnextAs: #OrderedCollectionOfPoints.\r\t\r\tself assert: result equals: points asOrderedCollection.',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '237' ],		#self : OmReference [ '238' ],		#time : DateAndTime [ '2021-01-25T09:51:18.503602-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONExamplesTests,				#isMetaSide : false			},			#name : #testRectanglePoints,			#protocol : #tests,			#sourceCode : 'testRectanglePoints\r\t| rectangle rectangleJson result |\r\r\trectangle := Rectangle origin: 3 @ 4 extent: 5 @ 6.\r\r\trectangleJson := String streamContents: [ :stream | \r\t\t(NeoJSONWriter on: stream)\r\t\t\tprettyPrint: true;\r\t\t\tmapInstVarsFor: Point;\r\t\t\tmapInstVarsFor: Rectangle;\r\t\t\tnextPut: rectangle ].\r\r\tresult := (NeoJSONReader on: rectangleJson readStream)\r\t\tmapInstVarsFor: Point;\r\t\tfor: Rectangle do: [ :mapping | \r\t\t\t(mapping mapInstVar: #origin) valueSchema: Point.\r\t\t\t(mapping mapInstVar: #corner) valueSchema: Point ];\r\t\tnextAs: Rectangle.\r\r\tself assert: result equals: rectangle.\r\r\tresult := (NeoJSONReader on: rectangleJson readStream)\r\t\tmapInstVarsFor: Point;\r\t\tfor: Rectangle do: [ :mapping | \r\t\t\tmapping mapInstVars do: [ :each | each valueSchema: Point ] ];\r\t\tnextAs: Rectangle.\r\t\t\r\tself assert: result equals: rectangle ',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '238' ],		#self : OmReference [ '239' ],		#time : DateAndTime [ '2021-01-25T09:51:18.503819-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONExamplesTests,				#isMetaSide : false			},			#name : #testRectanglePointsWithNils,			#protocol : #tests,			#sourceCode : 'testRectanglePointsWithNils\r\tself\r\t\tassert: \r\t\t\t(String streamContents: [ :stream | \r\t\t\t\t(NeoJSONWriter on: stream)\r\t\t\t\t\tfor: Point do: [ :mapping | mapping mapAllInstVars ];\r\t\t\t\t\tfor: Rectangle do: [ :mapping | \r\t\t\t\t\t\t(mapping mapInstVar: #origin) valueSchema: Point.\r\t\t\t\t\t\t(mapping mapInstVar: #corner) valueSchema: Point ];\r\t\t\t\t\tnextPut: Rectangle new ])\r\t\tequals: \'{}\'.\r\tself\r\t\tassert:\r\t\t\t(String streamContents: [ :stream | \r\t\t\t\t(NeoJSONWriter on: stream)\r\t\t\t\t\tfor: Point do: [ :mapping | mapping mapAllInstVars ];\r\t\t\t\t\tfor: Rectangle\tdo: [ :mapping | \r\t\t\t\t\t\t(mapping mapInstVar: #origin) valueSchema: Point.\r\t\t\t\t\t\t(mapping mapInstVar: #corner) valueSchema: Point ];\r\t\t\t\t\twriteNil: true;\r\t\t\t\t\tnextPut: Rectangle new ])\r\t\tequals: \'{"origin":null,"corner":null}\'.',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '239' ],		#self : OmReference [ '240' ],		#time : DateAndTime [ '2021-01-25T09:51:18.504084-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMappingTests,				#isMetaSide : false			},			#name : #testDynamicTyping,			#protocol : #testing,			#sourceCode : 'testDynamicTyping\r\t| data customMapping json result |\r\tdata := Array with: \'foo\'->1 with: #(\'foo\' 2).\r\t"The idea is to map a key value combination as either a classic association or a simple pair, \r\tusing key & value properties as well as a type property to distinguish between the two"\r\tcustomMapping := [ :mapper |\r\t\tmapper \r\t\t\tfor: #AssocOrPair customDo: [ :mapping |\r\t\t\t\tmapping\r\t\t\t\t\tencoder: [ :x | \r\t\t\t\t\t\tx isArray \r\t\t\t\t\t\t\tifTrue: [ Dictionary new at: \'type\' put: \'pair\'; at: \'key\' put: x first; at: \'value\' put: x second; yourself ] \r\t\t\t\t\t\t\tifFalse: [ Dictionary new at: \'type\' put: \'assoc\'; at: \'key\' put: x key; at: \'value\' put: x value; yourself ] ];\r\t\t\t\t\tdecoder: [ :x |\r\t\t\t\t\t\t(x at: \'type\') = \'pair\'\r\t\t\t\t\t\t\tifTrue: [ Array with: (x at: \'key\') with: (x at: \'value\') ]\r\t\t\t\t\t\t\tifFalse: [ (x at: \'key\') -> (x at: \'value\')] ] ];\r\t\t\tfor: #ArrayOfAssocOrPair customDo: [ :mapping |\r\t\t\t\tmapping listOfType: Array andElementSchema: #AssocOrPair ];\r\t\t\tyourself ].\r\tjson := String streamContents: [ :out |\r\t\t(customMapping value: (NeoJSONWriter on: out)) nextPut: data as: #ArrayOfAssocOrPair ].\r\tresult := (customMapping value: (NeoJSONReader on: json readStream)) nextAs: #ArrayOfAssocOrPair.\r\tself assert: result equals: data',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '240' ],		#self : OmReference [ '241' ],		#time : DateAndTime [ '2021-01-25T09:51:18.50432-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMappingTests,				#isMetaSide : false			},			#name : #testSymbolOrStringInstVarMapping,			#protocol : #testing,			#sourceCode : 'testSymbolOrStringInstVarMapping\r\t| data out1 out2 result1 result2 |\r\tdata := Array with: 1@2 with: 3@4.\r\tout1 := String streamContents: [ :out |\r\t\t(NeoJSONWriter on: out)\r\t\t\tfor: Point do: [ :mapping | mapping mapInstVars: #(x y) ];\r\t\t\tnextPut: data ].\r\tresult1 := (NeoJSONReader on: out1 readStream)\r\t\tfor: Point do: [ :mapping | mapping mapInstVars: #(x y) ];\r\t\tnextListAs: Point.\r\tself assert: result1 equals: data.\r\tout2 := String streamContents: [ :out |\r\t\t(NeoJSONWriter on: out)\r\t\t\tfor: Point do: [ :mapping | mapping mapInstVars: #(\'x\' \'y\') ];\r\t\t\tnextPut: data ].\r\tresult2 := (NeoJSONReader on: out1 readStream)\r\t\tfor: Point do: [ :mapping | mapping mapInstVars: #(\'x\' \'y\') ];\r\t\tnextListAs: Point.\r\tself assert: result2 equals: data',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '241' ],		#self : OmReference [ '242' ],		#time : DateAndTime [ '2021-01-25T09:51:18.50464-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMappingTests,				#isMetaSide : false			},			#name : #testVirtualTransferObject,			#protocol : #testing,			#sourceCode : 'testVirtualTransferObject\r\t| data customMapping extraJson json result |\r\tdata := NeoJSONObject new data: (Array with: 1@1 with: 2@2).\r\textraJson := \'{"foo":1,"data":[{"x":1,"y":1},{"x":2,"y":2,"z":-1}]}\'.\r\t"The idea here is that we are not interested in the top level object just in its data property, \r\twhich should be of a specific type, hence we create a virtual transfer object"\r\tcustomMapping := [ :mapper |\r\t\tmapper\r\t\t\tfor: Point do: [ :mapping |\r\t\t\t\tmapping mapInstVars: #(x y) ];\r\t\t\tfor: #ArrayOfPoints customDo: [ :mapping |\r\t\t\t\tmapping listOfElementSchema: Point ];\r\t\t\tfor: #TransferObject do: [ :mapping |\r\t\t\t\tmapping subjectClass: NeoJSONObject.\r\t\t\t\t(mapping mapAccessor: #data) valueSchema: #ArrayOfPoints ];\r\t\t\tyourself ].\r\t"By using NeoJSONObject accessors (#data & #data:) are translated to generic #at:[put:] messages.\r\tA longer alternative is \r\t(mapping mapProperty: #data getter: [ :obj | obj at: #data ] setter: [ :obj :x | obj at: #data put: x]) valueSchema: #ArrayOfPoints\r\twhere the blocks give you the flexibility to use a plain Dictionary for example"\r\tresult := (customMapping value: (NeoJSONReader on: extraJson readStream)) nextAs: #TransferObject.\r\tself assert: result equals: data.\r\tjson := String streamContents: [ :out |\r\t\t(customMapping value: (NeoJSONWriter on: out)) nextPut: data as: #TransferObject ].\r\tresult := (customMapping value: (NeoJSONReader on: json readStream)) nextAs: #TransferObject.\r\tself assert: result equals: data',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '242' ],		#self : OmReference [ '243' ],		#time : DateAndTime [ '2021-01-25T09:51:18.504894-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectTests,				#isMetaSide : false			},			#name : #testAtPath,			#protocol : #testing,			#sourceCode : 'testAtPath\r\t| object |\r\tobject := NeoJSONObject newFrom:  (Array with:  #one -> ( NeoJSONObject newFrom:  (Array with:  #two -> ( NeoJSONObject newFrom: (Array with:  #three -> 42) ) ) )).\r\tself assert: (object atPath: #(one two three)) equals: 42.\r\tself assert: (object atPath: #(one two three)) equals: object one two three.\t\r\tself assert: (object atPath: #(missing)) equals: nil.\r\tself assert: (object atPath: #(one missing)) equals: nil.\r\tself assert: (object atPath: #(one two missing)) equals: nil.\r\tself assert: (object atPath: #(one two missing)) equals: object one two missing.\r\t\r\tobject := NeoJSONObject newFrom:  (Array with: #foo -> 42).\r\tself assert: (object atPath: #(foo)) equals: 42.\r\tself assert: (object atPath: #(foo)) equals: object foo.\r\tself assert: (object atPath: #(foo)) equals: (object at: #foo).\r\tself assert: (object atPath: #()) equals: object.\r\t\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '243' ],		#self : OmReference [ '244' ],		#time : DateAndTime [ '2021-01-25T09:51:18.505105-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectTests,				#isMetaSide : false			},			#name : #testAtPathPut,			#protocol : #testing,			#sourceCode : 'testAtPathPut\r\t| object |\r\tobject := NeoJSONObject new.\r\tobject atPath: #(one test) put: 42.\r\tself assert: (object atPath: #(one test)) equals: 42.\r\tself assert: object one test equals: 42.\r\tobject atPath: #(one two three) put: #foo.\r\tself assert: (object atPath: #(one two three)) equals: #foo.\r\tself assert: object one two three equals: #foo.\r\tobject atPath: #(one two threeBis) put: #bar.\r\tself assert: (object atPath: #(one two threeBis)) equals: #bar.\r\tself assert: object one two threeBis equals: #bar.\r\t\r\tself assert: object foo isNil.\r\tself assert: (object atPath: #() put: 1) equals: object.\r\tself assert: (object atPath: #(foo) put: 1) equals: 1.\r\tself assert: (object atPath: #(foo)) equals: 1.\r\tself assert: object foo equals: 1\r\t \r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '244' ],		#self : OmReference [ '245' ],		#time : DateAndTime [ '2021-01-25T09:51:18.505298-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectTests,				#isMetaSide : false			},			#name : #testCRUD,			#protocol : #testing,			#sourceCode : 'testCRUD\r\t| object |\r\tobject := NeoJSONObject new.\r\tself assert: object isEmpty.\r\tself assert: object foo equals: nil.\r\tobject foo: 123.\r\tself assert: object foo equals: 123.\r\tself assert: object printString equals: \'{"foo":123}\'.\r\tobject name: \'test\'.\r\tobject value: Float pi.\r\tself assert: object name equals: \'test\'.\r\tself assert: (object value closeTo: Float pi).\r\tself assert: object keys asSet equals: #(foo name value) asSet.\r\tobject removeKey: #foo.\r\tself assert: object foo equals: nil.\r\tobject removeAll.\r\tself assert: object isEmpty',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '245' ],		#self : OmReference [ '246' ],		#time : DateAndTime [ '2021-01-25T09:51:18.505516-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONObjectTests,				#isMetaSide : false			},			#name : #testJSON,			#protocol : #testing,			#sourceCode : 'testJSON\r\t| data  json object |\r\tdata := NeoJSONObject newFrom: (Array with: #foo->1 with: #bar->2 with: #str->\'Str!\' with: #bool->true with: #flt->1.5).\r\tjson := NeoJSONWriter toString: data .\r\tobject := NeoJSONObject fromString: json.\r\tself assert: object class equals: NeoJSONObject.\r\tself assert: object equals: data.\r\tjson := (NeoJSONWriter toString: object).\r\tself assert: (NeoJSONObject fromString: json) equals: object',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '246' ],		#self : OmReference [ '247' ],		#time : DateAndTime [ '2021-01-25T09:51:18.505724-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testAllowNil,			#protocol : #testing,			#sourceCode : 'testAllowNil\r\tself \r\t\tshould: [ \r\t\t\t(NeoJSONReader on: \'null\' readStream)\r\t\t\t\tmapInstVarsFor: Point;\r\t\t\t\tnextAs: Point ] \r\t\traise: NeoJSONParseError.\r\tself\r\t\tassert: ((NeoJSONReader on: \'null\' readStream)\r\t\t\t\t\t\tmapInstVarsFor: Point;\r\t\t\t\t\t\tfor: Point do: [ :mapping | mapping allowNil ];\r\t\t\t\t\t\tnextAs: Point)\r\t\tequals: nil.\r\tself\r\t\tassert: ((NeoJSONReader on: \'[ { "x" : 1, "y" : 2 }, null, { "x" : 3, "y" : -1 } ]\' readStream)\r\t\t\t\t\t\tmapInstVarsFor: Point;\r\t\t\t\t\t\tfor: Point do: [ :mapping | mapping allowNil ];\r\t\t\t\t\t\tfor: #ArrayOfPoints customDo: [ :mapping | mapping listOfElementSchema: Point ];\r\t\t\t\t\t\tnextAs: #ArrayOfPoints)\r\t\tequals: (Array with: 1 @ 2 with: nil with: 3 @ -1).',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '247' ],		#self : OmReference [ '248' ],		#time : DateAndTime [ '2021-01-25T09:51:18.505911-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testArrayOfPoints,			#protocol : #testing,			#sourceCode : 'testArrayOfPoints\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tfor: Point do: [ :mapping |\r\t\t\t\tmapping mapInstVars: #(x y) ];\r\t\t\tfor: #ArrayOfPoints customDo: [ :mapping |\r\t\t\t\tmapping listOfElementSchema: Point ];\r\t\t\tnextAs: #ArrayOfPoints ].\r\tself assert: (reader value: \'[ { "x":1, "y":2 }, { "x":-1, "y":-2 } ]\') equals: (Array with: 1@2 with: -1@ -2) . \r\tself assert: (reader value: \'[ ]\') equals: #().\r\tself assert: (reader value: \'[ { } ]\') equals: (Array with: Point new)',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '248' ],		#self : OmReference [ '249' ],		#time : DateAndTime [ '2021-01-25T09:51:18.506073-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testArrayOfPointsUsingNextListAs,			#protocol : #testing,			#sourceCode : 'testArrayOfPointsUsingNextListAs\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tmapInstVarsFor: Point;\r\t\t\tnextListAs: Point ].\r\tself assert: (reader value: \'[ { "x":1, "y":2 }, { "y":-2, "x":-1 } ]\') equals: (Array with: 1@2 with: -1@ -2) . \r\tself assert: (reader value: \'[ ]\') equals: #().\r\tself assert: (reader value: \'[ { } ]\') equals: (Array with: Point new) ',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '249' ],		#self : OmReference [ '250' ],		#time : DateAndTime [ '2021-01-25T09:51:18.506377-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testAssociation,			#protocol : #testing,			#sourceCode : 'testAssociation\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tfor: Association do: [ :mapping |\r\t\t\t\tmapping mapAccessors: #(key value) ]; \r\t\t\tnextAs: Association ].\r\tself assert: (reader value: \'{"key":"foo","value":42}\') equals: \'foo\' -> 42. \r\tself assert: (reader value: \'{}\') equals: Association new',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '250' ],		#self : OmReference [ '251' ],		#time : DateAndTime [ '2021-01-25T09:51:18.506675-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testBooleans,			#protocol : #testing,			#sourceCode : 'testBooleans\r\tself assert: (NeoJSONReader on: \'true\' readStream) next equals: true.\r\tself assert: (NeoJSONReader on: \'false\' readStream) next equals: false.\r\tself should: [ (NeoJSONReader on: \'tru\' readStream) next ] raise: NeoJSONParseError.\r\tself should: [ (NeoJSONReader on: \'falsE\' readStream) next ] raise: NeoJSONParseError.',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '251' ],		#self : OmReference [ '252' ],		#time : DateAndTime [ '2021-01-25T09:51:18.506907-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testByteArray,			#protocol : #testing,			#sourceCode : 'testByteArray\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tfor: ByteArray customDo: [ :mapping |\r\t\t\t\tmapping listOfType: ByteArray ];\r\t\t\tnextAs: ByteArray ].\r\tself assert: (reader value: \'[ 1, 2, 3 ]\') equals: #[1 2 3].\r\tself assert: (reader value: \'[ ]\') equals: ByteArray new',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '252' ],		#self : OmReference [ '253' ],		#time : DateAndTime [ '2021-01-25T09:51:18.507074-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testDate,			#protocol : #testing,			#sourceCode : 'testDate\r\t| reader |\r\treader := [ :input | \r\t\t(NeoJSONReader on: input readStream) \r\t\t\tfor: Date customDo: [ :mapping |\r\t\t\t\tmapping decoder: [ :string | Date fromString: string ] ];\r\t\t\tnextAs: Date ].\r\tself assert: (reader value: \' "2012-06-08" \') equals: (Date fromString: \'2012-06-08\') ',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '253' ],		#self : OmReference [ '254' ],		#time : DateAndTime [ '2021-01-25T09:51:18.507236-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testDateAndTime,			#protocol : #testing,			#sourceCode : 'testDateAndTime \r\t| reader |\r\treader := [ :input | \r\t\t(NeoJSONReader on: input readStream) \r\t\t\tfor: DateAndTime customDo: [ :mapping |\r\t\t\t\tmapping decoder: [ :string | DateAndTime fromString: string ] ];\r\t\t\tnextAs: DateAndTime ].\r\tself \r\t\tassert: (reader value: \' "2012-02-14T16:40:18+01:00" \') \r\t\tequals: (DateAndTime year: 2012 month: 2 day: 14 hour: 16 minute: 40 second: 18 offset: 1 hour)',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '254' ],		#self : OmReference [ '255' ],		#time : DateAndTime [ '2021-01-25T09:51:18.507444-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testFloats,			#protocol : #testing,			#sourceCode : 'testFloats\r\t| reader |\r\treader := [ :string |\r\t\t(NeoJSONReader on: string readStream) next ].\r\tself assert: ((reader value: \'123.0\') closeTo: 123.0).\r\tself assert: ((reader value: \'-123.0\') closeTo: -123.0).\r\tself assert: ((reader value: \'123.0e0\') closeTo: 123.0).\r\tself assert: ((reader value: \'123e6\') closeTo: 123e6).\r\tself assert: ((reader value: \'123e+6\') closeTo: 123e6).\r\tself assert: ((reader value: \'123e-6\') closeTo: 123e-6).\r\tself assert: ((reader value: \'123E6\') closeTo: 123e6).\r\tself assert: ((reader value: \'123E+6\') closeTo: 123e6).\r\tself assert: ((reader value: \'123E-6\') closeTo: 123e-6).\r\tself assert: ((reader value: \'-123e6\') closeTo: -123e6).\r\tself assert: ((reader value: \'-123e-6\') closeTo: -123e-6).\r\tself assert: ((reader value: \'-123E6\') closeTo: -123e6).\r\tself assert: ((reader value: \'-123E-6\') closeTo: -123e-6).\r\tself assert: ((reader value: \'3.14159\') closeTo: Float pi).\r\tself assert: ((reader value: \'0.123e6\') closeTo: 0.123e6).\r\tself assert: ((reader value: \'0.123e-6\') closeTo: 0.123e-6).\r\tself assert: ((reader value: \'-0.123E6\') closeTo: -0.123e6).\r\tself assert: ((reader value: \'-0.123E-6\') closeTo: -0.123e-6).\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '255' ],		#self : OmReference [ '256' ],		#time : DateAndTime [ '2021-01-25T09:51:18.507621-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testIntegers,			#protocol : #testing,			#sourceCode : 'testIntegers\r\t| reader |\r\treader := [ :string |\r\t\t(NeoJSONReader on: string readStream) next ].\r\tself assert: (reader value: \'123\') equals: 123.\r\tself assert: (reader value: \'00123\') equals: 123.\r\tself assert: (reader value: \'-123\') equals: -123.\r\tself assert: (reader value: \'-0123\') equals: -123.\r\tself assert: (reader value: \'0\') equals: 0.\r\tself assert: (reader value: \'-0\') equals: 0.\r\tself assert: (reader value: \'00\') equals: 0.\r\tself assert: (reader value: \' 123\t\') equals: 123.\r\tself should: [ reader value: \'+1\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \' - \' ] raise: NeoJSONParseError.\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '256' ],		#self : OmReference [ '257' ],		#time : DateAndTime [ '2021-01-25T09:51:18.507788-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testLists,			#protocol : #testing,			#sourceCode : 'testLists\r\t| reader |\r\treader := [ :string |\r\t\t(NeoJSONReader on: string readStream) next ].\r\tself assert: (reader value: \'[1,2,3]\') equals: #(1 2 3).\r\tself assert: (reader value: \'[]\') equals: #().\r\tself assert: (reader value: \' [ 1 , 2 , 3 ] \') equals: #(1 2 3).\r\tself assert: (reader value: \' [ ] \') equals: #().\r\tself should: [ reader value: \'[1,]\' ] raise: NeoJSONParseError. \r\tself should: [ reader value: \'[\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \']\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \'[}\' ] raise: NeoJSONParseError',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '257' ],		#self : OmReference [ '258' ],		#time : DateAndTime [ '2021-01-25T09:51:18.507965-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testMaps,			#protocol : #testing,			#sourceCode : 'testMaps\r\t| reader |\r\treader := [ :string |\r\t\t(NeoJSONReader on: string readStream) next ].\r\tself assert: (reader value: \'{"x":1,"y":2}\') equals: (Dictionary newFromPairs: #( \'x\' 1 \'y\' 2)).\r\tself assert: (reader value: \'{}\') equals: Dictionary new.\r\tself assert: (reader value: \' { "x" : 1 , "y" : 2 } \' ) equals: (Dictionary newFromPairs: #( \'x\' 1 \'y\' 2)).\r\tself assert: (reader value: \' { } \') equals: Dictionary new.\r\tself should: [ reader value: \'{"foo":}\' ] raise: NeoJSONParseError. \r\tself should: [ reader value: \'{"foo":9,}\' ] raise: NeoJSONParseError. \r\tself should: [ reader value: \'{9:true,}\' ] raise: NeoJSONParseError. \r\tself should: [ reader value: \'{\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \'}\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \'{]\' ] raise: NeoJSONParseError',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '258' ],		#self : OmReference [ '259' ],		#time : DateAndTime [ '2021-01-25T09:51:18.508121-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testNextStringAsHex,			#protocol : #testing,			#sourceCode : 'testNextStringAsHex\r\t| string |\r\tstring := (NeoJSONReader on: \'"466F6F2062617221"\' readStream)\r\t\tfor: #StringAsHex\r\t\t\tcustomDo: [ :mapping | \r\t\t\t\t\tmapping\r\t\t\t\t\t\tencoder: [ :x | x asByteArray hex asUppercase ];\r\t\t\t\t\t\tdecoder: [ :x | (ByteArray readHexFrom: x) asString ] ];\r\t\tnextAs: #StringAsHex.\r\tself assert: string equals: \'Foo bar!\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '259' ],		#self : OmReference [ '260' ],		#time : DateAndTime [ '2021-01-25T09:51:18.508285-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testNonBMPCharacterDecoding,			#protocol : #testing,			#sourceCode : 'testNonBMPCharacterDecoding\r\t"Characters not in the Basic Multilingual Plane are encoded as a UTF-16 surrogate pair"\r\r\t| string object |\r\tstring := 16r1D11E asCharacter asString. "MUSICAL SYMBOL G CLEF"\r\tobject := (NeoJSONReader fromString: \'"\\uD834\\uDD1E"\').\r\tself assert: object equals: string',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '260' ],		#self : OmReference [ '261' ],		#time : DateAndTime [ '2021-01-25T09:51:18.508429-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testNull,			#protocol : #testing,			#sourceCode : 'testNull\r\tself assert: (NeoJSONReader on: \'null\' readStream) next equals: nil.\r\tself assert: (NeoJSONReader on: \'\tnull \' readStream) next equals: nil.\r\tself should: [ (NeoJSONReader on: \'\tnil \' readStream) next ] raise: NeoJSONParseError.',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '261' ],		#self : OmReference [ '262' ],		#time : DateAndTime [ '2021-01-25T09:51:18.508589-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testOrderedCollection,			#protocol : #testing,			#sourceCode : 'testOrderedCollection\r\t| json list |\r\tjson := \'[ 1, 2, 3 ]\'.\r\tlist := (NeoJSONReader on: json readStream) \r\t\tlistClass: OrderedCollection;\r\t\tnext.\r\tself \r\t\tassert: list \r\t\tequals: (OrderedCollection with: 1 with: 2 with: 3).\r\tself \r\t\tassert: list class \r\t\tequals: OrderedCollection',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '262' ],		#self : OmReference [ '263' ],		#time : DateAndTime [ '2021-01-25T09:51:18.508751-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testOrderedCollectionOfPoints,			#protocol : #testing,			#sourceCode : 'testOrderedCollectionOfPoints\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tfor: Point do: [ :mapping |\r\t\t\t\tmapping mapInstVars: #(x y) ];\r\t\t\tfor: #OrderedCollectionOfPoints customDo: [ :mapping |\r\t\t\t\tmapping listOfType: OrderedCollection andElementSchema: Point ];\r\t\t\tnextAs: #OrderedCollectionOfPoints ].\r\tself assert: (reader value: \'[ { "x":1, "y":2 }, { "x":-1, "y":-2 } ]\') equals: (Array with: 1@2 with: -1@ -2) asOrderedCollection. \r\tself assert: (reader value: \'[ ]\') equals: OrderedCollection new.\r\tself assert: (reader value: \'[ { } ]\') equals: (OrderedCollection with: Point new)',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '263' ],		#self : OmReference [ '264' ],		#time : DateAndTime [ '2021-01-25T09:51:18.508914-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testParseErrors,			#protocol : #testing,			#sourceCode : 'testParseErrors\r\tself should: [ NeoJSONReader fromString: \'zero\' ] raise: NeoJSONParseError.\r\tself should: [ NeoJSONReader fromString: \'#\' ] raise: NeoJSONParseError.\r\tself should: [ NeoJSONReader fromString: \'@\' ] raise: NeoJSONParseError.\r\t\r\tself should: [ (NeoJSONReader on: \'[1,2,3]true\' readStream) next; failIfNotAtEnd ] raise: NeoJSONParseError.\r\tself should: [ (NeoJSONReader on: \'{"foo":1}"extra"\' readStream) next; failIfNotAtEnd ] raise: NeoJSONParseError.\r\tself should: [ (NeoJSONReader on: \'[]"extra"\' readStream) next; failIfNotAtEnd ] raise: NeoJSONParseError.',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '264' ],		#self : OmReference [ '265' ],		#time : DateAndTime [ '2021-01-25T09:51:18.509063-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testPoint,			#protocol : #testing,			#sourceCode : 'testPoint\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) nextAs: Point ].\r\tself should: [ reader value: \'{"x":1,"y":2}\' ] raise: NeoJSONMappingNotFound',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '265' ],		#self : OmReference [ '266' ],		#time : DateAndTime [ '2021-01-25T09:51:18.50922-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testPoint1,			#protocol : #testing,			#sourceCode : 'testPoint1\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tfor: Point do: [ :mapping |\r\t\t\t\tmapping mapProperty: \'x\' getter: [ :point | point x ] setter: [ :point :value | point setX: value setY: point y ].\r\t\t\t\tmapping mapProperty: \'y\' getter: [ :point | point y ] setter: [ :point :value | point setX: point x setY: value ]. ];\r\t\t\tnextAs: Point ].\r\tself assert: (reader value: \'{"x":1,"y":2}\') equals: 1@2. \r\tself assert: (reader value: \'{}\') equals: Point new',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '266' ],		#self : OmReference [ '267' ],		#time : DateAndTime [ '2021-01-25T09:51:18.509363-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testPoint2,			#protocol : #testing,			#sourceCode : 'testPoint2\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tmapAllInstVarsFor: Point;\r\t\t\tnextAs: Point ].\r\tself assert: (reader value: \'{"x":1,"y":2}\') equals: 1@2. \r\tself assert: (reader value: \'{}\') equals: Point new',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '267' ],		#self : OmReference [ '268' ],		#time : DateAndTime [ '2021-01-25T09:51:18.509509-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testPoint3,			#protocol : #testing,			#sourceCode : 'testPoint3\r\t| reader |\r\treader := [ :string | \r\t\t(NeoJSONReader on: string readStream) \r\t\t\tfor: Point do: [ :mapping |\r\t\t\t\tmapping mapInstVars: #(x y) ];\r\t\t\tnextAs: Point ].\r\tself assert: (reader value: \'{"x":1,"y":2}\') equals: 1@2. \r\tself assert: (reader value: \'{}\') equals: Point new',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '268' ],		#self : OmReference [ '269' ],		#time : DateAndTime [ '2021-01-25T09:51:18.509744-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testPointUsingAsString,			#protocol : #testing,			#sourceCode : 'testPointUsingAsString\r\t| point |\r\tpoint := (NeoJSONReader on: \'{"x":"1","y":"2"}\' readStream)\r\t\tfor: Point\r\t\t\tdo: [ :mapping | \r\t\t\t\t\t(mapping \r\t\t\t\t\t\tmapProperty: #x \r\t\t\t\t\t\tgetter: [ :object | object x ] \r\t\t\t\t\t\tsetter: [ :object :value | object setX: value setY: object y ])\r\t\t\t\t\t\tvalueSchema: #AsString.\r\t\t\t\t\t(mapping\r\t\t\t\t\t\tmapProperty: #y\r\t\t\t\t\t\tgetter: [ :object | object y ]\r\t\t\t\t\t\tsetter: [ :object :value | object setX: object x setY: value ]) \r\t\t\t\t\t\tvalueSchema: #AsString ];\r\t\tfor: #AsString\r\t\t\tcustomDo: [ :mapping | \r\t\t\t\t\tmapping\r\t\t\t\t\t\tencoder: [ :x | x asString ];\r\t\t\t\t\t\tdecoder: [ :x | x asNumber ] ];\r\t\tnextAs: Point.\r\tself assert: point equals: 1 @ 2',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '269' ],		#self : OmReference [ '270' ],		#time : DateAndTime [ '2021-01-25T09:51:18.510921-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testPropertyNamesAsSymbols,			#protocol : #testing,			#sourceCode : 'testPropertyNamesAsSymbols\r\t| json map |\r\tjson := \'{ "x" : true, "y" : false, "key-1" : 1 }\'.\r\tmap := (NeoJSONReader on: json readStream) \r\t\tpropertyNamesAsSymbols: true; \r\t\tnext.\r\tself \r\t\tassert: map \r\t\tequals: (Dictionary new at: #x put: true; at: #y put: false; at: #\'key-1\' put: 1; yourself).\r\tself assert: (map keys allSatisfy: [ :each | each isSymbol ])',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '270' ],		#self : OmReference [ '271' ],		#time : DateAndTime [ '2021-01-25T09:51:18.511144-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testSmallDictionary,			#protocol : #testing,			#sourceCode : 'testSmallDictionary\r\t| json map smallDictionaryClass |\r\tjson := \'{ "x" : true, "y" : false, "key-1" : 1 }\'.\r\tsmallDictionaryClass := Smalltalk at: #SmallDictionary ifAbsent: [ Dictionary ].\r\tmap := (NeoJSONReader on: json readStream) \r\t\tmapClass: smallDictionaryClass;\r\t\tnext.\r\tself \r\t\tassert: map \r\t\tequals: (smallDictionaryClass new at: \'x\' put: true; at: \'y\' put: false; at: \'key-1\' put: 1; yourself).\r\tself \r\t\tassert: map class \r\t\tequals: smallDictionaryClass',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '271' ],		#self : OmReference [ '272' ],		#time : DateAndTime [ '2021-01-25T09:51:18.511339-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testStrings,			#protocol : #testing,			#sourceCode : 'testStrings\r\t| reader |\r\treader := [ :string |\r\t\t(NeoJSONReader on: string readStream) next ].\r\tself assert: (reader value: \'"foo"\') equals: \'foo\'.\r\tself assert: (reader value: \'""\') equals: \'\'.\r\tself assert: (reader value: \'"Foo BAR"\') equals: \'Foo BAR\'.\r\tself assert: (reader value: \'" foo "\') equals: \' foo \'.\r\tself assert: (reader value: \'"\\u00E9l\\u00E8ve en Fran\\u00E7ais"\') equals: \'élève en Français\'.\r\tself \r\t\tassert: (reader value: \'"\\"\\\\\\/\\t\\r\\n\\f\\b"\') \r\t\tequals: (String withAll: ( OrderedCollection new \r\t\t\tadd: $";\r\t\t\tadd: $\\; \r\t\t\tadd: $/;\r\t\t\tadd: Character tab;\r\t\t\tadd: Character cr;\r\t\t\tadd: Character lf;\r\t\t\tadd: Character newPage; \r\t\t\tadd: Character backspace;\r\t\t\tyourself )).\r\tself should: [ reader value: \'"open\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \'"\\uAA"\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \'"\\uZZ"\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \'"\\x"\' ] raise: NeoJSONParseError.\r\tself should: [ reader value: \' " \' ] raise: NeoJSONParseError.\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '272' ],		#self : OmReference [ '273' ],		#time : DateAndTime [ '2021-01-25T09:51:18.511491-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testSymbol,			#protocol : #testing,			#sourceCode : 'testSymbol\r\t| reader |\r\treader := [ :input | \r\t\t(NeoJSONReader on: input readStream) \r\t\t\tfor: Symbol customDo: [ :mapping |\r\t\t\t\tmapping decoder: [ :string | string asSymbol ] ];\r\t\t\tnextAs: Symbol ].\r\tself assert: (reader value: \' "foo" \') equals: #foo.\r\tself assert: (reader value: \' "FOO-1" \') equals: #\'FOO-1\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '273' ],		#self : OmReference [ '274' ],		#time : DateAndTime [ '2021-01-25T09:51:18.511643-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONReaderTests,				#isMetaSide : false			},			#name : #testTime,			#protocol : #testing,			#sourceCode : 'testTime\r\t| reader |\r\treader := [ :input | \r\t\t(NeoJSONReader on: input readStream) \r\t\t\tfor: Time customDo: [ :mapping |\r\t\t\t\tmapping decoder: [ :string | Time fromString: string ] ];\r\t\t\tnextAs: Time ].\r\tself assert: (reader value: \' "14:30:08" \') equals: (Time hour: 14 minute: 30 second: 8)',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '274' ],		#self : OmReference [ '275' ],		#time : DateAndTime [ '2021-01-25T09:51:18.511816-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadAsciiOnlyTests,				#isMetaSide : false			},			#name : #'writeRead:',			#protocol : #private,			#sourceCode : 'writeRead: object\r\t| json |\r\tjson := String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream) asciiOnly: true; nextPut: object ].\r\t^ (NeoJSONReader on: json readStream) next ',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '275' ],		#self : OmReference [ '276' ],		#time : DateAndTime [ '2021-01-25T09:51:18.512023-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadMockStreamTests,				#isMetaSide : false			},			#name : #'writeRead:',			#protocol : #private,			#sourceCode : 'writeRead: object\r\t| json |\r\tjson := String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: (NeoJSONMockStream on: stream))\r\t\t\tprettyPrint: true;\r\t\t\tnextPut: object ].\r\t^ (NeoJSONReader on: (NeoJSONMockStream on: json readStream)) next ',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '276' ],		#self : OmReference [ '277' ],		#time : DateAndTime [ '2021-01-25T09:51:18.512306-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadPrettyPrintedTests,				#isMetaSide : false			},			#name : #testDictionaryOfObject2,			#protocol : #testing,			#sourceCode : 'testDictionaryOfObject2\r\t| data json reader |\r\tdata := Dictionary new.\r\tdata \r\t\tat: \'one\' put: NeoJSONTestObject2 example1;\r\t\tat: \'two\' put: NeoJSONTestObject2 example1.\r\tjson := NeoJSONWriter toStringPretty: data.\r\treader := NeoJSONReader on: json readStream.\r\treader for: #DictionaryOfObject2 customDo: [ :mapping |\r\t\tmapping mapWithValueSchema: NeoJSONTestObject2 ].  \r\tself \r\t\tassert: (reader nextAs: #DictionaryOfObject2)\r\t\tequals: data',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '277' ],		#self : OmReference [ '278' ],		#time : DateAndTime [ '2021-01-25T09:51:18.512493-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadPrettyPrintedTests,				#isMetaSide : false			},			#name : #testObject1,			#protocol : #testing,			#sourceCode : 'testObject1\r\t| json |\r\tjson := NeoJSONWriter toStringPretty: NeoJSONTestObject1 example1.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject1)\r\t\tequals: NeoJSONTestObject1 example1',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '278' ],		#self : OmReference [ '279' ],		#time : DateAndTime [ '2021-01-25T09:51:18.512646-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadPrettyPrintedTests,				#isMetaSide : false			},			#name : #testObject2,			#protocol : #testing,			#sourceCode : 'testObject2\r\t| json |\r\tjson := NeoJSONWriter toStringPretty: NeoJSONTestObject2 example1.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject2)\r\t\tequals: NeoJSONTestObject2 example1',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '279' ],		#self : OmReference [ '280' ],		#time : DateAndTime [ '2021-01-25T09:51:18.5128-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadPrettyPrintedTests,				#isMetaSide : false			},			#name : #testObject3,			#protocol : #testing,			#sourceCode : 'testObject3\r\t| json |\r\tjson := NeoJSONWriter toStringPretty: NeoJSONTestObject3 example1.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject3)\r\t\tequals: NeoJSONTestObject3 example1',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '280' ],		#self : OmReference [ '281' ],		#time : DateAndTime [ '2021-01-25T09:51:18.51295-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadPrettyPrintedTests,				#isMetaSide : false			},			#name : #'writeRead:',			#protocol : #private,			#sourceCode : 'writeRead: object\r\t| json |\r\tjson := String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream) \r\t\t\tprettyPrint: true;\r\t\t\tnextPut: object ].\r\t^ (NeoJSONReader on: json readStream) next ',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '281' ],		#self : OmReference [ '282' ],		#time : DateAndTime [ '2021-01-25T09:51:18.513123-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testDictionaryOfObject2,			#protocol : #testing,			#sourceCode : 'testDictionaryOfObject2\r\t| data json reader |\r\tdata := Dictionary new.\r\tdata \r\t\tat: \'one\' put: NeoJSONTestObject2 example1;\r\t\tat: \'two\' put: NeoJSONTestObject2 example1.\r\tjson := NeoJSONWriter toString: data.\r\treader := NeoJSONReader on: json readStream.\r\treader for: #DictionaryOfObject2 customDo: [ :mapping |\r\t\tmapping mapWithValueSchema: NeoJSONTestObject2 ].  \r\tself \r\t\tassert: (reader nextAs: #DictionaryOfObject2)\r\t\tequals: data',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '282' ],		#self : OmReference [ '283' ],		#time : DateAndTime [ '2021-01-25T09:51:18.51331-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testFloats,			#protocol : #testing,			#sourceCode : 'testFloats\r\t| objects |\r\tobjects := OrderedCollection new add: Float pi; add: 1.0; add: -1.0; add: 0.0; add: 1.5e6; add: -1.5e6; add: 1.5e-6; add: -1.5e-6; yourself.\r\t(self writeRead: objects) \r\t\twith: objects \r\t\tdo: [ :first :second | self assert: (first closeTo: second) ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '283' ],		#self : OmReference [ '284' ],		#time : DateAndTime [ '2021-01-25T09:51:18.513479-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testIntegers,			#protocol : #testing,			#sourceCode : 'testIntegers\r\t| objects |\r\tobjects := Array with: 1 with: -1 with: 0 with: 123467890 with: -1234567890.\r\tself \r\t\tassert: (self writeRead: objects)\r\t\tequals: objects',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '284' ],		#self : OmReference [ '285' ],		#time : DateAndTime [ '2021-01-25T09:51:18.51363-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testLists,			#protocol : #testing,			#sourceCode : 'testLists\r\t| objects |\r\tobjects := Array with: #(1 2 3) with: #() with: #( \'foo\' \'bar\').\r\tself \r\t\tassert: (self writeRead: objects)\r\t\tequals: objects',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '285' ],		#self : OmReference [ '286' ],		#time : DateAndTime [ '2021-01-25T09:51:18.513791-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testMaps,			#protocol : #testing,			#sourceCode : 'testMaps\r\t| objects |\r\tobjects := Array \r\t\twith: Dictionary new\r\t\twith: (Dictionary with: \'x\' -> 1)\r\t\twith: (Dictionary newFromPairs: #( \'foo\' true \'bar\' false \'zero\' 0 \'null\' nil \'string\' \'Hello World!\' )).\r\tself \r\t\tassert: (self writeRead: objects)\r\t\tequals: objects',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '286' ],		#self : OmReference [ '287' ],		#time : DateAndTime [ '2021-01-25T09:51:18.51394-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testObject1,			#protocol : #testing,			#sourceCode : 'testObject1\r\t| json |\r\tjson := NeoJSONWriter toString: NeoJSONTestObject1 example1.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject1)\r\t\tequals: NeoJSONTestObject1 example1',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '287' ],		#self : OmReference [ '288' ],		#time : DateAndTime [ '2021-01-25T09:51:18.514102-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testObject2,			#protocol : #testing,			#sourceCode : 'testObject2\r\t| json |\r\tjson := NeoJSONWriter toString: NeoJSONTestObject2 example1.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject2)\r\t\tequals: NeoJSONTestObject2 example1',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '288' ],		#self : OmReference [ '289' ],		#time : DateAndTime [ '2021-01-25T09:51:18.514311-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testObject3,			#protocol : #testing,			#sourceCode : 'testObject3\r\t| json |\r\tjson := NeoJSONWriter toString: NeoJSONTestObject3 example1.\r\tself \r\t\tassert: (NeoJSONReader fromString: json as: NeoJSONTestObject3)\r\t\tequals: NeoJSONTestObject3 example1',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '289' ],		#self : OmReference [ '290' ],		#time : DateAndTime [ '2021-01-25T09:51:18.514554-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testSpecials,			#protocol : #testing,			#sourceCode : 'testSpecials\r\t| objects |\r\tobjects := Array with: true with: false with: nil.\r\tself \r\t\tassert: (self writeRead: objects)\r\t\tequals: objects',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '290' ],		#self : OmReference [ '291' ],		#time : DateAndTime [ '2021-01-25T09:51:18.514736-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #testStrings,			#protocol : #testing,			#sourceCode : 'testStrings\r\t| objects |\r\tobjects := OrderedCollection new\r\t\tadd: \'foo\'; add: \'Foo BAR\'; add: \'\'; add: \'\t\\\\\'\'\'; \r\t\tadd: \'élève en Français\';\r\t\tadd: (Character codePoint: 12354) asString; "HIRAGANA LETTER A" \r\t\tyourself;\r\t\tasArray.\r\tself \r\t\tassert: (self writeRead: objects)\r\t\tequals: objects',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '291' ],		#self : OmReference [ '292' ],		#time : DateAndTime [ '2021-01-25T09:51:18.514893-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriteReadTests,				#isMetaSide : false			},			#name : #'writeRead:',			#protocol : #private,			#sourceCode : 'writeRead: object\r\t| json |\r\tjson := String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream) nextPut: object ].\r\t^ (NeoJSONReader on: json readStream) next ',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '292' ],		#self : OmReference [ '293' ],		#time : DateAndTime [ '2021-01-25T09:51:18.515088-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testAsciiOnlyStrings,			#protocol : #testing,			#sourceCode : 'testAsciiOnlyStrings\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tasciiOnly: true;\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: \'élève français\') equals: \'"\\u00E9l\\u00E8ve fran\\u00E7ais"\'.\r\tself assert: (writer value: \'foo\') equals: \'"foo"\'.\r\tself assert: (writer value: \'Foo BAR\') equals: \'"Foo BAR"\'.\r\tself assert: (writer value: \'\') equals: \'""\'.\r\tself\r\t\tassert: (writer value: (String withAll: ( OrderedCollection new \r\t\t\tadd: $";\r\t\t\tadd: $\\; \r\t\t\tadd: $/;\r\t\t\tadd: Character tab;\r\t\t\tadd: Character cr;\r\t\t\tadd: Character lf;\r\t\t\tadd: Character newPage; \r\t\t\tadd: Character backspace;\r\t\t\tyourself )))\r\t\tequals: \'"\\"\\\\/\\t\\r\\n\\f\\b"\'\r\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '293' ],		#self : OmReference [ '294' ],		#time : DateAndTime [ '2021-01-25T09:51:18.515267-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testAssociation,			#protocol : #testing,			#sourceCode : 'testAssociation\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: Association do: [ :mapping |\r\t\t\t\t\tmapping mapAccessors: #(key value) ]; \r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: \'foo\' -> 42) equals: \'{"key":"foo","value":42}\'.\r\tself assert: (writer value: Association new) equals: \'{}\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '294' ],		#self : OmReference [ '295' ],		#time : DateAndTime [ '2021-01-25T09:51:18.515516-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testBooleans,			#protocol : #testing,			#sourceCode : 'testBooleans\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: true) equals: \'true\'.\r\tself assert: (writer value: false) equals: \'false\'.',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '295' ],		#self : OmReference [ '296' ],		#time : DateAndTime [ '2021-01-25T09:51:18.515762-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testByteArray,			#protocol : #testing,			#sourceCode : 'testByteArray\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: #[1 2 3]) equals: \'[1,2,3]\'.\r\tself assert: (writer value: #[]) equals: \'[]\'\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '296' ],		#self : OmReference [ '297' ],		#time : DateAndTime [ '2021-01-25T09:51:18.516022-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testDate,			#protocol : #testing,			#sourceCode : 'testDate\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: Date customDo: [ :mapping |\r\t\t\t\t\tmapping encoder: [ :date | date yyyymmdd ] ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: (Date fromString: \'2012-06-08\')) equals: \'"2012-06-08"\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '297' ],		#self : OmReference [ '298' ],		#time : DateAndTime [ '2021-01-25T09:51:18.516301-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testDateAndTime,			#protocol : #testing,			#sourceCode : 'testDateAndTime \r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: DateAndTime customDo: [ :mapping |\r\t\t\t\t\tmapping encoder: [ :dateAndTime | dateAndTime printString ] ];\r\t\t\t\tnextPut: object ] ].\r\tself \r\t\tassert: (writer value: (DateAndTime year: 2012 month: 2 day: 14 hour: 16 minute: 40 second: 18 offset: 1 hour)) \r\t\tequals: \'"2012-02-14T16:40:18+01:00"\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '298' ],		#self : OmReference [ '299' ],		#time : DateAndTime [ '2021-01-25T09:51:18.516565-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testFloats,			#protocol : #testing,			#sourceCode : 'testFloats\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: 123.0) equals: \'123.0\'.\r\tself assert: (writer value: -123.0) equals: \'-123.0\'.\r\tself assert: (writer value: 0.0) equals: \'0.0\'.',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '299' ],		#self : OmReference [ '300' ],		#time : DateAndTime [ '2021-01-25T09:51:18.516834-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testIntegers,			#protocol : #testing,			#sourceCode : 'testIntegers\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: 123) equals: \'123\'.\r\tself assert: (writer value: -123) equals: \'-123\'.\r\tself assert: (writer value: 0) equals: \'0\'.',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '300' ],		#self : OmReference [ '301' ],		#time : DateAndTime [ '2021-01-25T09:51:18.517075-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testLists,			#protocol : #testing,			#sourceCode : 'testLists\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: #(1 2 3)) equals: \'[1,2,3]\'.\r\tself assert: (writer value: #()) equals: \'[]\'.\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '301' ],		#self : OmReference [ '302' ],		#time : DateAndTime [ '2021-01-25T09:51:18.517331-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testListsExtra,			#protocol : #testing,			#sourceCode : 'testListsExtra\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\t#( OrderedCollection LinkedList ByteArray IntegerArray SortedCollection ) do: [ :each |\r\t\tSmalltalk at: each ifPresent: [ :collectionClass |\r\t\t\tself assert: (writer value: (collectionClass withAll: #(1 2 3))) equals: \'[1,2,3]\'.\r\t\t\tself assert: (writer value: collectionClass new) equals: \'[]\' ] ]\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '302' ],		#self : OmReference [ '303' ],		#time : DateAndTime [ '2021-01-25T09:51:18.517601-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testMapKeysMustBeStrings,			#protocol : #testing,			#sourceCode : 'testMapKeysMustBeStrings\r\tself should: [ NeoJSONWriter toString: { 1->#a } asDictionary ] raise: Error.\r\tself should: [ NeoJSONWriter toString: { true->#a } asDictionary ] raise: Error.\r\tself should: [ NeoJSONWriter toString: { nil->#a } asDictionary ] raise: Error.\r\tself should: [ NeoJSONWriter toString: { #()->#a } asDictionary ] raise: Error.\r\tself should: [ NeoJSONWriter toString: { Dictionary new->#a } asDictionary ] raise: Error.\r\tself should: [ NeoJSONWriter toString: { Float pi->#a } asDictionary ] raise: Error.',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '303' ],		#self : OmReference [ '304' ],		#time : DateAndTime [ '2021-01-25T09:51:18.517862-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testMaps,			#protocol : #testing,			#sourceCode : 'testMaps\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: ((writer value: (Dictionary newFromPairs: #( \'x\' 1 \'y\' 2))) includesSubstring: \'"x":1\').\r\tself assert: ((writer value: (Dictionary newFromPairs: #( \'x\' 1 \'y\' 2))) includesSubstring: \'"y":2\').\r\tself assert: (writer value: Dictionary new) equals: \'{}\'.\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '304' ],		#self : OmReference [ '305' ],		#time : DateAndTime [ '2021-01-25T09:51:18.518048-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testMapsExtra,			#protocol : #testing,			#sourceCode : 'testMapsExtra\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: (IdentityDictionary newFromPairs: #( \'x\' 1))) equals: \'{"x":1}\'.\r\tself assert: (writer value: IdentityDictionary new) equals: \'{}\'.\r\t#( SmallDictionary OrderedDictionary OrderedIdentityDictionary ) do: [ :each |\r\t\t| dictionaryClass |\r\t\tdictionaryClass := Smalltalk at: each ifAbsent: [ nil ].\r\t\tdictionaryClass ifNotNil: [\t\r\t\t\tself assert: (writer value: (dictionaryClass new at: \'x\' put: 1; at: \'y\' put: 2; yourself)) equals: \'{"x":1,"y":2}\'.\r\t\t\tself assert: (writer value: dictionaryClass new) equals: \'{}\'] ]\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '305' ],		#self : OmReference [ '306' ],		#time : DateAndTime [ '2021-01-25T09:51:18.518213-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testNextPutStringAsHex,			#protocol : #testing,			#sourceCode : 'testNextPutStringAsHex\r\t| output |\r\toutput := String\r\t\tstreamContents: [ :out | \r\t\t\t(NeoJSONWriter on: out)\r\t\t\t\tfor: #StringAsHex\r\t\t\t\t\tcustomDo: [ :mapping | \r\t\t\t\t\t\t\tmapping\r\t\t\t\t\t\t\t\tencoder: [ :x | x asByteArray hex asUppercase ];\r\t\t\t\t\t\t\t\tdecoder: [ :x | (ByteArray readHexFrom: x) asString ] ];\r\t\t\t\tnextPut: \'Foo bar!\' as: #StringAsHex ].\r\tself assert: output equals: \'"466F6F2062617221"\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '306' ],		#self : OmReference [ '307' ],		#time : DateAndTime [ '2021-01-25T09:51:18.518372-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testNonBMPCharacterEncoding,			#protocol : #testing,			#sourceCode : 'testNonBMPCharacterEncoding\r\t"Characters not in the Basic Multilingual Plane are encoded as a UTF-16 surrogate pair"\r\r\t| string json |\r\tstring := 16r1D11E asCharacter asString. "MUSICAL SYMBOL G CLEF"\r\tjson := String streamContents: [ :out |\r\t\t(NeoJSONWriter on: out) asciiOnly: true; nextPut: string ].\r\tself assert: json equals: \'"\\uD834\\uDD1E"\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '307' ],		#self : OmReference [ '308' ],		#time : DateAndTime [ '2021-01-25T09:51:18.518521-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testNull,			#protocol : #testing,			#sourceCode : 'testNull\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: nil) equals: \'null\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '308' ],		#self : OmReference [ '309' ],		#time : DateAndTime [ '2021-01-25T09:51:18.518688-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPoint,			#protocol : #testing,			#sourceCode : 'testPoint\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself should: [ writer value: 1@2 ] raise: NeoJSONMappingNotFound',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '309' ],		#self : OmReference [ '310' ],		#time : DateAndTime [ '2021-01-25T09:51:18.51885-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPoint1,			#protocol : #testing,			#sourceCode : 'testPoint1\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: Point do: [ :mapping |\r\t\t\t\t\tmapping mapProperty: \'x\' getter: [ :point | point x ] setter: [ :point :value | point x: value ].\r\t\t\t\t\tmapping mapProperty: \'y\' getter: [ :point | point y ] setter: [ :point :value | point y: value ]. ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: 1@2) equals: \'{"x":1,"y":2}\'.\r\tself assert: (writer value: Point new) equals: \'{}\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '310' ],		#self : OmReference [ '311' ],		#time : DateAndTime [ '2021-01-25T09:51:18.51901-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPoint2,			#protocol : #testing,			#sourceCode : 'testPoint2\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tmapAllInstVarsFor: Point;\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: 1@2) equals: \'{"x":1,"y":2}\'.\r\tself assert: (writer value: Point new) equals: \'{}\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '311' ],		#self : OmReference [ '312' ],		#time : DateAndTime [ '2021-01-25T09:51:18.519207-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPoint3,			#protocol : #testing,			#sourceCode : 'testPoint3\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: Point do: [ :mapping |\r\t\t\t\t\tmapping mapInstVars: #(x y) ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: 1@2) equals: \'{"x":1,"y":2}\'.\r\tself assert: (writer value: Point new) equals: \'{}\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '312' ],		#self : OmReference [ '313' ],		#time : DateAndTime [ '2021-01-25T09:51:18.519444-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPointUsingAsString,			#protocol : #testing,			#sourceCode : 'testPointUsingAsString\r\t| output |\r\toutput := String\r\t\tstreamContents: [ :out | \r\t\t\t(NeoJSONWriter on: out)\r\t\t\t\tfor: Point\r\t\t\t\t\tdo: [ :mapping | \r\t\t\t\t\t\t\t(mapping \r\t\t\t\t\t\t\t\tmapProperty: #x \r\t\t\t\t\t\t\t\tgetter: [ :object | object x ] \r\t\t\t\t\t\t\t\tsetter: [ :object :value | object setX: value setY: object y ])\r\t\t\t\t\t\t\t\tvalueSchema: #AsString.\r\t\t\t\t\t\t\t(mapping\r\t\t\t\t\t\t\t\tmapProperty: #y\r\t\t\t\t\t\t\t\tgetter: [ :object | object y ]\r\t\t\t\t\t\t\t\tsetter: [ :object :value | object setX: object x setY: value ]) \r\t\t\t\t\t\t\t\tvalueSchema: #AsString ];\r\t\t\t\tfor: #AsString\r\t\t\t\t\tcustomDo: [ :mapping | \r\t\t\t\t\t\t\tmapping\r\t\t\t\t\t\t\t\tencoder: [ :x | x asString ];\r\t\t\t\t\t\t\t\tdecoder: [ :x | x asNumber ] ];\r\t\t\t\tnextPut: 1 @ 2 ].\r\tself assert: output equals: \'{"x":"1","y":"2"}\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '313' ],		#self : OmReference [ '314' ],		#time : DateAndTime [ '2021-01-25T09:51:18.519725-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPointWriteNil,			#protocol : #testing,			#sourceCode : 'testPointWriteNil\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\twriteNil: true;\r\t\t\t\tmapAllInstVarsFor: Point;\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: 1@2) equals: \'{"x":1,"y":2}\'.\r\tself assert: (writer value: Point new) equals: \'{"x":null,"y":null}\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '314' ],		#self : OmReference [ '315' ],		#time : DateAndTime [ '2021-01-25T09:51:18.519959-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testPreservePropertyOrder,			#protocol : #testing,			#sourceCode : 'testPreservePropertyOrder\r\t| writer testObject |\r\t(testObject := NeoJSONTestObject2 new)\r\t\tid: 123;\r\t\twidth: 100;\r\t\theight: 50;\r\t\tdata: \'test\'.\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: NeoJSONTestObject2 do: [ :mapping | mapping mapInstVars: #(id width height data) ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: testObject) equals: \'{"id":123,"width":100,"height":50,"data":"test"}\'.\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: NeoJSONTestObject2 do: [ :mapping | mapping mapInstVars: #(width height data id) ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: testObject) equals: \'{"width":100,"height":50,"data":"test","id":123}\'.\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: NeoJSONTestObject2 do: [ :mapping | mapping mapInstVars: #(data id height width) ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: (writer value: testObject) equals: \'{"data":"test","id":123,"height":50,"width":100}\'.\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '315' ],		#self : OmReference [ '316' ],		#time : DateAndTime [ '2021-01-25T09:51:18.520166-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testStrings,			#protocol : #testing,			#sourceCode : 'testStrings\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: \'foo\') equals: \'"foo"\'.\r\tself assert: (writer value: \'Foo BAR\') equals: \'"Foo BAR"\'.\r\tself assert: (writer value: \'\') equals: \'""\'.\r\tself\r\t\tassert: (writer value: (String withAll: ( OrderedCollection new \r\t\t\tadd: $";\r\t\t\tadd: $\\; \r\t\t\tadd: $/;\r\t\t\tadd: Character tab;\r\t\t\tadd: Character cr;\r\t\t\tadd: Character lf;\r\t\t\tadd: Character newPage; \r\t\t\tadd: Character backspace;\r\t\t\tyourself )))\r\t\tequals: \'"\\"\\\\/\\t\\r\\n\\f\\b"\'\r\r\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '316' ],		#self : OmReference [ '317' ],		#time : DateAndTime [ '2021-01-25T09:51:18.520433-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testSymbol,			#protocol : #testing,			#sourceCode : 'testSymbol\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) nextPut: object ] ].\r\tself assert: (writer value: #foo) equals: \'"foo"\'.\r\tself assert: (writer value: #\'FOO-1\') equals: \'"FOO-1"\'\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '317' ],		#self : OmReference [ '318' ],		#time : DateAndTime [ '2021-01-25T09:51:18.52066-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONWriterTests,				#isMetaSide : false			},			#name : #testTime,			#protocol : #testing,			#sourceCode : 'testTime\r\t| writer |\r\twriter := [ :object | \r\t\tString streamContents: [ :stream |\r\t\t\t(NeoJSONWriter on: stream) \r\t\t\t\tfor: Time customDo: [ :mapping |\r\t\t\t\t\tmapping encoder: [ :time | time printString ] ];\r\t\t\t\tnextPut: object ] ].\r\tself assert: ((writer value: (Time fromSeconds: 52208)) includesSubstring: \'2:30:08\')',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '318' ],		#self : OmReference [ '319' ],		#time : DateAndTime [ '2021-01-25T09:51:18.520918-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmark,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tsuper initialize.\r\tobjects := Array new: 1000.\r\t1 to: 1000 do: [ :each |\r\t\t| map |\r\t\t(map := Dictionary new)\r\t\t\tat: \'id\' put: each;\r\t\t\tat: \'name\' put: \'Name-\', each asString;\r\t\t\tat: \'enabled\' put: (#( true false) at: (each \\\\ 2) + 1);\r\t\t\tat: \'color\' put: (#( \'red\' \'green\' \'blue\' ) at: (each \\\\ 3) + 1);\r\t\t\tat: \'value\' put: each + each / 1000.0.\r\t\tobjects at: each put: map ].\r\tjson := String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream) nextPut: objects ]\r\t\t',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '319' ],		#self : OmReference [ '320' ],		#time : DateAndTime [ '2021-01-25T09:51:18.521169-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmark,				#isMetaSide : false			},			#name : #read,			#protocol : #public,			#sourceCode : 'read\r\t^ (NeoJSONReader on: json readStream) next\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '320' ],		#self : OmReference [ '321' ],		#time : DateAndTime [ '2021-01-25T09:51:18.521325-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmark,				#isMetaSide : false			},			#name : #write,			#protocol : #public,			#sourceCode : 'write\r\t^ String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream) nextPut: objects ]\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '321' ],		#self : OmReference [ '322' ],		#time : DateAndTime [ '2021-01-25T09:51:18.521478-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONBenchmark,				#isMetaSide : false			},			#name : #writePrettyPrintedRead,			#protocol : #public,			#sourceCode : 'writePrettyPrintedRead\r\t| output |\r\toutput := String streamContents: [ :stream |\r\t\t(NeoJSONWriter on: stream) \r\t\t\tprettyPrint: true;\r\t\t\tnextPut: objects ].\r\t^ (NeoJSONReader on: output readStream) \r\t\tnext',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '322' ],		#self : OmReference [ '323' ],		#time : DateAndTime [ '2021-01-25T09:51:18.521658-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONMockStream class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: stream\r\t^ self new\r\t\tstream: stream;\r\t\tyourself',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '323' ],		#self : OmReference [ '324' ],		#time : DateAndTime [ '2021-01-25T09:51:18.521826-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\t^ stream atEnd',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '324' ],		#self : OmReference [ '325' ],		#time : DateAndTime [ '2021-01-25T09:51:18.521971-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #close,			#protocol : #accessing,			#sourceCode : 'close\r\t^ stream close',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '325' ],		#self : OmReference [ '326' ],		#time : DateAndTime [ '2021-01-25T09:51:18.522109-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #next,			#protocol : #accessing,			#sourceCode : 'next\r\t^ stream next',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '326' ],		#self : OmReference [ '327' ],		#time : DateAndTime [ '2021-01-25T09:51:18.522249-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #'nextPut:',			#protocol : #accessing,			#sourceCode : 'nextPut: character\r\t^ stream nextPut: character',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '327' ],		#self : OmReference [ '328' ],		#time : DateAndTime [ '2021-01-25T09:51:18.522389-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #'nextPutAll:',			#protocol : #accessing,			#sourceCode : 'nextPutAll: string\r\t^ stream nextPutAll: string',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '328' ],		#self : OmReference [ '329' ],		#time : DateAndTime [ '2021-01-25T09:51:18.522525-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #peek,			#protocol : #accessing,			#sourceCode : 'peek\r\t^ stream peek',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '329' ],		#self : OmReference [ '330' ],		#time : DateAndTime [ '2021-01-25T09:51:18.522661-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #'peekFor:',			#protocol : #accessing,			#sourceCode : 'peekFor: char\r\t^ stream peekFor: char',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '330' ],		#self : OmReference [ '331' ],		#time : DateAndTime [ '2021-01-25T09:51:18.52287-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #space,			#protocol : #accessing,			#sourceCode : 'space\r\t^ stream space',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '331' ],		#self : OmReference [ '332' ],		#time : DateAndTime [ '2021-01-25T09:51:18.523013-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONMockStream,				#isMetaSide : false			},			#name : #'stream:',			#protocol : #initialize-release,			#sourceCode : 'stream: anObject\r\tstream := anObject',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '332' ],		#self : OmReference [ '333' ],		#time : DateAndTime [ '2021-01-25T09:51:18.52319-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject1 class',				#isMetaSide : true			},			#name : #example1,			#protocol : #'instance creation',			#sourceCode : 'example1\r\t^ self new\r\t\tid: 123;\r\t\tname: \'Example1\';\r\t\ttimestamp: (DateAndTime year: 2012 month: 06 day: 08 hour: 14 minute: 30 second: 15 offset: 1 hour);\r\t\tpoints: (Array with: 1@2 with: 3@4);\r\t\tbytes: #[ 2 4 6 8 ];\r\t\tyourself',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '333' ],		#self : OmReference [ '334' ],		#time : DateAndTime [ '2021-01-25T09:51:18.523399-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject1 class',				#isMetaSide : true			},			#name : #'neoJsonMapping:',			#protocol : #accessing,			#sourceCode : 'neoJsonMapping: mapper\r\tmapper for: self do: [ :mapping |\r\t\tmapping mapInstVars: #(id name).\r\t\t(mapping mapInstVar: #timestamp to: \'created-at\') valueSchema: DateAndTime.\r\t\t(mapping mapInstVar: #points) valueSchema: #ArrayOfPoints.\r\t\t(mapping mapInstVar: #bytes) valueSchema: ByteArray ].\r\tmapper for: DateAndTime customDo: [ :mapping |\r\t\tmapping decoder: [ :string | DateAndTime fromString: string ].\r\t\tmapping encoder: [ :dateAndTime | dateAndTime printString ] ].\r\tmapper for: #ArrayOfPoints customDo: [ :mapping |\r\t\tmapping listOfElementSchema: Point ].  \r\tmapper mapAllInstVarsFor: Point.\r\tmapper for: ByteArray customDo: [ :mapping |\r\t\tmapping listOfType: ByteArray ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '334' ],		#self : OmReference [ '335' ],		#time : DateAndTime [ '2021-01-25T09:51:18.524425-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\tself == anObject\r\t\tifTrue: [ ^ true ].\r\tself class = anObject class\r\t\tifFalse: [ ^ false ].\r\t^ id = anObject id\r\t\tand: [\r\t\t\tname = anObject name\r\t\t\t\tand: [\r\t\t\t\t\ttimestamp = anObject timestamp\r\t\t\t\t\t\tand: [\r\t\t\t\t\t\t\tpoints = anObject points\r\t\t\t\t\t\t\t\tand: [ bytes = anObject bytes ] ] ] ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '335' ],		#self : OmReference [ '336' ],		#time : DateAndTime [ '2021-01-25T09:51:18.524642-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #bytes,			#protocol : #accessing,			#sourceCode : 'bytes\r\t^ bytes',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '336' ],		#self : OmReference [ '337' ],		#time : DateAndTime [ '2021-01-25T09:51:18.524789-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #'bytes:',			#protocol : #accessing,			#sourceCode : 'bytes: byteArray\r\tbytes := byteArray',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '337' ],		#self : OmReference [ '338' ],		#time : DateAndTime [ '2021-01-25T09:51:18.524927-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ id hash bitXor: (name hash bitXor: (timestamp hash bitXor: (points hash bitXor: bytes hash)))',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '338' ],		#self : OmReference [ '339' ],		#time : DateAndTime [ '2021-01-25T09:51:18.525143-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #id,			#protocol : #accessing,			#sourceCode : 'id\r\t^ id',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '339' ],		#self : OmReference [ '340' ],		#time : DateAndTime [ '2021-01-25T09:51:18.525285-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #'id:',			#protocol : #accessing,			#sourceCode : 'id: integer\r\tid := integer',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '340' ],		#self : OmReference [ '341' ],		#time : DateAndTime [ '2021-01-25T09:51:18.52542-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t^ name',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '341' ],		#self : OmReference [ '342' ],		#time : DateAndTime [ '2021-01-25T09:51:18.525551-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #'name:',			#protocol : #accessing,			#sourceCode : 'name: string\r\tname := string',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '342' ],		#self : OmReference [ '343' ],		#time : DateAndTime [ '2021-01-25T09:51:18.525681-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #points,			#protocol : #accessing,			#sourceCode : 'points\r\t^ points',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '343' ],		#self : OmReference [ '344' ],		#time : DateAndTime [ '2021-01-25T09:51:18.525817-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #'points:',			#protocol : #accessing,			#sourceCode : 'points: arrayOfPoints\r\tpoints := arrayOfPoints ',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '344' ],		#self : OmReference [ '345' ],		#time : DateAndTime [ '2021-01-25T09:51:18.525947-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #timestamp,			#protocol : #accessing,			#sourceCode : 'timestamp\r\t^ timestamp',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '345' ],		#self : OmReference [ '346' ],		#time : DateAndTime [ '2021-01-25T09:51:18.52608-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject1,				#isMetaSide : false			},			#name : #'timestamp:',			#protocol : #accessing,			#sourceCode : 'timestamp: dateAndTime \r\ttimestamp := dateAndTime ',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '346' ],		#self : OmReference [ '347' ],		#time : DateAndTime [ '2021-01-25T09:51:18.526236-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #benchmark10k,			#protocol : #testing,			#sourceCode : 'benchmark10k\r\t"self benchmark10k"\r\t\r\tself benchmark: 10000',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '347' ],		#self : OmReference [ '348' ],		#time : DateAndTime [ '2021-01-25T09:51:18.526392-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #benchmark10kAsDictionary,			#protocol : #testing,			#sourceCode : 'benchmark10kAsDictionary\r\t"self benchmark10kAsDictionary"\r\t\r\tself benchmarkAsDictionary: 10000',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '348' ],		#self : OmReference [ '349' ],		#time : DateAndTime [ '2021-01-25T09:51:18.52654-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #benchmark200k,			#protocol : #testing,			#sourceCode : 'benchmark200k\r\t"self benchmark200k"\r\t\r\tself benchmark: 200000',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '349' ],		#self : OmReference [ '350' ],		#time : DateAndTime [ '2021-01-25T09:51:18.526814-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #'benchmark:',			#protocol : #testing,			#sourceCode : 'benchmark: count\r\t"self benchmark: 1000"\r\t\r\t| collection json size |\r\tcollection := Array new: count withAll: self example1.\r\tsize := 2 + (count * (NeoJSONWriter toString: self example1) size) + count - 1.\r\tTranscript \r\t\tcr;\r\t\t<< (\'Serializing {1} objects took ms \' format: (Array with: count) );\r\t\tshow: [ json := String new: size streamContents: [ :stream |\r\t\t\t\t\t\t\t\t(NeoJSONWriter on: stream) nextPut: collection ] ] timeToRun.\r\tTranscript \r\t\tcr;\r\t\t<< (\'Deserializing {1} objects took ms \' format: (Array with: count) );\r\t\tshow: [ NeoJSONReader fromString: json ] timeToRun.',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '350' ],		#self : OmReference [ '351' ],		#time : DateAndTime [ '2021-01-25T09:51:18.526992-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #'benchmarkAsDictionary:',			#protocol : #testing,			#sourceCode : 'benchmarkAsDictionary: count\r\t"self benchmarkAsDictionary: 1000"\r\t\r\t| collection json size |\r\tcollection := Array new: count withAll: self example1 asDictionary.\r\tsize := 2 + (count * (NeoJSONWriter toString: self example1 asDictionary) size) + count - 1.\r\tTranscript \r\t\tcr;\r\t\t<< (\'Serializing {1} objects took ms \' format: (Array with: count) );\r\t\tshow: [ json := String new: size streamContents: [ :stream |\r\t\t\t\t\t\t\t\t(NeoJSONWriter on: stream) nextPut: collection ] ] timeToRun.\r\tTranscript \r\t\tcr;\r\t\t<< (\'Deserializing {1} objects took ms \' format: (Array with: count) );\r\t\tshow: [ NeoJSONReader fromString: json ] timeToRun.',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '351' ],		#self : OmReference [ '352' ],		#time : DateAndTime [ '2021-01-25T09:51:18.52714-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #example1,			#protocol : #'instance creation',			#sourceCode : 'example1\r\t^ self new\r\t\tid: 13;\r\t\twidth: 250;\r\t\theight: 110;\r\t\tdata: (String new: 512 withAll: $a);\r\t\tyourself',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '352' ],		#self : OmReference [ '353' ],		#time : DateAndTime [ '2021-01-25T09:51:18.527293-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject2 class',				#isMetaSide : true			},			#name : #'neoJsonMapping:',			#protocol : #accessing,			#sourceCode : 'neoJsonMapping: mapper\r\t"For inheritance mapping to work, the schema/classname must be self,\r\tbut the instance variables have to be enumerated manually per class"\r\r\tmapper for: self do: [ :mapping |\r\t\tmapping mapInstVars: #(id width height data) ] ',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '353' ],		#self : OmReference [ '354' ],		#time : DateAndTime [ '2021-01-25T09:51:18.52749-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\tself == anObject\r\t\tifTrue: [ ^ true ].\r\tself class = anObject class\r\t\tifFalse: [ ^ false ].\r\t^ id = anObject id\r\t\tand: [\r\t\t\theight = anObject height\r\t\t\t\tand: [\r\t\t\t\t\twidth = anObject width\r\t\t\t\t\t\tand: [\r\t\t\t\t\t\t\tdata = anObject data ] ] ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '354' ],		#self : OmReference [ '355' ],		#time : DateAndTime [ '2021-01-25T09:51:18.527661-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #asDictionary,			#protocol : #converting,			#sourceCode : 'asDictionary\r\t^ Dictionary new\r\t\tat: #id put: id;\r\t\tat: #height put: height;\r\t\tat: #width put: width;\r\t\tat: #data put: data;\r\t\tyourself',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '355' ],		#self : OmReference [ '356' ],		#time : DateAndTime [ '2021-01-25T09:51:18.527803-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #data,			#protocol : #accessing,			#sourceCode : 'data\r\t^ data',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '356' ],		#self : OmReference [ '357' ],		#time : DateAndTime [ '2021-01-25T09:51:18.527941-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #'data:',			#protocol : #accessing,			#sourceCode : 'data: anObject\r\tdata := anObject',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '357' ],		#self : OmReference [ '358' ],		#time : DateAndTime [ '2021-01-25T09:51:18.528081-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ id hash bitXor: (width hash bitXor: (height hash bitXor: data hash))',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '358' ],		#self : OmReference [ '359' ],		#time : DateAndTime [ '2021-01-25T09:51:18.528232-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #height,			#protocol : #accessing,			#sourceCode : 'height\r\t^ height',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '359' ],		#self : OmReference [ '360' ],		#time : DateAndTime [ '2021-01-25T09:51:18.528369-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #'height:',			#protocol : #accessing,			#sourceCode : 'height: anObject\r\theight := anObject',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '360' ],		#self : OmReference [ '361' ],		#time : DateAndTime [ '2021-01-25T09:51:18.528578-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #id,			#protocol : #accessing,			#sourceCode : 'id\r\t^ id',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '361' ],		#self : OmReference [ '362' ],		#time : DateAndTime [ '2021-01-25T09:51:18.528727-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #'id:',			#protocol : #accessing,			#sourceCode : 'id: anObject\r\tid := anObject',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '362' ],		#self : OmReference [ '363' ],		#time : DateAndTime [ '2021-01-25T09:51:18.528869-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #width,			#protocol : #accessing,			#sourceCode : 'width\r\t^ width',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '363' ],		#self : OmReference [ '364' ],		#time : DateAndTime [ '2021-01-25T09:51:18.529016-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject2,				#isMetaSide : false			},			#name : #'width:',			#protocol : #accessing,			#sourceCode : 'width: anObject\r\twidth := anObject',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '364' ],		#self : OmReference [ '365' ],		#time : DateAndTime [ '2021-01-25T09:51:18.529169-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject3 class',				#isMetaSide : true			},			#name : #example1,			#protocol : #'instance creation',			#sourceCode : 'example1\r\t^ super example1\r\t\tdata: (String new: 8 withAll: $a);\r\t\tcolor: \'red\';\r\t\ttransparent: true;\r\t\tyourself',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '365' ],		#self : OmReference [ '366' ],		#time : DateAndTime [ '2021-01-25T09:51:18.529325-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'NeoJSONTestObject3 class',				#isMetaSide : true			},			#name : #'neoJsonMapping:',			#protocol : #accessing,			#sourceCode : 'neoJsonMapping: mapper\r\t"For inheritance mapping to work, the schema/classname must be self,\r\tbut the instance variables have to be enumerated manually per class"\r\t\r\tsuper neoJsonMapping: mapper.\r\tmapper for: self do: [ :mapping |\r\t\tmapping mapInstVars: #(color transparent) ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '366' ],		#self : OmReference [ '367' ],		#time : DateAndTime [ '2021-01-25T09:51:18.529478-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject3,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\t^ super = anObject \r\t\tand: [ color = anObject color\r\t\t\tand: [ transparent = anObject transparent ] ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '367' ],		#self : OmReference [ '368' ],		#time : DateAndTime [ '2021-01-25T09:51:18.529625-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject3,				#isMetaSide : false			},			#name : #asDictionary,			#protocol : #converting,			#sourceCode : 'asDictionary\r\t^ super asDictionary\r\t\tat: #color put: color;\r\t\tat: #transparent put: transparent;\r\t\tyourself',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '368' ],		#self : OmReference [ '369' ],		#time : DateAndTime [ '2021-01-25T09:51:18.530102-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject3,				#isMetaSide : false			},			#name : #color,			#protocol : #accessing,			#sourceCode : 'color\r\t^ color',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '369' ],		#self : OmReference [ '370' ],		#time : DateAndTime [ '2021-01-25T09:51:18.530323-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject3,				#isMetaSide : false			},			#name : #'color:',			#protocol : #accessing,			#sourceCode : 'color: anObject\r\tcolor := anObject',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '370' ],		#self : OmReference [ '371' ],		#time : DateAndTime [ '2021-01-25T09:51:18.530524-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject3,				#isMetaSide : false			},			#name : #transparent,			#protocol : #accessing,			#sourceCode : 'transparent\r\t^ transparent',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '371' ],		#self : OmReference [ '372' ],		#time : DateAndTime [ '2021-01-25T09:51:18.530687-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONTestObject3,				#isMetaSide : false			},			#name : #'transparent:',			#protocol : #accessing,			#sourceCode : 'transparent: anObject\r\ttransparent := anObject',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '372' ],		#self : OmReference [ '373' ],		#time : DateAndTime [ '2021-01-25T09:51:18.530971-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #closeLog,			#protocol : #private,			#sourceCode : 'closeLog\r\tlogStream ifNotNil: [ \r\t\tlogStream close.\r\t\tlogStream := nil ].\r\t^ self logFile exists\r\t\tifTrue: [ self logFile contents ] \r\t\tifFalse: [ \'log file is empty\' ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '373' ],		#self : OmReference [ '374' ],		#time : DateAndTime [ '2021-01-25T09:51:18.531128-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #ensureLog,			#protocol : #private,			#sourceCode : 'ensureLog\r\tlogStream ifNil: [ \r\t\tlogStream := self logFile ensureDelete; writeStream. \r\t\tlogStream setToEnd ]\r\t',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '374' ],		#self : OmReference [ '375' ],		#time : DateAndTime [ '2021-01-25T09:51:18.531289-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #gitDirectory,			#protocol : #accessing,			#sourceCode : 'gitDirectory\r\t^ gitDirectory ifNil: [ gitDirectory := FileLocator home / #Develop / #git ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '375' ],		#self : OmReference [ '376' ],		#time : DateAndTime [ '2021-01-25T09:51:18.531431-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #'gitDirectory:',			#protocol : #accessing,			#sourceCode : 'gitDirectory: fileReference\r\tgitDirectory := fileReference',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '376' ],		#self : OmReference [ '377' ],		#time : DateAndTime [ '2021-01-25T09:51:18.531572-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #jsonTestSuiteDirectory,			#protocol : #accessing,			#sourceCode : 'jsonTestSuiteDirectory\r\t^ self gitDirectory / #JSONTestSuite',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '377' ],		#self : OmReference [ '378' ],		#time : DateAndTime [ '2021-01-25T09:51:18.531715-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #jsonTestSuiteTestParsingDirectory,			#protocol : #accessing,			#sourceCode : 'jsonTestSuiteTestParsingDirectory\r\t^ self jsonTestSuiteDirectory / \'test_parsing\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '378' ],		#self : OmReference [ '379' ],		#time : DateAndTime [ '2021-01-25T09:51:18.531898-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #jsonTestSuiteTestParsingFailFiles,			#protocol : #accessing,			#sourceCode : 'jsonTestSuiteTestParsingFailFiles\r\t^ self jsonTestSuiteTestParsingDirectory childrenMatching: \'n_*.json\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '379' ],		#self : OmReference [ '380' ],		#time : DateAndTime [ '2021-01-25T09:51:18.532118-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #jsonTestSuiteTestParsingInfoFiles,			#protocol : #accessing,			#sourceCode : 'jsonTestSuiteTestParsingInfoFiles\r\t^ self jsonTestSuiteTestParsingDirectory childrenMatching: \'i_*.json\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '380' ],		#self : OmReference [ '381' ],		#time : DateAndTime [ '2021-01-25T09:51:18.532379-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #jsonTestSuiteTestParsingPassFiles,			#protocol : #accessing,			#sourceCode : 'jsonTestSuiteTestParsingPassFiles\r\t^ self jsonTestSuiteTestParsingDirectory childrenMatching: \'y_*.json\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '381' ],		#self : OmReference [ '382' ],		#time : DateAndTime [ '2021-01-25T09:51:18.532633-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #jsonTestSuiteTestTransformDirectory,			#protocol : #accessing,			#sourceCode : 'jsonTestSuiteTestTransformDirectory\r\t^ self jsonTestSuiteDirectory / \'test_transform\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '382' ],		#self : OmReference [ '383' ],		#time : DateAndTime [ '2021-01-25T09:51:18.532949-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #'log:',			#protocol : #private,			#sourceCode : 'log: message\r\tself ensureLog.\r\tlogStream nextPutAll: message; lf; flush\r',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '383' ],		#self : OmReference [ '384' ],		#time : DateAndTime [ '2021-01-25T09:51:18.533261-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #logFile,			#protocol : #private,			#sourceCode : 'logFile\r\t^ \'neo-json-validation.log\' asFileReference',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '384' ],		#self : OmReference [ '385' ],		#time : DateAndTime [ '2021-01-25T09:51:18.533418-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkDataDirectory,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkDataDirectory\r\t^ self nativeJsonBenchmarkDirectory / #data',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '385' ],		#self : OmReference [ '386' ],		#time : DateAndTime [ '2021-01-25T09:51:18.533563-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkDirectory,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkDirectory\r\t^ self gitDirectory / \'nativejson-benchmark\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '386' ],		#self : OmReference [ '387' ],		#time : DateAndTime [ '2021-01-25T09:51:18.533701-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkJsonCheckerDirectory,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkJsonCheckerDirectory\r\t^ self nativeJsonBenchmarkDataDirectory / #jsonchecker',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '387' ],		#self : OmReference [ '388' ],		#time : DateAndTime [ '2021-01-25T09:51:18.533846-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkJsonCheckerFailFiles,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkJsonCheckerFailFiles\r\t^ self nativeJsonBenchmarkJsonCheckerDirectory childrenMatching: \'fail*.json\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '388' ],		#self : OmReference [ '389' ],		#time : DateAndTime [ '2021-01-25T09:51:18.533985-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkJsonCheckerPassFiles,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkJsonCheckerPassFiles\r\t^ self nativeJsonBenchmarkJsonCheckerDirectory childrenMatching: \'pass*.json\'',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '389' ],		#self : OmReference [ '390' ],		#time : DateAndTime [ '2021-01-25T09:51:18.534131-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkRoundTripDirectory,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkRoundTripDirectory\r\t^ self nativeJsonBenchmarkDataDirectory / #roundtrip',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '390' ],		#self : OmReference [ '391' ],		#time : DateAndTime [ '2021-01-25T09:51:18.534277-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #nativeJsonBenchmarkRoundTripFiles,			#protocol : #accessing,			#sourceCode : 'nativeJsonBenchmarkRoundTripFiles\r\t^ self nativeJsonBenchmarkRoundTripDirectory children',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '391' ],		#self : OmReference [ '392' ],		#time : DateAndTime [ '2021-01-25T09:51:18.534428-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #runJsonTestSuiteTestParsingFailures,			#protocol : #running,			#sourceCode : 'runJsonTestSuiteTestParsingFailures\r\t^ self\r\t\tvalidateFiles: self jsonTestSuiteTestParsingFailFiles \r\t\tusingTest: [ :file | \r\t\t\t| data success |\r\t\t\tsuccess := false.\r\t\t\t[ data := file readStreamDo: [ :in | (NeoJSONReader on: in) next; failIfNotAtEnd ] ]\r\t\t\t\ton: NeoJSONParseError\r\t\t\t\tdo: [ :exception | self log: exception printString. success := true ].\r\t\t\tsuccess ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '392' ],		#self : OmReference [ '393' ],		#time : DateAndTime [ '2021-01-25T09:51:18.534573-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #runJsonTestSuiteTestParsingInfo,			#protocol : #running,			#sourceCode : 'runJsonTestSuiteTestParsingInfo\r\t^ self\r\t\tvalidateFiles: self jsonTestSuiteTestParsingInfoFiles \r\t\tusingTest: [ :file | \r\t\t\t| data success |\r\t\t\tsuccess := true.\r\t\t\t[ data := file readStreamDo: [ :in | (NeoJSONReader on: in) next ] ]\r\t\t\t\ton: NeoJSONParseError\r\t\t\t\tdo: [ :exception | self log: exception printString. success := false ].\r\t\t\tsuccess ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '393' ],		#self : OmReference [ '394' ],		#time : DateAndTime [ '2021-01-25T09:51:18.534721-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #runJsonTestSuiteTestParsingPasses,			#protocol : #running,			#sourceCode : 'runJsonTestSuiteTestParsingPasses\r\t^ self\r\t\tvalidateFiles: self jsonTestSuiteTestParsingPassFiles \r\t\tusingTest: [ :file | \r\t\t\t| data success |\r\t\t\tsuccess := true.\r\t\t\t[ data := file readStreamDo: [ :in | (NeoJSONReader on: in) next ] ]\r\t\t\t\ton: NeoJSONParseError\r\t\t\t\tdo: [ :exception | self log: exception printString. success := false ].\r\t\t\tsuccess ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '394' ],		#self : OmReference [ '395' ],		#time : DateAndTime [ '2021-01-25T09:51:18.534869-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #runNativeJsonBenchmarkJsonCheckerFailures,			#protocol : #running,			#sourceCode : 'runNativeJsonBenchmarkJsonCheckerFailures\r\t^ self\r\t\tvalidateFiles: self nativeJsonBenchmarkJsonCheckerFailFiles\r\t\tusingTest: [ :file | \r\t\t\t| data success |\r\t\t\tsuccess := false.\r\t\t\t[ data := file readStreamDo: [ :in | (NeoJSONReader on: in) next; failIfNotAtEnd ] ]\r\t\t\t\ton: NeoJSONParseError\r\t\t\t\tdo: [ :exception | self log: exception printString. success := true ].\r\t\t\tsuccess ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '395' ],		#self : OmReference [ '396' ],		#time : DateAndTime [ '2021-01-25T09:51:18.535107-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #runNativeJsonBenchmarkJsonCheckerPasses,			#protocol : #running,			#sourceCode : 'runNativeJsonBenchmarkJsonCheckerPasses\r\t^ self\r\t\tvalidateFiles: self nativeJsonBenchmarkJsonCheckerPassFiles\r\t\tusingTest: [ :file | \r\t\t\t| data success |\r\t\t\tsuccess := true.\r\t\t\t[ data := file readStreamDo: [ :in | (NeoJSONReader on: in) next ] ]\r\t\t\t\ton: NeoJSONParseError\r\t\t\t\tdo: [ :exception | self log: exception printString. success := false ].\r\t\t\tsuccess ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '396' ],		#self : OmReference [ '397' ],		#time : DateAndTime [ '2021-01-25T09:51:18.53533-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #runNativeJsonBenchmarkRoundTrip,			#protocol : #running,			#sourceCode : 'runNativeJsonBenchmarkRoundTrip\r\t^ self \r\t\tvalidateFiles: self nativeJsonBenchmarkRoundTripFiles\r\t\tusingTest: [ :file |\r\t\t\t| data json |\r\t\t\tdata := file readStreamDo: [ :in | (NeoJSONReader on: in) next ].\r\t\t\tjson := NeoJSONWriter toString: data.\r\t\t\tjson = file contents ]',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '397' ],		#self : OmReference [ '398' ],		#time : DateAndTime [ '2021-01-25T09:51:18.535497-04:00' ],		#trigger : OmReference [ '199' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NeoJSONValidation,				#isMetaSide : false			},			#name : #'validateFiles:usingTest:',			#protocol : #private,			#sourceCode : 'validateFiles: files usingTest: block\r\t| total succeeded failed |\r\ttotal := succeeded := failed := 0.\r\tfiles do: [ :file | \r\t\t| success |\r\t\tself log: \'Running \' , file pathString.\r\t\tself log: ([ file contents contractTo: 64 ] on: Error do: [ :exception | exception printString ]).\r\t\tsuccess := [ block value: file ]\r\t\t\ton: Error\r\t\t\tdo: [ :exception | self log: \'  Errored. \' , exception printString. false ].\r\t\ttotal := total + 1.\r\t\tsuccess\r\t\t\tifTrue: [ succeeded := succeeded + 1 ]\r\t\t\tifFalse: [ failed := failed + 1 ].\r\t\tself log: (success ifTrue: [ \'  Succeeded\' ] ifFalse: [ \'  Failed\' ]); log: \'\' ].\r\tself log: (\'{1} total = {2} succeeded + {3} failed\' format: (Array with: total with: succeeded with: failed) ).\r\t^ self closeLog',			#stamp : '',			#package : #Neo-JSON-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-01-25T09:51:18.675503-04:00' ],		#prior : OmReference [ '398' ],		#self : OmReference [ '399' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Neo-JSON-Pharo-Core-CompatibleUserName.1551110229'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '399' ],		#self : OmReference [ '400' ],		#time : DateAndTime [ '2021-01-25T09:51:18.708162-04:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OrderedDictionary,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-pharo-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeMap: self',			#stamp : '',			#package : #Neo-JSON-Pharo-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '400' ],		#self : OmReference [ '401' ],		#time : DateAndTime [ '2021-01-25T09:51:18.709136-04:00' ],		#trigger : OmReference [ '399' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SmallDictionary,				#isMetaSide : false			},			#name : #'neoJsonOn:',			#protocol : #'*neo-json-pharo-core',			#sourceCode : 'neoJsonOn: neoJSONWriter\r\tneoJSONWriter writeMap: self',			#stamp : '',			#package : #Neo-JSON-Pharo-Core		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-01-25T09:51:18.769826-04:00' ],		#prior : OmReference [ '401' ],		#self : OmReference [ '402' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Neo-JSON-Pharo-Tests-CompatibleUserName.1551110229'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-01-25T09:51:18.841736-04:00' ],		#prior : OmReference [ '402' ],		#self : OmReference [ '403' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'DataFrame-CompatibleUserName.1607699955'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '403' ],		#self : OmReference [ '404' ],		#time : DateAndTime [ '2021-01-25T09:51:18.879908-04:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #DataFrame-Core,		#affectedPackageName : #DataFrame	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '404' ],		#self : OmReference [ '405' ],		#time : DateAndTime [ '2021-01-25T09:51:18.88304-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'OrderedDictionary',				#traitCompositionSource : '{}',				#definitionSource : 'OrderedDictionary subclass: #DataSeries\r\tinstanceVariableNames: \'name forcedIsNumerical\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Core\''			},			#name : #DataSeries,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataSeries,						#isMetaSide : false					},					#name : #name,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataSeries,						#isMetaSide : false					},					#name : #forcedIsNumerical,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataSeries class\r\tinstanceVariableNames: \'\''				},				#name : #'DataSeries class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataSeries,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Core,			#package : #DataFrame,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '405' ],		#self : OmReference [ '406' ],		#time : DateAndTime [ '2021-01-25T09:51:18.888589-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpCategoryAddition {		#classCategoryName : #DataFrame-FastTable,		#affectedPackageName : #DataFrame	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '406' ],		#self : OmReference [ '407' ],		#time : DateAndTime [ '2021-01-25T09:51:18.891442-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'FTSimpleDataSource',				#traitCompositionSource : '{}',				#definitionSource : 'FTSimpleDataSource subclass: #DataFrameFTData\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-FastTable\''			},			#name : #DataFrameFTData,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameFTData class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameFTData class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameFTData,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-FastTable,			#package : #DataFrame,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '407' ],		#self : OmReference [ '408' ],		#time : DateAndTime [ '2021-01-25T09:51:18.894453-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Collection',				#traitCompositionSource : '{}',				#definitionSource : 'Collection subclass: #DataFrame\r\tinstanceVariableNames: \'contents rowNames columnNames\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Core\''			},			#name : #DataFrame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrame,						#isMetaSide : false					},					#name : #contents,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrame,						#isMetaSide : false					},					#name : #rowNames,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrame,						#isMetaSide : false					},					#name : #columnNames,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrame class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrame,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Core,			#package : #DataFrame,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '408' ],		#self : OmReference [ '409' ],		#time : DateAndTime [ '2021-01-25T09:51:18.896072-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Collection',				#traitCompositionSource : '{}',				#definitionSource : 'Collection subclass: #DataFrame\r\tinstanceVariableNames: \'contents rowNames columnNames\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Core\''			},			#name : #DataFrame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrame,						#isMetaSide : false					},					#name : #contents,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrame,						#isMetaSide : false					},					#name : #rowNames,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrame,						#isMetaSide : false					},					#name : #columnNames,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrame class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrame,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a tabular data structure designed for data analysis.\r\rI store data in a table and provide an API for querying and modifying that data. I know row and column names associated with the table of data, which allows you to treat rows as observations and columns as features and reference them by their names. I also know the type of data stored in each column. In general, I am similar to spreadsheets such as Excel or to data frames in other languages, for example pandas (Python) or R.\r\rThe efficient data structure that I use to store the data is defined by DataFrameInternal. However, you can think of me as a collection of rows. Every time you interact with one of my rows or columns it will be an instance of the DataSeries class. I use DataTypeInductor to induce types of my columns every time they are modified. DataPrettyPrinter allows you to print me as a beautiful string table, DataFrameFTData defines a data source based on myself that is used in FastTable to display me in the inspector. I provide aggregation and grouping fuctionality which is implemented using a helper class DataFrameGrouped.\r\rPublic API and Key Messages\r\r\tCreating empty data frame (class side):\r\t\t- new (empty data frame)\r\t\t- new: point (empty data frame with given dimensions)\r\t\t- withColumnNames: arrayOfColumnNames (empty data frame with column names)\r\t\t- withRowNames: arrayOfRowNames (empty data frame with row names)\r\t\t- withRowNames: arrayOfRowNames columnNames: arrayOfColumnNames (empty data frame with row and column names)\r\t\t\r\tCreating data frame from an array of columns (class side):\r\t\t- withColumns: arrayOfArrays\r\t\t- withColumns: arrayOfArrays columnNames: arrayOfColumnNames\r\t\t- withColumns: arrayOfArrays rowNames: arrayOfRowNames\r\t\t- withColumns: arrayOfArrays rowNames: arrayOfRowNames columnNames: arrayOfColumnNames\r\t\t\r\tCreating data frame from an array of rows (class side):\r\t\t- withRows: arrayOfArrays\r\t\t- withRows: arrayOfArrays columnNames: arrayOfColumnNames\r\t\t- withRows: arrayOfArrays rowNames: arrayOfRowNames\r\t\t- withRows: arrayOfArrays rowNames: arrayOfRowNames columnNames: arrayOfColumnNames\r\r\tConverting:\r\t\t- asArrayOfColumns\r\t\t- asArrayOfRows\r\r\tDimensions\r\t\t- numberOfColumns\r\t\t- numberOfRows\r\t\t- dimensions (a Point numberOfRows @ numberOfColumns)\r\t\t\r\tColumn and row names:\r\t\t- columnNames \r\t\t- columnNames: arrayOfNewNames\r\t\t- rowNames\r\t\t- rowNames: arrayOfNewNames\r\t\t\r\tColumn types\r\t\t- columnTypes (classes of values stored in each column)\r\r\tGetting columns:\r\t\t- column: columnName \r\t\t- columnAt: index\r\t\t- columns: arrayOfColumnNames\r\t\t- columnsAt: arrayOfIndices\r\t\t- columnsFrom: firstIndex to: lastIndex\r\t\t\r\tGetting rows:\r\t\t- row: rowName\r\t\t- rowAt: index\r\t\t- rows: arrayOfRowNames\r\t\t- rowsAt: arrayOfIndices\r\t\t- rowsFrom: firstIndex to: lastIndex\r\t\t- at: index (same as rowAt:)\r\t\t\r\tGetting a cell value:\r\t\t- at: rowIndex at: columnIndex\r\t\t\r\tSetting columns\r\t\t- column: columnName put: arrayOrDataSeries\r\t\t- columnAt: index put: arrayOrDataSeries\r\t\t\r\tSetting rows\r\t\t- row: rowName put: arrayOrDataSeries\r\t\t- rowAt: index put: arrayOrDataSeries\r\r\tSetting a cell value:\r\t\t- at: rowIndex at: columnIndex put: value\r\t\t\r\tHead and tail:\r\t\t- head (first 5 rows)\r\t\t- head: numberOfRows\r\t\t- tail (last 5 rows)\r\t\t- tail: numberOfRows\r\t\t\r\tAdding columns:\r\t\t- addColumn: dataSeries\r\t\t- addColumn: dataSeries atPosition: index\r\t\t- addColumn: array named: columnName\r\t\t- addColumn: array named: columnName atPosition: index\r\t\t- addEmptyColumnNamed: columnName\r\t\t- addEmptyColumnNamed: columnName atPosition: index\r\t\t\r\tAdding rows:\r\t\t- addRow: dataSeries\r\t\t- addRow: dataSeries atPosition: index\r\t\t- addRow: array named: rowName\r\t\t- addRow: array named: rowName atPosition: index\r\t\t- addEmptyRowNamed: rowName\r\t\t- addEmptyRowNamed: rowName atPosition: index\r\t\t- add: dataSeries (same as addRow:)\r\t\t\r\tRemoving columns:\r\t\t- removeColumn: columnName\r\t\t- removeColumnAt: index\r\t\t\r\tRemoving rows: \r\t\t- removeRow: rowName\r\t\t- removeRowAt: index\r\t\t- removeFirstRow\r\t\t- removeLastRow\r\t\t\r\tEnumerating (over rows):\r\t\t- collect: block\r\t\t- do: block \r\t\t- select: block\r\t\t- withKeyDo: block\r\t\t\r\tAggregating and grouping:\r\t\t- groupBy: columnName (returns an instance of DataFrameGrouped)\r\t\t- groupBy: columnName aggregate: selector (groups data and aggregates it with a given function)\r\t\t- group: columnNameOrArrayOfColumnNames by: columnName (groups part of data frame)\r\t\t\r\tApplying:\r\t\t- applyElementwise: block (to all columns)\r\t\t- toColumn: columnName applyElementwise: block\r\t\t- toColumnAt: index applyElementwise: block\r\t\t- toColumns: arrayOfColumnNames applyElementwise: block\r\t\t- toColumnsAt: arrayOfIndices applyElementwise: block\r\t\t\r\tSorting:\r\t\t- sortBy: columnName\r\t\t- sortDescendingBy: columnName\r\t\t- sortBy: columnName using: block\r\t\t\r\tStatistical functions (applied to quantitative columns):\r\t\t- min\r\t\t- max\r\t\t- range (max minus min)\r\t\t- average\r\t\t- mean\r\t\t- mode\r\t\t- median (second quartile)\r\t\t- first quartile\r\t\t- third quartile\r\t\t- interquartileRange (trird quartile minus first quartile)\r\t\t- stdev (standard deviation)\r\t\t- variance\r \rInternal Representation and Key Implementation Points.\r\r\tDataFrameInternal defines how data is stored inside me.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Core,			#package : #DataFrame,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a tabular data structure designed for data analysis.\r\rI store data in a table and provide an API for querying and modifying that data. I know row and column names associated with the table of data, which allows you to treat rows as observations and columns as features and reference them by their names. I also know the type of data stored in each column. In general, I am similar to spreadsheets such as Excel or to data frames in other languages, for example pandas (Python) or R.\r\rThe efficient data structure that I use to store the data is defined by DataFrameInternal. However, you can think of me as a collection of rows. Every time you interact with one of my rows or columns it will be an instance of the DataSeries class. I use DataTypeInductor to induce types of my columns every time they are modified. DataPrettyPrinter allows you to print me as a beautiful string table, DataFrameFTData defines a data source based on myself that is used in FastTable to display me in the inspector. I provide aggregation and grouping fuctionality which is implemented using a helper class DataFrameGrouped.\r\rPublic API and Key Messages\r\r\tCreating empty data frame (class side):\r\t\t- new (empty data frame)\r\t\t- new: point (empty data frame with given dimensions)\r\t\t- withColumnNames: arrayOfColumnNames (empty data frame with column names)\r\t\t- withRowNames: arrayOfRowNames (empty data frame with row names)\r\t\t- withRowNames: arrayOfRowNames columnNames: arrayOfColumnNames (empty data frame with row and column names)\r\t\t\r\tCreating data frame from an array of columns (class side):\r\t\t- withColumns: arrayOfArrays\r\t\t- withColumns: arrayOfArrays columnNames: arrayOfColumnNames\r\t\t- withColumns: arrayOfArrays rowNames: arrayOfRowNames\r\t\t- withColumns: arrayOfArrays rowNames: arrayOfRowNames columnNames: arrayOfColumnNames\r\t\t\r\tCreating data frame from an array of rows (class side):\r\t\t- withRows: arrayOfArrays\r\t\t- withRows: arrayOfArrays columnNames: arrayOfColumnNames\r\t\t- withRows: arrayOfArrays rowNames: arrayOfRowNames\r\t\t- withRows: arrayOfArrays rowNames: arrayOfRowNames columnNames: arrayOfColumnNames\r\r\tConverting:\r\t\t- asArrayOfColumns\r\t\t- asArrayOfRows\r\r\tDimensions\r\t\t- numberOfColumns\r\t\t- numberOfRows\r\t\t- dimensions (a Point numberOfRows @ numberOfColumns)\r\t\t\r\tColumn and row names:\r\t\t- columnNames \r\t\t- columnNames: arrayOfNewNames\r\t\t- rowNames\r\t\t- rowNames: arrayOfNewNames\r\t\t\r\tColumn types\r\t\t- columnTypes (classes of values stored in each column)\r\r\tGetting columns:\r\t\t- column: columnName \r\t\t- columnAt: index\r\t\t- columns: arrayOfColumnNames\r\t\t- columnsAt: arrayOfIndices\r\t\t- columnsFrom: firstIndex to: lastIndex\r\t\t\r\tGetting rows:\r\t\t- row: rowName\r\t\t- rowAt: index\r\t\t- rows: arrayOfRowNames\r\t\t- rowsAt: arrayOfIndices\r\t\t- rowsFrom: firstIndex to: lastIndex\r\t\t- at: index (same as rowAt:)\r\t\t\r\tGetting a cell value:\r\t\t- at: rowIndex at: columnIndex\r\t\t\r\tSetting columns\r\t\t- column: columnName put: arrayOrDataSeries\r\t\t- columnAt: index put: arrayOrDataSeries\r\t\t\r\tSetting rows\r\t\t- row: rowName put: arrayOrDataSeries\r\t\t- rowAt: index put: arrayOrDataSeries\r\r\tSetting a cell value:\r\t\t- at: rowIndex at: columnIndex put: value\r\t\t\r\tHead and tail:\r\t\t- head (first 5 rows)\r\t\t- head: numberOfRows\r\t\t- tail (last 5 rows)\r\t\t- tail: numberOfRows\r\t\t\r\tAdding columns:\r\t\t- addColumn: dataSeries\r\t\t- addColumn: dataSeries atPosition: index\r\t\t- addColumn: array named: columnName\r\t\t- addColumn: array named: columnName atPosition: index\r\t\t- addEmptyColumnNamed: columnName\r\t\t- addEmptyColumnNamed: columnName atPosition: index\r\t\t\r\tAdding rows:\r\t\t- addRow: dataSeries\r\t\t- addRow: dataSeries atPosition: index\r\t\t- addRow: array named: rowName\r\t\t- addRow: array named: rowName atPosition: index\r\t\t- addEmptyRowNamed: rowName\r\t\t- addEmptyRowNamed: rowName atPosition: index\r\t\t- add: dataSeries (same as addRow:)\r\t\t\r\tRemoving columns:\r\t\t- removeColumn: columnName\r\t\t- removeColumnAt: index\r\t\t\r\tRemoving rows: \r\t\t- removeRow: rowName\r\t\t- removeRowAt: index\r\t\t- removeFirstRow\r\t\t- removeLastRow\r\t\t\r\tEnumerating (over rows):\r\t\t- collect: block\r\t\t- do: block \r\t\t- select: block\r\t\t- withKeyDo: block\r\t\t\r\tAggregating and grouping:\r\t\t- groupBy: columnName (returns an instance of DataFrameGrouped)\r\t\t- groupBy: columnName aggregate: selector (groups data and aggregates it with a given function)\r\t\t- group: columnNameOrArrayOfColumnNames by: columnName (groups part of data frame)\r\t\t\r\tApplying:\r\t\t- applyElementwise: block (to all columns)\r\t\t- toColumn: columnName applyElementwise: block\r\t\t- toColumnAt: index applyElementwise: block\r\t\t- toColumns: arrayOfColumnNames applyElementwise: block\r\t\t- toColumnsAt: arrayOfIndices applyElementwise: block\r\t\t\r\tSorting:\r\t\t- sortBy: columnName\r\t\t- sortDescendingBy: columnName\r\t\t- sortBy: columnName using: block\r\t\t\r\tStatistical functions (applied to quantitative columns):\r\t\t- min\r\t\t- max\r\t\t- range (max minus min)\r\t\t- average\r\t\t- mean\r\t\t- mode\r\t\t- median (second quartile)\r\t\t- first quartile\r\t\t- third quartile\r\t\t- interquartileRange (trird quartile minus first quartile)\r\t\t- stdev (standard deviation)\r\t\t- variance\r \rInternal Representation and Key Implementation Points.\r\r\tDataFrameInternal defines how data is stored inside me.',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '409' ],		#self : OmReference [ '410' ],		#time : DateAndTime [ '2021-01-25T09:51:18.901811-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Collection',				#traitCompositionSource : '{}',				#definitionSource : 'Collection subclass: #DataFrameInternal\r\tinstanceVariableNames: \'contents\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Core\''			},			#name : #DataFrameInternal,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameInternal,						#isMetaSide : false					},					#name : #contents,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameInternal class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameInternal class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameInternal,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Core,			#package : #DataFrame,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '410' ],		#self : OmReference [ '411' ],		#time : DateAndTime [ '2021-01-25T09:51:18.904301-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Collection',				#traitCompositionSource : '{}',				#definitionSource : 'Collection subclass: #DataFrameInternal\r\tinstanceVariableNames: \'contents\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Core\''			},			#name : #DataFrameInternal,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameInternal,						#isMetaSide : false					},					#name : #contents,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameInternal class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameInternal class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameInternal,					#isMetaSide : false				},				#parent : @8,				#content : 'I am  the internal representation of a DataFrame. I store the data very efficiently and allow you to access it very quickly. ',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Core,			#package : #DataFrame,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am  the internal representation of a DataFrame. I store the data very efficiently and allow you to access it very quickly. ',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '411' ],		#self : OmReference [ '412' ],		#time : DateAndTime [ '2021-01-25T09:51:19.121207-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataSeries class',				#isMetaSide : true			},			#name : #'newFrom:',			#protocol : #'instance creation',			#sourceCode : 'newFrom: aCollection\r\taCollection ifEmpty: [ ^ self new ].\r\r\t(aCollection species == self)\r\t\tifTrue: [ ^ super newFrom: aCollection associations ].\r\t\t\r\t"If it\'s a collection of associations use the superclass implementation"\r\t^ super newFrom: ((aCollection anyOne respondsTo: #key)\r\t\tifTrue: [ aCollection ]\r\t\tifFalse: [ aCollection withIndexCollect: [ :each :i | i -> each ] ]).',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '412' ],		#self : OmReference [ '413' ],		#time : DateAndTime [ '2021-01-25T09:51:19.122095-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataSeries class',				#isMetaSide : true			},			#name : #'withKeys:values:',			#protocol : #'instance creation',			#sourceCode : 'withKeys: keys values: values\r\t^ self newFromKeys: keys andValues: values ',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '413' ],		#self : OmReference [ '414' ],		#time : DateAndTime [ '2021-01-25T09:51:19.122592-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataSeries class',				#isMetaSide : true			},			#name : #'withKeys:values:name:',			#protocol : #'instance creation',			#sourceCode : 'withKeys: keys values: values name: aName\r\t^ (self withKeys: keys values: values) name: aName; yourself',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '414' ],		#self : OmReference [ '415' ],		#time : DateAndTime [ '2021-01-25T09:51:19.12289-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataSeries class',				#isMetaSide : true			},			#name : #'withValues:',			#protocol : #'instance creation',			#sourceCode : 'withValues: values\r\t| keys |\r\tkeys := (1 to: values size) asArray. \r\t^ self withKeys: keys values: values ',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '415' ],		#self : OmReference [ '416' ],		#time : DateAndTime [ '2021-01-25T09:51:19.123161-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataSeries class',				#isMetaSide : true			},			#name : #'withValues:name:',			#protocol : #'instance creation',			#sourceCode : 'withValues: values name: aName\r\t| keys |\r\tkeys := (1 to: values size) asArray. \r\t^ (self withKeys: keys values: values) name: aName; yourself',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '416' ],		#self : OmReference [ '417' ],		#time : DateAndTime [ '2021-01-25T09:51:19.12337-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'<',			#protocol : #comparing,			#sourceCode : '< arg\r\t"Element-wise comparision between two DataSeries.\r\t Does not consider keys for comparision."\r\r\t^ arg adaptToCollection: self andSend: #<\r\t',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '417' ],		#self : OmReference [ '418' ],		#time : DateAndTime [ '2021-01-25T09:51:19.123528-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'<=',			#protocol : #comparing,			#sourceCode : '<= arg\r\t"Element-wise comparision between two DataSeries.\r\t Does not consider keys for comparision."\r\r\t^ arg adaptToCollection: self andSend: #<=',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '418' ],		#self : OmReference [ '419' ],		#time : DateAndTime [ '2021-01-25T09:51:19.123674-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\t(super = anObject)\r\t\tifFalse: [ ^ false ].\r\t\t\r\t^ anObject name = self name\r\t\t"order of keys"\r\t\tand: [ anObject keys = self keys ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '419' ],		#self : OmReference [ '420' ],		#time : DateAndTime [ '2021-01-25T09:51:19.123842-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'>',			#protocol : #comparing,			#sourceCode : '> arg\r\t"Element-wise comparision between two DataSeries.\r\t Does not consider keys for comparision."\r\r\t^ arg adaptToCollection: self andSend: #>\r\t',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '420' ],		#self : OmReference [ '421' ],		#time : DateAndTime [ '2021-01-25T09:51:19.123985-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'>=',			#protocol : #comparing,			#sourceCode : '>= arg\r\t"Element-wise comparision between two DataSeries.\r\t Does not consider keys for comparision."\r\r\t^ arg adaptToCollection: self andSend: #>=\r\t',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '421' ],		#self : OmReference [ '422' ],		#time : DateAndTime [ '2021-01-25T09:51:19.124156-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'adaptToCollection:andSend:',			#protocol : #adapting,			#sourceCode : 'adaptToCollection: rcvr andSend: selector\r\t"If I am involved in arithmetic with another Collection, return a Collection of\r\tthe results of each element combined with the scalar in that expression."\r\r\t(rcvr isSequenceable and: [ self isSequenceable ]) ifFalse:\r\t\t[self error: \'Only sequenceable collections may be combined arithmetically\'].\r\t^ rcvr withSeries: self collect:\r\t\t[:rcvrElement :myElement | rcvrElement perform: selector with: myElement]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '422' ],		#self : OmReference [ '423' ],		#time : DateAndTime [ '2021-01-25T09:51:19.124325-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #asDataFrame,			#protocol : #converting,			#sourceCode : 'asDataFrame\r\t^ DataFrame\r\t\twithColumns: {  self values }\r\t\trowNames: self keys\r\t\tcolumnNames: { self name }.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '423' ],		#self : OmReference [ '424' ],		#time : DateAndTime [ '2021-01-25T09:51:19.124616-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'at:transform:',			#protocol : #accessing,			#sourceCode : 'at: aKey transform: aBlock\r\t"Evaluate aBlock on the value at aKey and replace that value with the result. Signal an exception if aKey was not found"\r\tself at: aKey transform: aBlock ifAbsent: [ self errorKeyNotFound: aKey ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '424' ],		#self : OmReference [ '425' ],		#time : DateAndTime [ '2021-01-25T09:51:19.124828-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'at:transform:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'at: aKey transform: aBlock ifAbsent: exceptionBlock\r\t"Evaluate aBlock on the value at aKey and replace that value with the result. Evaluate exceptionBlock if aKey was not found"\r\t| oldValue |\r\toldValue := self at: aKey ifAbsent: [\r\t\texceptionBlock value.\r\t\t^ self ].\r\t\r\tself at: aKey put: (aBlock value: oldValue).',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '425' ],		#self : OmReference [ '426' ],		#time : DateAndTime [ '2021-01-25T09:51:19.124977-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'atIndex:',			#protocol : #accessing,			#sourceCode : 'atIndex: aNumber\r\t^ self at: (self keys at: aNumber)',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '426' ],		#self : OmReference [ '427' ],		#time : DateAndTime [ '2021-01-25T09:51:19.125114-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'atIndex:put:',			#protocol : #accessing,			#sourceCode : 'atIndex: aNumber put: aValue\r\t^ self at: (self keys at: aNumber) put: aValue',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '427' ],		#self : OmReference [ '428' ],		#time : DateAndTime [ '2021-01-25T09:51:19.125262-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'atIndex:transform:',			#protocol : #accessing,			#sourceCode : 'atIndex: aNumber transform: aBlock\r\t"Evaluate aBlock on the value at aNumber and replace that value with the result"\r\t| key |\r\tkey := self keys at: aNumber.\r\tself at: key transform: aBlock',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '428' ],		#self : OmReference [ '429' ],		#time : DateAndTime [ '2021-01-25T09:51:19.125399-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'closeTo:',			#protocol : #comparing,			#sourceCode : 'closeTo: anObject\r\t^ self closeTo: anObject precision: self defaultPrecision.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '429' ],		#self : OmReference [ '430' ],		#time : DateAndTime [ '2021-01-25T09:51:19.125602-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'closeTo:precision:',			#protocol : #comparing,			#sourceCode : 'closeTo: anObject precision: aPrecision\r\tself == anObject\r\t\tifTrue: [^ true].\r\r\t(self species == anObject species\r\t\tand: [self size = anObject size])\r\t\tifFalse: [^ false].\r\t\t\r\t(anObject name = self name)\r\t\tifFalse: [ ^ false ].\r\t\t\r\t(anObject keys = self keys)\r\t\tifFalse: [ ^ false ].\r\r\t^ (1 to: self values size)\r\t\tdetect: [ :i | ((self atIndex: i) closeTo: (anObject atIndex: i) precision: aPrecision) not ]\r\t\tifFound: [ false ]\r\t\tifNone: [ true ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '430' ],		#self : OmReference [ '431' ],		#time : DateAndTime [ '2021-01-25T09:51:19.125745-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'collect:',			#protocol : #enumerating,			#sourceCode : 'collect: aBlock\r\t| result |\r\tresult :=  super collect: aBlock.\r\tresult name: self name.\r\t^ result',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '431' ],		#self : OmReference [ '432' ],		#time : DateAndTime [ '2021-01-25T09:51:19.12591-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'collectWithNotNils:',			#protocol : #enumerating,			#sourceCode : 'collectWithNotNils: aBlock\r\t"Applies aBlock to every non-nil element"\r\t^ self collect: [ :each |\r\t\teach isNil ifTrue: [ nil ] ifFalse: [ aBlock value: each ]\r\t\t]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '432' ],		#self : OmReference [ '433' ],		#time : DateAndTime [ '2021-01-25T09:51:19.126063-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'crossTabulateWith:',			#protocol : #statistics,			#sourceCode : 'crossTabulateWith: aSeries\r\t| df |\r\t\r\t(self size = aSeries size)\r\t\tifFalse: [ SizeMismatch signal ].\r\t\r\tdf := DataFrame withRows: \r\t\t(self uniqueValues collect: [ :each1 |\r\t\t\taSeries uniqueValues collect: [ :each2 |\r\t\t\t\t(1 to: self size) inject: 0 into: [ :accum :i |\r\t\t\t\t\t(((self atIndex: i) = each1) and: ((aSeries atIndex: i) = each2))\r\t\t\t\t\t\tifTrue: [ accum + 1 ]\r\t\t\t\t\t\tifFalse: [ accum ] ] ] ]).\r\t\t\r\tdf rowNames: self uniqueValues.\r\tdf columnNames: aSeries uniqueValues.\r\t^ df',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '433' ],		#self : OmReference [ '434' ],		#time : DateAndTime [ '2021-01-25T09:51:19.126198-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #defaultHeadTailSize,			#protocol : #defaults,			#sourceCode : 'defaultHeadTailSize\r\t^ 5',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '434' ],		#self : OmReference [ '435' ],		#time : DateAndTime [ '2021-01-25T09:51:19.127251-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #defaultName,			#protocol : #defaults,			#sourceCode : 'defaultName\r\t^ \'(no name)\'',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '435' ],		#self : OmReference [ '436' ],		#time : DateAndTime [ '2021-01-25T09:51:19.12741-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #defaultPrecision,			#protocol : #defaults,			#sourceCode : 'defaultPrecision\r\t^ 0.0001',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '436' ],		#self : OmReference [ '437' ],		#time : DateAndTime [ '2021-01-25T09:51:19.127588-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #eighth,			#protocol : #accessing,			#sourceCode : 'eighth\r\t"Answer the eighth element of the receiver.\r\tRaise an error if there are not enough elements."\r\t^ self atIndex: 8',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '437' ],		#self : OmReference [ '438' ],		#time : DateAndTime [ '2021-01-25T09:51:19.127735-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'errorKeyNotFound:',			#protocol : #private,			#sourceCode : 'errorKeyNotFound: aKey\r\r\tKeyNotFound signalFor: aKey',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '438' ],		#self : OmReference [ '439' ],		#time : DateAndTime [ '2021-01-25T09:51:19.127874-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #errorKeysMismatch,			#protocol : #errors,			#sourceCode : 'errorKeysMismatch\r\tError signal: \'Keys of two series do not match\'',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '439' ],		#self : OmReference [ '440' ],		#time : DateAndTime [ '2021-01-25T09:51:19.128013-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #fifth,			#protocol : #accessing,			#sourceCode : 'fifth\r\t"Answer the fifth element of the receiver.\r\tRaise an error if there are not enough elements."\r\t^ self atIndex: 5',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '440' ],		#self : OmReference [ '441' ],		#time : DateAndTime [ '2021-01-25T09:51:19.128168-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #first,			#protocol : #accessing,			#sourceCode : 'first \r\t"Answer the first element of the receiver.\r\tRaise an error if there are not enough elements."\r\t^ self atIndex: 1',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '441' ],		#self : OmReference [ '442' ],		#time : DateAndTime [ '2021-01-25T09:51:19.128306-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #firstQuartile,			#protocol : #statistics,			#sourceCode : 'firstQuartile\r\t^ self quartile: 1',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '442' ],		#self : OmReference [ '443' ],		#time : DateAndTime [ '2021-01-25T09:51:19.128445-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #fourth,			#protocol : #accessing,			#sourceCode : 'fourth\r\t"Answer the fourth element of the receiver.\r\tRaise an error if there are not enough elements."\r\t^ self atIndex: 4',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '443' ],		#self : OmReference [ '444' ],		#time : DateAndTime [ '2021-01-25T09:51:19.12858-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #fourthQuartile,			#protocol : #statistics,			#sourceCode : 'fourthQuartile\r\t^ self quartile: 4',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '444' ],		#self : OmReference [ '445' ],		#time : DateAndTime [ '2021-01-25T09:51:19.128727-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'groupBy:aggregateUsing:',			#protocol : #grouping,			#sourceCode : 'groupBy: otherSeries aggregateUsing: aBlock\r\t"Group my values by the unique values of otherSeries, aggregate them using aBlock. Use my name by default"\r\t^ self groupBy: otherSeries aggregateUsing: aBlock as: self name',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '445' ],		#self : OmReference [ '446' ],		#time : DateAndTime [ '2021-01-25T09:51:19.1289-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'groupBy:aggregateUsing:as:',			#protocol : #grouping,			#sourceCode : 'groupBy: otherSeries aggregateUsing: aBlock as: aNewName\r\t"Group my values by the unique values of otherSeries, aggregate them using aBlock, and answer a new DataSeries with unique values of otherSeries (group keys) as keys, aggregated values of myself as values, and aNewName as name"\r\t| groupKeys groups |\r\t\r\tself size = otherSeries size\r\t\tifFalse: [ SizeMismatch signal ].\r\t\t\r\tgroupKeys := otherSeries uniqueValues.\r\t\r\tgroups := groupKeys collect: [ :each |\r\t\t(1 to: self size)\r\t\t\tselect: [ :i | (otherSeries atIndex: i) = each ]\r\t\t\tthenCollect: [ :i | self atIndex: i ] ].\r\t\r\t^ DataSeries\r\t\twithKeys: groupKeys\r\t\tvalues: (groups collect: aBlock)\r\t\tname: aNewName',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '446' ],		#self : OmReference [ '447' ],		#time : DateAndTime [ '2021-01-25T09:51:19.129041-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #hasNil,			#protocol : #testing,			#sourceCode : 'hasNil\r\t"return true if data series has at least one nil value"\r\t^ self includes: nil. ',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '447' ],		#self : OmReference [ '448' ],		#time : DateAndTime [ '2021-01-25T09:51:19.12918-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #head,			#protocol : #slicing,			#sourceCode : 'head \r\t^ self head: self defaultHeadTailSize.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '448' ],		#self : OmReference [ '449' ],		#time : DateAndTime [ '2021-01-25T09:51:19.129325-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'head:',			#protocol : #slicing,			#sourceCode : 'head: aNumber\r\t^ self species\r\t\twithKeys: (self keys copyFrom: 1 to: aNumber)\r\t\tvalues: (self values copyFrom: 1 to: aNumber)\r\t\tname: self name.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '449' ],		#self : OmReference [ '450' ],		#time : DateAndTime [ '2021-01-25T09:51:19.129465-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize \r\tsuper initialize.\r\tname := self defaultName.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '450' ],		#self : OmReference [ '451' ],		#time : DateAndTime [ '2021-01-25T09:51:19.129642-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialization,			#sourceCode : 'initialize: aCapacity\r\t"Make sure that initialize is called and the default name is set"\r\tself initialize.\r\t^ super initialize: aCapacity.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '451' ],		#self : OmReference [ '452' ],		#time : DateAndTime [ '2021-01-25T09:51:19.129798-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #interquartileRange,			#protocol : #statistics,			#sourceCode : 'interquartileRange\r\t^ self thirdQuartile - self firstQuartile ',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '452' ],		#self : OmReference [ '453' ],		#time : DateAndTime [ '2021-01-25T09:51:19.129952-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #isCategorical,			#protocol : #categorical-numerical,			#sourceCode : 'isCategorical\r\t^ self isNumerical not',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '453' ],		#self : OmReference [ '454' ],		#time : DateAndTime [ '2021-01-25T09:51:19.130096-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #isNumerical,			#protocol : #categorical-numerical,			#sourceCode : 'isNumerical\r\t^ forcedIsNumerical ifNil: [self uniqueValues allSatisfy: [:each|each isNumber]]\r\t\t',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '454' ],		#self : OmReference [ '455' ],		#time : DateAndTime [ '2021-01-25T09:51:19.130236-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #isSequenceable,			#protocol : #testing,			#sourceCode : 'isSequenceable\r\t^ true',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '455' ],		#self : OmReference [ '456' ],		#time : DateAndTime [ '2021-01-25T09:51:19.13043-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'keys:',			#protocol : #accessing,			#sourceCode : 'keys: anArrayOfKeys\r\t| keys |\r\tkeys := anArrayOfKeys asArray deepCopy.\r\tdictionary := self dictionaryClass newFromKeys: keys andValues: self values.\r\torderedKeys := keys.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '456' ],		#self : OmReference [ '457' ],		#time : DateAndTime [ '2021-01-25T09:51:19.130579-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #last,			#protocol : #accessing,			#sourceCode : 'last\r\t"Answer the last element of the receiver.\r\tRaise an error if there are not enough elements."\r\t^ self atIndex: self size',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '457' ],		#self : OmReference [ '458' ],		#time : DateAndTime [ '2021-01-25T09:51:19.130722-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'log:',			#protocol : #'math functions',			#sourceCode : 'log: base\r\t^ self collect: [ :each | each log: base ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '458' ],		#self : OmReference [ '459' ],		#time : DateAndTime [ '2021-01-25T09:51:19.130973-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #makeCategorical,			#protocol : #categorical-numerical,			#sourceCode : 'makeCategorical\r\tforcedIsNumerical := false\r\t\t',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '459' ],		#self : OmReference [ '460' ],		#time : DateAndTime [ '2021-01-25T09:51:19.131124-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #makeNumerical,			#protocol : #categorical-numerical,			#sourceCode : 'makeNumerical\r\tforcedIsNumerical := true\r\t\t',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '460' ],		#self : OmReference [ '461' ],		#time : DateAndTime [ '2021-01-25T09:51:19.131276-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #mode,			#protocol : #accessing,			#sourceCode : 'mode\r\t| valueCounts maxCount |\r\tvalueCounts := self valueCounts.\r\tmaxCount := valueCounts max.\r\t^ valueCounts keyAtValue: maxCount.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '461' ],		#self : OmReference [ '462' ],		#time : DateAndTime [ '2021-01-25T09:51:19.131435-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t^ name',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '462' ],		#self : OmReference [ '463' ],		#time : DateAndTime [ '2021-01-25T09:51:19.131578-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'name:',			#protocol : #accessing,			#sourceCode : 'name: anObject\r\tname := anObject',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '463' ],		#self : OmReference [ '464' ],		#time : DateAndTime [ '2021-01-25T09:51:19.131727-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #ninth,			#protocol : #accessing,			#sourceCode : 'ninth\r\t"Answer the ninth element of the receiver.\r\tRaise an error if there are not enough elements."\r\t^ self atIndex: 9',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '464' ],		#self : OmReference [ '465' ],		#time : DateAndTime [ '2021-01-25T09:51:19.131879-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'quantile:',			#protocol : #statistics,			#sourceCode : 'quantile: aNumber\r\t| sortedSeries index |\r\tsortedSeries := self sorted.\r\t\r\taNumber = 0\r\t\tifTrue: [ ^ sortedSeries first ].\r\t\r\tindex := (sortedSeries size * (aNumber / 100)) ceiling.\r\t^ sortedSeries atIndex: index.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '465' ],		#self : OmReference [ '466' ],		#time : DateAndTime [ '2021-01-25T09:51:19.132021-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'quartile:',			#protocol : #statistics,			#sourceCode : 'quartile: aNumber\r\t^ self quantile: (25 * aNumber)',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '466' ],		#self : OmReference [ '467' ],		#time : DateAndTime [ '2021-01-25T09:51:19.132217-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'reject:',			#protocol : #enumerating,			#sourceCode : 'reject: aBlock\r\t| result |\r\tresult := super reject: aBlock.\r\tresult name: self name.\r\t^ result',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '467' ],		#self : OmReference [ '468' ],		#time : DateAndTime [ '2021-01-25T09:51:19.132393-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'removeAt:',			#protocol : #removing,			#sourceCode : 'removeAt: aKey\r\t^ self removeKey: aKey',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '468' ],		#self : OmReference [ '469' ],		#time : DateAndTime [ '2021-01-25T09:51:19.132679-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'removeAtIndex:',			#protocol : #removing,			#sourceCode : 'removeAtIndex: aNumber\r\t^ self removeAt: (self keys at: aNumber)',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '469' ],		#self : OmReference [ '470' ],		#time : DateAndTime [ '2021-01-25T09:51:19.133043-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #removeNils,			#protocol : #removing,			#sourceCode : 'removeNils\r\t^ self reject: [ :ele | ele isNil ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '470' ],		#self : OmReference [ '471' ],		#time : DateAndTime [ '2021-01-25T09:51:19.133253-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'replaceNilsWith:',			#protocol : #replacing,			#sourceCode : 'replaceNilsWith: anObject\r\t"Replaces nils inplace with anObject"\r\t\r\tself withIndexDo: [ :ele :index |\r\t\tele isNil\r\t\t\tifTrue: [ self atIndex: index put: anObject ] ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '471' ],		#self : OmReference [ '472' ],		#time : DateAndTime [ '2021-01-25T09:51:19.13342-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #replaceNilsWithAverage,			#protocol : #replacing,			#sourceCode : 'replaceNilsWithAverage\r\t"Replaces nils inplace with average"\r\t\r\t| mean |\r\tmean := (self select: [ :ele | ele isNotNil ]) average.\r\tself replaceNilsWith: mean.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '472' ],		#self : OmReference [ '473' ],		#time : DateAndTime [ '2021-01-25T09:51:19.133584-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #replaceNilsWithMedian,			#protocol : #replacing,			#sourceCode : 'replaceNilsWithMedian\r\t"Replaces nils inplace with median"\r\t\r\t| median |\r\tmedian := (self select: [ :ele | ele isNotNil ]) median.\r\tself replaceNilsWith: median.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '473' ],		#self : OmReference [ '474' ],		#time : DateAndTime [ '2021-01-25T09:51:19.133736-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #replaceNilsWithMode,			#protocol : #replacing,			#sourceCode : 'replaceNilsWithMode\r\t"Replaces nils inplace with mode"\r\t\r\t| mode |\r\tmode := (self select: [ :ele | ele isNotNil ]) mode.\r\tself replaceNilsWith: mode.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '474' ],		#self : OmReference [ '475' ],		#time : DateAndTime [ '2021-01-25T09:51:19.133882-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #replaceNilsWithZero,			#protocol : #replacing,			#sourceCode : 'replaceNilsWithZero\r\t"Replaces nils inplace with zero"\r\t\r\tself replaceNilsWith: 0.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '475' ],		#self : OmReference [ '476' ],		#time : DateAndTime [ '2021-01-25T09:51:19.134035-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #second,			#protocol : #accessing,			#sourceCode : 'second\r\t"Answer the second element of the receiver.\r\tRaise an error if there are not enough elements."\r\t^ self atIndex: 2',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '476' ],		#self : OmReference [ '477' ],		#time : DateAndTime [ '2021-01-25T09:51:19.134178-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #secondQuartile,			#protocol : #statistics,			#sourceCode : 'secondQuartile\r\t^ self quartile: 2',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '477' ],		#self : OmReference [ '478' ],		#time : DateAndTime [ '2021-01-25T09:51:19.134319-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'select:',			#protocol : #enumerating,			#sourceCode : 'select: aBlock\r\t| result |\r\tresult := super select: aBlock.\r\tresult name: self name.\r\t^ result',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '478' ],		#self : OmReference [ '479' ],		#time : DateAndTime [ '2021-01-25T09:51:19.13451-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #seventh,			#protocol : #accessing,			#sourceCode : 'seventh\r\t"Answer the seventh element of the receiver.\r\tRaise an error if there are not enough elements."\r\t^ self atIndex: 7',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '479' ],		#self : OmReference [ '480' ],		#time : DateAndTime [ '2021-01-25T09:51:19.134661-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #sixth,			#protocol : #accessing,			#sourceCode : 'sixth\r\t"Answer the sixth element of the receiver.\r\tRaise an error if there are not enough elements."\r\t^ self atIndex: 6',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '480' ],		#self : OmReference [ '481' ],		#time : DateAndTime [ '2021-01-25T09:51:19.134814-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #sort,			#protocol : #sorting,			#sourceCode : 'sort\r\tself sort: [ :a :b | a <= b ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '481' ],		#self : OmReference [ '482' ],		#time : DateAndTime [ '2021-01-25T09:51:19.134966-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'sort:',			#protocol : #sorting,			#sourceCode : 'sort: aBlock\r\t| associationBlock |\r\tassociationBlock := [ :a :b | aBlock value: a value value: b value ].\r\tself sortAssociations: associationBlock',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '482' ],		#self : OmReference [ '483' ],		#time : DateAndTime [ '2021-01-25T09:51:19.135116-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'sortAssociations:',			#protocol : #sorting,			#sourceCode : 'sortAssociations: aBlock\r\t| sortedAssociations |\r\tsortedAssociations := self associations sort: aBlock.\r\tself removeAll.\r\tself addAll: sortedAssociations.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '483' ],		#self : OmReference [ '484' ],		#time : DateAndTime [ '2021-01-25T09:51:19.13526-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #sortDescending,			#protocol : #sorting,			#sourceCode : 'sortDescending\r\tself sort: [ :a :b | a > b ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '484' ],		#self : OmReference [ '485' ],		#time : DateAndTime [ '2021-01-25T09:51:19.135408-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #sorted,			#protocol : #sorting,			#sourceCode : 'sorted\r\t^ self sorted: [ :a :b | a <= b ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '485' ],		#self : OmReference [ '486' ],		#time : DateAndTime [ '2021-01-25T09:51:19.135586-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'sorted:',			#protocol : #sorting,			#sourceCode : 'sorted: aBlock\r\t| associationBlock |\r\tassociationBlock := [ :a :b | aBlock value: a value value: b value ].\r\t^ self sortedAssociations: associationBlock',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '486' ],		#self : OmReference [ '487' ],		#time : DateAndTime [ '2021-01-25T09:51:19.135758-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'sortedAssociations:',			#protocol : #sorting,			#sourceCode : 'sortedAssociations: aBlock\r\t| sortedAssociations |\r\tsortedAssociations := self associations sort: aBlock.\r\t^ sortedAssociations asDataSeries name: self name; yourself',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '487' ],		#self : OmReference [ '488' ],		#time : DateAndTime [ '2021-01-25T09:51:19.135908-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #sortedDescending,			#protocol : #sorting,			#sourceCode : 'sortedDescending\r\t^ self sorted: [ :a :b | a > b ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '488' ],		#self : OmReference [ '489' ],		#time : DateAndTime [ '2021-01-25T09:51:19.136064-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #summary,			#protocol : #statistics,			#sourceCode : 'summary\r\t| summary |\r\tsummary := self species new.\r\tsummary name: self name.\r\t\r\tsummary\r\t\tat: \'Min\' put: self min;\r\t\tat: \'1st Qu.\' put: self firstQuartile;\r\t\tat: \'Median\' put: self median;\r\t\tat: \'Average\' put: self average;\r\t\tat: \'3rd Qu.\' put: self thirdQuartile;\r\t\tat: \'Max\' put: self max.\r\t\t\r\t^ summary',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '489' ],		#self : OmReference [ '490' ],		#time : DateAndTime [ '2021-01-25T09:51:19.136226-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #tail,			#protocol : #slicing,			#sourceCode : 'tail\r\t^ self tail: self defaultHeadTailSize.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '490' ],		#self : OmReference [ '491' ],		#time : DateAndTime [ '2021-01-25T09:51:19.13638-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'tail:',			#protocol : #slicing,			#sourceCode : 'tail: aNumber\r\t^ self species\r\t\twithKeys: (self keys copyFrom: self size - aNumber + 1 to: self size)\r\t\tvalues: (self values copyFrom: self size - aNumber + 1 to: self size)\r\t\tname: self name.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '491' ],		#self : OmReference [ '492' ],		#time : DateAndTime [ '2021-01-25T09:51:19.136528-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #third,			#protocol : #accessing,			#sourceCode : 'third\r\t"Answer the third element of the receiver.\r\tRaise an error if there are not enough elements."\r\t^ self atIndex: 3',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '492' ],		#self : OmReference [ '493' ],		#time : DateAndTime [ '2021-01-25T09:51:19.136678-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #thirdQuartile,			#protocol : #statistics,			#sourceCode : 'thirdQuartile\r\t^ self quartile: 3',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '493' ],		#self : OmReference [ '494' ],		#time : DateAndTime [ '2021-01-25T09:51:19.136828-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #uniqueValues,			#protocol : #accessing,			#sourceCode : 'uniqueValues\r\t| v |\r\tv := self asSet asArray.\r\t\r\t"Sort if possible"\r\t^ [ v sort ] on: Error do: [ v ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '494' ],		#self : OmReference [ '495' ],		#time : DateAndTime [ '2021-01-25T09:51:19.136973-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #valueCounts,			#protocol : #statistics,			#sourceCode : 'valueCounts\r\t^ (self groupBy: self aggregateUsing: #size) sortDescending',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '495' ],		#self : OmReference [ '496' ],		#time : DateAndTime [ '2021-01-25T09:51:19.137131-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #valueFrequencies,			#protocol : #statistics,			#sourceCode : 'valueFrequencies\r\t| count freq |\r\tcount := self valueCounts.\r\tfreq := count / self size.\r\t^ freq',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '496' ],		#self : OmReference [ '497' ],		#time : DateAndTime [ '2021-01-25T09:51:19.137296-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'with:collect:',			#protocol : #enumerating,			#sourceCode : 'with: aCollection collect: twoArgBlock \r\t"Collect and return the result of evaluating twoArgBlock with corresponding elements from this series and aCollection."\r\t| result |\r\taCollection size = self size ifFalse: [self errorSizeMismatch].\r\t\r\tresult := self species new: self size.\r\tresult name: self name.\r\t\r\tself keys withIndexDo: [ :key :i |\r\t\tresult at: key put:\r\t\t(twoArgBlock\r\t\t\tvalue: (self at: key)\r\t\t\tvalue: (aCollection at: i))].\r\t^ result',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '497' ],		#self : OmReference [ '498' ],		#time : DateAndTime [ '2021-01-25T09:51:19.137445-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'withIndexCollect:',			#protocol : #enumerating,			#sourceCode : 'withIndexCollect: aBlock\r\t| result |\r\tresult := self species newFrom:\r\t\t(self associations withIndexCollect: [:each :i |\r\t\t\teach key -> (aBlock value: each value value: i)]).\r\tresult name: self name.\r\t^ result',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '498' ],		#self : OmReference [ '499' ],		#time : DateAndTime [ '2021-01-25T09:51:19.137593-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'withIndexDetect:',			#protocol : #enumerating,			#sourceCode : 'withIndexDetect: aBlock\r\t\r\t^ self withIndexDetect: aBlock ifNone: [ NotFound signal ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '499' ],		#self : OmReference [ '500' ],		#time : DateAndTime [ '2021-01-25T09:51:19.13838-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'withIndexDetect:ifNone:',			#protocol : #enumerating,			#sourceCode : 'withIndexDetect: aBlock ifNone: exceptionBlock\r\t\r\t| selectedIndex |\r\t\r\tselectedIndex := (1 to: self size)\r\t\tdetect: [ :i | aBlock value: (self atIndex: i) value: i ]\r\t\tifNone: [ ^ exceptionBlock value ].\r\t\t\r\t^ self atIndex: selectedIndex.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '500' ],		#self : OmReference [ '501' ],		#time : DateAndTime [ '2021-01-25T09:51:19.138561-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'withIndexDo:',			#protocol : #enumerating,			#sourceCode : 'withIndexDo: aBlock\r\tself keys withIndexDo: [ :each :i | aBlock value: (self at: each) value: i ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '501' ],		#self : OmReference [ '502' ],		#time : DateAndTime [ '2021-01-25T09:51:19.13872-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'withIndexReject:',			#protocol : #enumerating,			#sourceCode : 'withIndexReject: aBlock\r\t^ self withIndexSelect: [ :each :i | (aBlock value: each value: i) not ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '502' ],		#self : OmReference [ '503' ],		#time : DateAndTime [ '2021-01-25T09:51:19.138876-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'withIndexSelect:',			#protocol : #enumerating,			#sourceCode : 'withIndexSelect: aBlock\r\t| selectedIndices |\r\t\r\tselectedIndices := (1 to: self size) select: [ :i |\r\t\taBlock value: (self atIndex: i) value: i ].\r\t\r\t^ DataSeries\r\t\twithKeys: (selectedIndices collect: [ :i | self keys at: i ])\r\t\tvalues: (selectedIndices collect: [ :i | self atIndex: i ])\r\t\tname: self name.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '503' ],		#self : OmReference [ '504' ],		#time : DateAndTime [ '2021-01-25T09:51:19.139039-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'withKeyCollect:',			#protocol : #enumerating,			#sourceCode : 'withKeyCollect: aBlock\r\t| result |\r\tresult := self species newFrom:\r\t\t(self associations collect: [:each |\r\t\t\teach key -> (aBlock value: each value value: each key)]).\r\tresult name: self name.\r\t^ result',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '504' ],		#self : OmReference [ '505' ],		#time : DateAndTime [ '2021-01-25T09:51:19.139189-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'withKeyDetect:',			#protocol : #enumerating,			#sourceCode : 'withKeyDetect: aBlock\r\t\r\t^ self withKeyDetect: aBlock ifNone: [ NotFound signal ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '505' ],		#self : OmReference [ '506' ],		#time : DateAndTime [ '2021-01-25T09:51:19.139447-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'withKeyDetect:ifNone:',			#protocol : #enumerating,			#sourceCode : 'withKeyDetect: aBlock ifNone: exceptionBlock\r\t\r\t| selectedKey |\r\t\r\tselectedKey := self keys\r\t\tdetect: [ :key | aBlock value: (self at: key) value: key ]\r\t\tifNone: [ ^ exceptionBlock value ].\r\t\t\r\t^ self at: selectedKey.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '506' ],		#self : OmReference [ '507' ],		#time : DateAndTime [ '2021-01-25T09:51:19.139604-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'withKeyDo:',			#protocol : #enumerating,			#sourceCode : 'withKeyDo: aBlock\r\tself keysDo: [ :each | aBlock value: (self at: each) value: each ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '507' ],		#self : OmReference [ '508' ],		#time : DateAndTime [ '2021-01-25T09:51:19.139757-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'withKeyReject:',			#protocol : #enumerating,			#sourceCode : 'withKeyReject: aBlock\r\t^ self withKeySelect: [ :each :key | (aBlock value: each value: key) not ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '508' ],		#self : OmReference [ '509' ],		#time : DateAndTime [ '2021-01-25T09:51:19.13991-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'withKeySelect:',			#protocol : #enumerating,			#sourceCode : 'withKeySelect: aBlock\r\t| selectedKeys |\r\t\r\tselectedKeys := self keys select: [ :key |\r\t\taBlock value: (self at: key) value: key ].\r\t\r\t^ DataSeries\r\t\twithKeys: selectedKeys\r\t\tvalues: (selectedKeys collect: [ :key | self at: key ])\r\t\tname: self name.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '509' ],		#self : OmReference [ '510' ],		#time : DateAndTime [ '2021-01-25T09:51:19.140117-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #'withSeries:collect:',			#protocol : #enumerating,			#sourceCode : 'withSeries: otherDataSeries collect: twoArgBlock \r\t"Collect and return the result of evaluating twoArgBlock with corresponding elements from this series and otherDataSeries."\r\t| result |\r\totherDataSeries size = self size ifFalse: [self errorSizeMismatch].\r\totherDataSeries keys = self keys ifFalse: [ self errorKeysMismatch ].\r\t\r\tresult := self species new: self size.\r\tresult name: self name.\r\t\r\tself keysDo: [ :key |\r\t\tresult at: key put:\r\t\t(twoArgBlock\r\t\t\tvalue: (self at: key)\r\t\t\tvalue: (otherDataSeries at: key))].\r\t^ result',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '510' ],		#self : OmReference [ '511' ],		#time : DateAndTime [ '2021-01-25T09:51:19.140324-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeries,				#isMetaSide : false			},			#name : #zerothQuartile,			#protocol : #statistics,			#sourceCode : 'zerothQuartile\r\t^ self quartile: 0',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '511' ],		#self : OmReference [ '512' ],		#time : DateAndTime [ '2021-01-25T09:51:19.141039-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #'using:',			#protocol : #'*DataFrame',			#sourceCode : 'using: aBlock\r\t"Answer a block which takes two arguments: a data frame and a column name. This block groups a column of data frame which has name equal to myself by the values of another column, aggregates them using aBlock, and returns a new data series"\r\t^ [ :dataFrame :groupColumnName |\r\t\tdataFrame\r\t\t\tgroup: self\r\t\t\tby: groupColumnName\r\t\t\taggregateUsing: aBlock ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '512' ],		#self : OmReference [ '513' ],		#time : DateAndTime [ '2021-01-25T09:51:19.14155-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #'using:as:',			#protocol : #'*DataFrame',			#sourceCode : 'using: aBlock as: aNewName\r\t"Answer a block which takes two arguments: a data frame and a column name. This block groups a column of data frame which has name equal to myself by the values of another column, aggregates them using aBlock, and returns a new data series with aNewName"\r\t^ [ :dataFrame :groupColumnName |\r\t\tdataFrame\r\t\t\tgroup: self\r\t\t\tby: groupColumnName\r\t\t\taggregateUsing: aBlock\r\t\t\tas: aNewName ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '513' ],		#self : OmReference [ '514' ],		#time : DateAndTime [ '2021-01-25T09:51:19.141783-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameFTData,				#isMetaSide : false			},			#name : #'cellColumn:row:',			#protocol : #accessing,			#sourceCode : 'cellColumn: column row: rowNumber\r\t\r\t| columnNumber |\r\t\r\tcolumn id = \'#\'\r\t\tifTrue: [ ^ FTCellMorph new addMorph: (elements rowNames at: rowNumber) asMorph ].\r\t\t\r\tcolumnNumber := elements columnNames indexOf: column id.\r\t\r\t^ FTCellMorph new\r\t\taddMorph: (elements at: rowNumber at: columnNumber) asMorph.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '514' ],		#self : OmReference [ '515' ],		#time : DateAndTime [ '2021-01-25T09:51:19.141982-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameFTData,				#isMetaSide : false			},			#name : #numberOfRows,			#protocol : #accessing,			#sourceCode : 'numberOfRows\r\r\t^ elements numberOfRows',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '515' ],		#self : OmReference [ '516' ],		#time : DateAndTime [ '2021-01-25T09:51:19.144781-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Collection,				#isMetaSide : false			},			#name : #'**',			#protocol : #'*DataFrame-Core-Base',			#sourceCode : '** arg\r\r\t^ self raisedTo: arg',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '516' ],		#self : OmReference [ '517' ],		#time : DateAndTime [ '2021-01-25T09:51:19.146642-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Collection,				#isMetaSide : false			},			#name : #asDataSeries,			#protocol : #'*DataFrame-Core-Base',			#sourceCode : 'asDataSeries\r\r\t^ self as: DataSeries\r\r',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '517' ],		#self : OmReference [ '518' ],		#time : DateAndTime [ '2021-01-25T09:51:19.148436-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Collection,				#isMetaSide : false			},			#name : #'closeTo:',			#protocol : #'*DataFrame-Core-Base',			#sourceCode : 'closeTo: aCollection\r\r\t^ (self - aCollection) inject: true into: [ :accum :each |\r\t\taccum and: (each closeTo: 0) ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '518' ],		#self : OmReference [ '519' ],		#time : DateAndTime [ '2021-01-25T09:51:19.1506-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Collection,				#isMetaSide : false			},			#name : #variance,			#protocol : #'*DataFrame-Core-Base',			#sourceCode : 'variance\r\r\t^ self stdev squared.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '519' ],		#self : OmReference [ '520' ],		#time : DateAndTime [ '2021-01-25T09:51:19.150983-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Collection,				#isMetaSide : false			},			#name : #'withSeries:collect:',			#protocol : #'*DataFrame',			#sourceCode : 'withSeries: aDataSeries collect: twoArgBlock \r\t"Collect and return the result of evaluating twoArgBlock with corresponding elements from this collection and aDataSeries."\r\t| result |\r\taDataSeries size = self size ifFalse: [self errorSizeMismatch].\r\t\r\tresult := aDataSeries species new: self size.\r\tresult name: aDataSeries name.\r\t\r\taDataSeries keys withIndexDo: [ :key :i |\r\t\tresult at: key put:\r\t\t(twoArgBlock\r\t\t\tvalue: (self at: i)\r\t\t\tvalue: (aDataSeries at: key))].\r\t^ result',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '520' ],		#self : OmReference [ '521' ],		#time : DateAndTime [ '2021-01-25T09:51:19.151173-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t\r\t^ super new initialize.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '521' ],		#self : OmReference [ '522' ],		#time : DateAndTime [ '2021-01-25T09:51:19.151364-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: aPoint\r\t\r\t^ super new initialize: aPoint.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '522' ],		#self : OmReference [ '523' ],		#time : DateAndTime [ '2021-01-25T09:51:19.151544-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'withColumnNames:',			#protocol : #'instance creation',			#sourceCode : 'withColumnNames: anArrayOfColumnNames\r\t"Create an empty data frame with given column names"\r\t| numberOfColumns df |\r\t\r\tnumberOfColumns := anArrayOfColumnNames size.\r\tdf := self new: 0 @ numberOfColumns.\r\t\r\tdf columnNames: anArrayOfColumnNames.\r\t^ df',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '523' ],		#self : OmReference [ '524' ],		#time : DateAndTime [ '2021-01-25T09:51:19.151705-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'withColumns:',			#protocol : #'instance creation',			#sourceCode : 'withColumns: anArrayOfArrays\r\r\t^ self new initializeColumns: anArrayOfArrays.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '524' ],		#self : OmReference [ '525' ],		#time : DateAndTime [ '2021-01-25T09:51:19.151869-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'withColumns:columnNames:',			#protocol : #'instance creation',			#sourceCode : 'withColumns: anArrayOfArrays columnNames: anArrayOfColumnNames\r\r\t| df |\r\tdf := self withColumns: anArrayOfArrays.\r\tdf columnNames: anArrayOfColumnNames.\r\t^ df',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '525' ],		#self : OmReference [ '526' ],		#time : DateAndTime [ '2021-01-25T09:51:19.152023-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'withColumns:rowNames:',			#protocol : #'instance creation',			#sourceCode : 'withColumns: anArrayOfArrays rowNames: anArrayOfRowNames\r\t^ anArrayOfArrays\r\t\tifNotEmpty: [ (self withColumns: anArrayOfArrays)\r\t\t\t\trowNames: anArrayOfRowNames;\r\t\t\t\tyourself ]\r\t\tifEmpty: [ self withRowNames: anArrayOfRowNames ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '526' ],		#self : OmReference [ '527' ],		#time : DateAndTime [ '2021-01-25T09:51:19.152179-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'withColumns:rowNames:columnNames:',			#protocol : #'instance creation',			#sourceCode : 'withColumns: anArrayOfArrays rowNames: anArrayOfRowNames columnNames: anArrayOfColumnNames\r\t^ anArrayOfArrays\r\t\tifNotEmpty: [ (self withColumns: anArrayOfArrays)\r\t\t\t\trowNames: anArrayOfRowNames;\r\t\t\t\tcolumnNames: anArrayOfColumnNames;\r\t\t\t\tyourself ]\r\t\tifEmpty: [ self withRowNames: anArrayOfRowNames ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '527' ],		#self : OmReference [ '528' ],		#time : DateAndTime [ '2021-01-25T09:51:19.152334-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'withDataFrameInternal:rowNames:columnNames:',			#protocol : #'instance creation',			#sourceCode : 'withDataFrameInternal: aDataFrameIndernal rowNames: rows columnNames: columns\r\r\t^ self new\r\t\tinitializeContents: aDataFrameIndernal\r\t\trowNames: rows\r\t\tcolumnNames: columns.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '528' ],		#self : OmReference [ '529' ],		#time : DateAndTime [ '2021-01-25T09:51:19.152485-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'withRowNames:',			#protocol : #'instance creation',			#sourceCode : 'withRowNames: anArrayOfRowNames\r\t"Create an empty data frame with given row names"\r\t| numberOfRows df |\r\t\r\tnumberOfRows := anArrayOfRowNames size.\r\tdf := self new: numberOfRows @ 0.\r\t\r\tdf rowNames: anArrayOfRowNames.\r\t^ df',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '529' ],		#self : OmReference [ '530' ],		#time : DateAndTime [ '2021-01-25T09:51:19.152743-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'withRowNames:columnNames:',			#protocol : #'instance creation',			#sourceCode : 'withRowNames: anArrayOfRowNames columnNames: anArrayOfColumnNames\r\t"Create an empty data frame with given row and column names"\r\t| numberOfRows numberOfColumns df |\r\t\r\tnumberOfRows := anArrayOfRowNames size.\r\tnumberOfColumns := anArrayOfColumnNames size.\r\t\r\tdf := self new: numberOfRows @ numberOfColumns.\r\t\r\tdf rowNames: anArrayOfRowNames.\r\tdf columnNames: anArrayOfColumnNames.\r\t\r\t^ df',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '530' ],		#self : OmReference [ '531' ],		#time : DateAndTime [ '2021-01-25T09:51:19.152934-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'withRows:',			#protocol : #'instance creation',			#sourceCode : 'withRows: anArrayOfArrays\r\r\t^ self new initializeRows: anArrayOfArrays.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '531' ],		#self : OmReference [ '532' ],		#time : DateAndTime [ '2021-01-25T09:51:19.153106-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'withRows:columnNames:',			#protocol : #'instance creation',			#sourceCode : 'withRows: anArrayOfArrays columnNames: anArrayOfColumnNames\r\t^ anArrayOfArrays\r\t\tifNotEmpty: [ (self withRows: anArrayOfArrays)\r\t\t\t\tcolumnNames: anArrayOfColumnNames;\r\t\t\t\tyourself ]\r\t\tifEmpty: [ self withColumnNames: anArrayOfColumnNames ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '532' ],		#self : OmReference [ '533' ],		#time : DateAndTime [ '2021-01-25T09:51:19.153259-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'withRows:rowNames:',			#protocol : #'instance creation',			#sourceCode : 'withRows: anArrayOfArrays rowNames: anArrayOfRowNames\r\r\t| df |\r\tdf := self withRows: anArrayOfArrays.\r\tdf rowNames: anArrayOfRowNames.\r\t^ df',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '533' ],		#self : OmReference [ '534' ],		#time : DateAndTime [ '2021-01-25T09:51:19.153417-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'withRows:rowNames:columnNames:',			#protocol : #'instance creation',			#sourceCode : 'withRows: anArrayOfArrays rowNames: anArrayOfRowNames columnNames: anArrayOfColumnNames\r\t^ anArrayOfArrays\r\t\tifNotEmpty: [ (self withRows: anArrayOfArrays)\r\t\t\t\trowNames: anArrayOfRowNames;\r\t\t\t\tcolumnNames: anArrayOfColumnNames;\r\t\t\t\tyourself ]\r\t\tifEmpty: [ self withColumnNames: anArrayOfColumnNames ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '534' ],		#self : OmReference [ '535' ],		#time : DateAndTime [ '2021-01-25T09:51:19.153595-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= aDataFrame\r\r\t"Most objects will fail here"\r\taDataFrame species = self species\r\t\tifFalse: [ ^ false ].\r\t\r\t"This is the fastest way for two data frames with different dimensions"\r\taDataFrame dimensions = self dimensions\r\t\tifFalse: [ ^ false ].\r\t\r\t"If the names are different we don\'t need to iterate through values"\t\r\t(aDataFrame rowNames = self rowNames\r\t\tand: [ aDataFrame columnNames = self columnNames ])\r\t\tifFalse: [ ^ false ].\r\t\t\r\t^ aDataFrame contents = self contents.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '535' ],		#self : OmReference [ '536' ],		#time : DateAndTime [ '2021-01-25T09:51:19.153779-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'add:',			#protocol : #adding,			#sourceCode : 'add: aDataSeries\r\t"Add DataSeries as a new row at the end"\r\tself addRow: aDataSeries.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '536' ],		#self : OmReference [ '537' ],		#time : DateAndTime [ '2021-01-25T09:51:19.15395-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'addColumn:',			#protocol : #adding,			#sourceCode : 'addColumn: aDataSeries\r\t"Add DataSeries as a new column at the end"\r\tself addColumn: aDataSeries named: aDataSeries name.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '537' ],		#self : OmReference [ '538' ],		#time : DateAndTime [ '2021-01-25T09:51:19.154105-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'addColumn:atPosition:',			#protocol : #adding,			#sourceCode : 'addColumn: aDataSeries atPosition: aNumber\r\t"Add DataSeries as a new column at the given position"\r\tself addColumn: aDataSeries asArray named: aDataSeries name atPosition: aNumber.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '538' ],		#self : OmReference [ '539' ],		#time : DateAndTime [ '2021-01-25T09:51:19.154252-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'addColumn:named:',			#protocol : #adding,			#sourceCode : 'addColumn: anArray named: aString\r\t"Add a new column at the end"\r\tself addColumn: anArray named: aString atPosition: self numberOfColumns + 1.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '539' ],		#self : OmReference [ '540' ],		#time : DateAndTime [ '2021-01-25T09:51:19.154405-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'addColumn:named:atPosition:',			#protocol : #adding,			#sourceCode : 'addColumn: anArray named: aString atPosition: aNumber\r\t"Add a new column at the given position"\r\t(self columnNames includes: aString)\r\t\tifTrue: [ Error signal: \'A column with that name already exists\' ].\r\t\r\tcontents addColumn: anArray asArray atPosition: aNumber.\r\tcolumnNames add: aString afterIndex: aNumber - 1.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '540' ],		#self : OmReference [ '541' ],		#time : DateAndTime [ '2021-01-25T09:51:19.154553-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'addEmptyColumnNamed:',			#protocol : #adding,			#sourceCode : 'addEmptyColumnNamed: aString\r\t"Add an empty column at the end"\r\tself addEmptyColumnNamed: aString atPosition: self numberOfColumns + 1',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '541' ],		#self : OmReference [ '542' ],		#time : DateAndTime [ '2021-01-25T09:51:19.154696-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'addEmptyColumnNamed:atPosition:',			#protocol : #adding,			#sourceCode : 'addEmptyColumnNamed: aString atPosition: aNumber\r\t"Add an empty column at the given position"\r\tself addColumn: (Array new: self numberOfRows) named: aString atPosition: aNumber',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '542' ],		#self : OmReference [ '543' ],		#time : DateAndTime [ '2021-01-25T09:51:19.154838-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'addEmptyRowNamed:',			#protocol : #adding,			#sourceCode : 'addEmptyRowNamed: aString\r\t"Add an empty row at the end"\r\tself addEmptyRowNamed: aString atPosition: self numberOfRows + 1',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '543' ],		#self : OmReference [ '544' ],		#time : DateAndTime [ '2021-01-25T09:51:19.155018-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'addEmptyRowNamed:atPosition:',			#protocol : #adding,			#sourceCode : 'addEmptyRowNamed: aString atPosition: aNumber\r\t"Add an empty row at the given position"\r\tself addRow: (Array new: self numberOfColumns) named: aString atPosition: aNumber',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '544' ],		#self : OmReference [ '545' ],		#time : DateAndTime [ '2021-01-25T09:51:19.155168-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'addRow:',			#protocol : #adding,			#sourceCode : 'addRow: aDataSeries\r\t"Add DataSeries as a new row at the end"\r\tself addRow: aDataSeries asArray named: aDataSeries name.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '545' ],		#self : OmReference [ '546' ],		#time : DateAndTime [ '2021-01-25T09:51:19.155314-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'addRow:atPosition:',			#protocol : #adding,			#sourceCode : 'addRow: aDataSeries atPosition: aNumber\r\t"Add DataSeries as a new row at the given position"\r\tself addRow: aDataSeries named: aDataSeries name atPosition: aNumber.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '546' ],		#self : OmReference [ '547' ],		#time : DateAndTime [ '2021-01-25T09:51:19.155464-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'addRow:named:',			#protocol : #adding,			#sourceCode : 'addRow: anArray named: aString\r\t"Add a new row at the end"\r\tself addRow: anArray named: aString atPosition: self numberOfRows + 1.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '547' ],		#self : OmReference [ '548' ],		#time : DateAndTime [ '2021-01-25T09:51:19.155614-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'addRow:named:atPosition:',			#protocol : #adding,			#sourceCode : 'addRow: anArray named: aString atPosition: aNumber\r\t"Add a new row at the given position"\r\t(self rowNames includes: aString)\r\t\tifTrue: [ Error signal: \'A row with that name already exists\' ].\r\t\r\tcontents addRow: anArray atPosition: aNumber.\r\trowNames add: aString afterIndex: aNumber - 1.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '548' ],		#self : OmReference [ '549' ],		#time : DateAndTime [ '2021-01-25T09:51:19.155762-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'applyElementwise:',			#protocol : #applying,			#sourceCode : 'applyElementwise: aBlock\r\t"Applies a given block to all columns of a data frame"\r\t\t\r\tself toColumns: self columnNames applyElementwise: aBlock.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '549' ],		#self : OmReference [ '550' ],		#time : DateAndTime [ '2021-01-25T09:51:19.155921-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'applyToAllColumns:',			#protocol : #private,			#sourceCode : 'applyToAllColumns: aSymbol\r"Sends the unary selector, aSymbol, to all columns of DataFrame and collects the result into a DataSeries object. Used by statistical functions of DataFrame"\r\r\t| series column |\r\t\r\tseries := DataSeries withValues:\r\t\t(self columnNames collect: [ :colName |\r\t\t\tcolumn := self column: colName.\r\t\t\tcolumn perform: aSymbol ]).\r\t\r\tseries name: aSymbol.\r\tseries keys: self columnNames.\r\t\r\t^ series',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '550' ],		#self : OmReference [ '551' ],		#time : DateAndTime [ '2021-01-25T09:51:19.156068-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #asArrayOfColumns,			#protocol : #converting,			#sourceCode : 'asArrayOfColumns\r\t"Converts DataFrame to the array of columns"\r\r\t^ contents asArrayOfColumns. ',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '551' ],		#self : OmReference [ '552' ],		#time : DateAndTime [ '2021-01-25T09:51:19.156216-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #asArrayOfRows,			#protocol : #converting,			#sourceCode : 'asArrayOfRows\r\t"Converts DataFrame to the array of rows"\r\t\r\t^ (1 to: self numberOfRows) collect: [ :i |\r\t\tself at: i ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '552' ],		#self : OmReference [ '553' ],		#time : DateAndTime [ '2021-01-25T09:51:19.15641-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'at:',			#protocol : #accessing,			#sourceCode : 'at: aNumber\r\r\t^ self rowAt: aNumber',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '553' ],		#self : OmReference [ '554' ],		#time : DateAndTime [ '2021-01-25T09:51:19.156646-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'at:at:',			#protocol : #accessing,			#sourceCode : 'at: rowNumber at: columnNumber\r\r\t^ contents at: rowNumber at: columnNumber',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '554' ],		#self : OmReference [ '555' ],		#time : DateAndTime [ '2021-01-25T09:51:19.156909-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'at:at:put:',			#protocol : #accessing,			#sourceCode : 'at: rowNumber at: columnNumber put: value\r\r\tcontents at: rowNumber at: columnNumber put: value.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '555' ],		#self : OmReference [ '556' ],		#time : DateAndTime [ '2021-01-25T09:51:19.157213-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'at:at:transform:',			#protocol : #accessing,			#sourceCode : 'at: rowIndex at: columnIndex transform: aBlock\r\t"Evaluate aBlock on the value at the intersection of rowIndex and columnIndex and replace that value with the result"\r\t| value |\r\tvalue := self at: rowIndex at: columnIndex.\r\tself at: rowIndex at: columnIndex put: (aBlock value: value)',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '556' ],		#self : OmReference [ '557' ],		#time : DateAndTime [ '2021-01-25T09:51:19.157388-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'at:transform:',			#protocol : #accessing,			#sourceCode : 'at: aNumber transform: aBlock\r\t"Evaluate aBlock on the row at aNumber and replace that row with the result"\r\t^ self rowAt: aNumber transform: aBlock',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '557' ],		#self : OmReference [ '558' ],		#time : DateAndTime [ '2021-01-25T09:51:19.157549-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #average,			#protocol : #statistics,			#sourceCode : 'average\r\r\t^ self applyToAllColumns: #average',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '558' ],		#self : OmReference [ '559' ],		#time : DateAndTime [ '2021-01-25T09:51:19.158533-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'closeTo:',			#protocol : #comparing,			#sourceCode : 'closeTo: aDataFrame\r\r\taDataFrame species = self species\r\t\tifFalse: [ ^ false ].\r\t\r\taDataFrame dimensions = self dimensions\r\t\tifFalse: [ ^ false ].\r\t\t\r\t(aDataFrame rowNames = self rowNames\r\t\tand: [ aDataFrame columnNames = self columnNames ])\r\t\tifFalse: [ ^ false ].\r\t\t\r\t1 to: self numberOfRows do: [ :i |\r\t\t1 to: self numberOfColumns do: [ :j |\r\t\t\t((self at: i at: j) closeTo: (aDataFrame at: i at: j))\r\t\t\t\tifFalse: [ ^ false ] ] ].\r\t\r\t^ true',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '559' ],		#self : OmReference [ '560' ],		#time : DateAndTime [ '2021-01-25T09:51:19.158705-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'collect:',			#protocol : #enumerating,			#sourceCode : 'collect: aBlock \r\t"Overrides the Collection>>collect to create DataFrame with the same number of columns as values in the first row"\r\t| firstRow newDataFrame |\r\t\r\tfirstRow := aBlock value: (self rowAt: 1) copy.\r\tnewDataFrame := self class new: 0@firstRow size.\r\tnewDataFrame columnNames: firstRow keys.\r\t\r\tself do: [:each | newDataFrame add: (aBlock value: each copy)].\r\t^ newDataFrame',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '560' ],		#self : OmReference [ '561' ],		#time : DateAndTime [ '2021-01-25T09:51:19.158874-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'column:',			#protocol : #accessing,			#sourceCode : 'column: columnName\r\t"Answer the column with columnName as a DataSeries or signal an exception if a column with that name was not found"\r\t| index |\r\tindex := self indexOfColumnNamed: columnName.\r\t^ self columnAt: index',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '561' ],		#self : OmReference [ '562' ],		#time : DateAndTime [ '2021-01-25T09:51:19.159021-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'column:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'column: columnName ifAbsent: exceptionBlock\r\t"Answer the column with columnName as a DataSeries or evaluate exception block if a column with that name was not found"\r\t| index |\r\tindex := self\r\t\tindexOfColumnNamed: columnName\r\t\tifAbsent: [ ^ exceptionBlock value ].\r\t\t\r\t^ self columnAt: index',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '562' ],		#self : OmReference [ '563' ],		#time : DateAndTime [ '2021-01-25T09:51:19.159163-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'column:put:',			#protocol : #accessing,			#sourceCode : 'column: columnName put: anArray\r\t"Replace the current values of column with columnName with anArray or signal an exception if a column with that name was not found"\r\t| index |\r\tindex := self indexOfColumnNamed: columnName.\r\t^ self columnAt: index put: anArray.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '563' ],		#self : OmReference [ '564' ],		#time : DateAndTime [ '2021-01-25T09:51:19.159337-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'column:put:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'column: columnName put: anArray ifAbsent: exceptionBlock\r\t"Replace the current values of column with columnName with anArray or evaluate exception block if a column with that name was not found"\r\t| index |\r\tindex := self\r\t\tindexOfColumnNamed: columnName\r\t\tifAbsent: [ ^ exceptionBlock value ].\r\t\t\r\t^ self columnAt: index put: anArray',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '564' ],		#self : OmReference [ '565' ],		#time : DateAndTime [ '2021-01-25T09:51:19.159484-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'column:transform:',			#protocol : #accessing,			#sourceCode : 'column: columnName transform: aBlock\r\t"Evaluate aBlock on the column with columnName and replace column with the result. Signal an exception if columnName was not found"\r\t| column |\r\tcolumn := self column: columnName.\r\tself column: columnName put: (aBlock value: column) asArray',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '565' ],		#self : OmReference [ '566' ],		#time : DateAndTime [ '2021-01-25T09:51:19.159629-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'column:transform:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'column: columnName transform: aBlock ifAbsent: exceptionBlock\r\t"Evaluate aBlock on the column with columnName and replace column with the result. Evaluate exceptionBlock if columnName was not found"\r\t| column |\r\tcolumn := self column: columnName ifAbsent: [ ^ exceptionBlock value ].\r\tself column: columnName put: (aBlock value: column)',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '566' ],		#self : OmReference [ '567' ],		#time : DateAndTime [ '2021-01-25T09:51:19.15977-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'columnAt:',			#protocol : #accessing,			#sourceCode : 'columnAt: aNumber\r\r\t| series |\r\tseries := (contents columnAt: aNumber) asDataSeries.\r\tseries name: (self columnNames at: aNumber).\r\tseries keys: self rowNames.\r\t^ series',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '567' ],		#self : OmReference [ '568' ],		#time : DateAndTime [ '2021-01-25T09:51:19.159906-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'columnAt:put:',			#protocol : #accessing,			#sourceCode : 'columnAt: aNumber put: anArray\r\t\r\tanArray size = self numberOfRows\r\t\tifFalse: [ SizeMismatch signal ].\t\r\t\r\tcontents columnAt: aNumber put: anArray.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '568' ],		#self : OmReference [ '569' ],		#time : DateAndTime [ '2021-01-25T09:51:19.160045-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'columnAt:transform:',			#protocol : #accessing,			#sourceCode : 'columnAt: aNumber transform: aBlock\r\t"Evaluate aBlock on the column at aNumber and replace that column with the result"\r\t| column |\r\tcolumn := self columnAt: aNumber.\r\tself columnAt: aNumber put: (aBlock value: column) asArray',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '569' ],		#self : OmReference [ '570' ],		#time : DateAndTime [ '2021-01-25T09:51:19.160179-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #columnNames,			#protocol : #accessing,			#sourceCode : 'columnNames\r\r\t^ columnNames',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '570' ],		#self : OmReference [ '571' ],		#time : DateAndTime [ '2021-01-25T09:51:19.160329-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'columnNames:',			#protocol : #accessing,			#sourceCode : 'columnNames: anArray\r\tanArray size = self numberOfColumns \r\t\tifFalse: [ SizeMismatch signal: \'Wrong number of column names\' ].\r\t\t\r\tanArray asSet size = anArray size\r\t\tifFalse: [ Error signal: \'All column names must be distinct\' ].\r\t\t\r\tcolumnNames := anArray asOrderedCollection',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '571' ],		#self : OmReference [ '572' ],		#time : DateAndTime [ '2021-01-25T09:51:19.160466-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'columns:',			#protocol : #accessing,			#sourceCode : 'columns: anArrayOfNames\r\t\r\t| anArrayOfNumbers |\r\t\r\tanArrayOfNumbers := anArrayOfNames\r\t\tcollect: [ :name |\r\t\t\tself indexOfColumnNamed: name ].\r\t\t\t\r\t^ self columnsAt: anArrayOfNumbers.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '572' ],		#self : OmReference [ '573' ],		#time : DateAndTime [ '2021-01-25T09:51:19.160614-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'columns:put:',			#protocol : #accessing,			#sourceCode : 'columns: anArrayOfColumnNames put: anArrayOfArrays\r\t\r\tanArrayOfArrays size = anArrayOfColumnNames size\r\t\tifFalse: [ SizeMismatch signal ].\t\r\t\r\tanArrayOfColumnNames with: anArrayOfArrays do: [ :name :array |\r\t\tself column: name put: array ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '573' ],		#self : OmReference [ '574' ],		#time : DateAndTime [ '2021-01-25T09:51:19.160759-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'columnsAt:',			#protocol : #accessing,			#sourceCode : 'columnsAt: anArrayOfNumbers\r\r\t| newColumnNames |\r\t\r\tnewColumnNames := (anArrayOfNumbers collect: [ :i |\r\t\tself columnNames at: i ]).\r\r\t^ DataFrame\r\t\twithDataFrameInternal: (self contents columnsAt: anArrayOfNumbers)\r\t\trowNames: self rowNames\r\t\tcolumnNames: newColumnNames.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '574' ],		#self : OmReference [ '575' ],		#time : DateAndTime [ '2021-01-25T09:51:19.160897-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'columnsAt:put:',			#protocol : #accessing,			#sourceCode : 'columnsAt: anArrayOfNumbers put: anArrayOfArrays\r\t\r\tanArrayOfArrays size = anArrayOfNumbers size\r\t\tifFalse: [ SizeMismatch signal ].\t\r\t\r\tanArrayOfNumbers with: anArrayOfArrays do: [ :index :array |\r\t\tself columnAt: index put: array ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '575' ],		#self : OmReference [ '576' ],		#time : DateAndTime [ '2021-01-25T09:51:19.161036-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'columnsFrom:to:',			#protocol : #accessing,			#sourceCode : 'columnsFrom: begin to: end\r\r\t| array |\r\t\r\tarray := begin < end\r\t\tifTrue: [ (begin to: end) asArray ]\r\t\tifFalse: [ (end to: begin) asArray reverse ].\r\t\r\t^ self columnsAt: array.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '576' ],		#self : OmReference [ '577' ],		#time : DateAndTime [ '2021-01-25T09:51:19.161182-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'columnsFrom:to:put:',			#protocol : #accessing,			#sourceCode : 'columnsFrom: firstNumber to: secondNumber put: anArrayOfArrays\r\r\t| interval |\r\t\r\tanArrayOfArrays size = ((firstNumber - secondNumber) abs + 1)\r\t\tifFalse: [ SizeMismatch signal ].\t\r\t\t\t\r\tinterval := secondNumber >= firstNumber\r\t\tifTrue: [ (firstNumber to: secondNumber) ]\r\t\tifFalse: [ (secondNumber to: firstNumber) reversed ].\r\t\r\tinterval withIndexDo: [ :columnIndex :i |\r\t\tself columnAt: columnIndex put: (anArrayOfArrays at: i) ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '577' ],		#self : OmReference [ '578' ],		#time : DateAndTime [ '2021-01-25T09:51:19.161316-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\r\t^ contents',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '578' ],		#self : OmReference [ '579' ],		#time : DateAndTime [ '2021-01-25T09:51:19.161468-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'crossTabulate:with:',			#protocol : #accessing,			#sourceCode : 'crossTabulate: colName1 with: colName2\r\r\t| col1 col2 |\r\t\r\tcol1 := self column: colName1.\r\tcol2 := self column: colName2.\r\t\r\t^ col1 crossTabulateWith: col2.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '579' ],		#self : OmReference [ '580' ],		#time : DateAndTime [ '2021-01-25T09:51:19.161697-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #defaultHeadTailSize,			#protocol : #accessing,			#sourceCode : 'defaultHeadTailSize\r\r\t^ 5',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '580' ],		#self : OmReference [ '581' ],		#time : DateAndTime [ '2021-01-25T09:51:19.161837-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #dimensions,			#protocol : #accessing,			#sourceCode : 'dimensions\r\r\t^ (self numberOfRows) @ (self numberOfColumns)',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '581' ],		#self : OmReference [ '582' ],		#time : DateAndTime [ '2021-01-25T09:51:19.16198-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'do:',			#protocol : #enumerating,			#sourceCode : 'do: aBlock\r"We enumerate through the data enrties - through rows of a data frame"\r\t| row |\r\t\r\t1 to: self numberOfRows do: [ :i |\r\t\trow := self rowAt: i.\r\t\taBlock value: row. \r\t\t"A hack to allow modification of rows inside do block"\r\t\tself rowAt: i put: row asArray ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '582' ],		#self : OmReference [ '583' ],		#time : DateAndTime [ '2021-01-25T09:51:19.162138-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'findAll:atColumn:',			#protocol : #find-select,			#sourceCode : 'findAll: anObject atColumn: columnName\r\t"Returns rowNames of rows having anObject at columnName"\r\r\t^ self rowNames select: [ :row | ((self column: columnName) at: row) = anObject ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '583' ],		#self : OmReference [ '584' ],		#time : DateAndTime [ '2021-01-25T09:51:19.162285-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'findAllIndicesOf:atColumn:',			#protocol : #find-select,			#sourceCode : 'findAllIndicesOf: anObject atColumn: columnName\r\t"Returns indices of rows having anObject at columnName"\r\t| output |\r\toutput := OrderedCollection new.\r\tself rowNames withIndexDo: [ :row :index | ((self column: columnName) at: row) = anObject ifTrue: [ output add: index ]].\r\t^ output',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '584' ],		#self : OmReference [ '585' ],		#time : DateAndTime [ '2021-01-25T09:51:19.16256-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #firstQuartile,			#protocol : #statistics,			#sourceCode : 'firstQuartile\r\r\t^ self applyToAllColumns: #firstQuartile',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '585' ],		#self : OmReference [ '586' ],		#time : DateAndTime [ '2021-01-25T09:51:19.162764-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'getJointColumnsWith:',			#protocol : #private,			#sourceCode : 'getJointColumnsWith: aDataFrame\r\t"comment stating purpose of message"\r\r\t| columnIntersection outputColumns |\r\tcolumnIntersection := (self columnNames intersection: (aDataFrame columnNames)) asSet.\r\toutputColumns := OrderedCollection new.\r\tself columnNames do: [ :column |\r\t\t(columnIntersection includes: column)\r\t\t\tifTrue: [ outputColumns add: (\'\' join: {column, \'_x\'}) ]\r\t\t\tifFalse: [ outputColumns add: column ]\r\t\t\t].\r\taDataFrame columnNames do: [ :column |\r\t\t(columnIntersection includes: column)\r\t\t\tifTrue: [ outputColumns add: (\'\' join: {column, \'_y\'}) ]\r\t\t\tifFalse: [ outputColumns add: column ]\r\t\t\t].\r\t\r\t^ outputColumns',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '586' ],		#self : OmReference [ '587' ],		#time : DateAndTime [ '2021-01-25T09:51:19.162916-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'group:by:aggregateUsing:',			#protocol : #grouping,			#sourceCode : 'group: anAggregateColumnName by: aGroupColumnName aggregateUsing: aBlock\r\t^ self group: anAggregateColumnName by: aGroupColumnName aggregateUsing: aBlock as: anAggregateColumnName.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '587' ],		#self : OmReference [ '588' ],		#time : DateAndTime [ '2021-01-25T09:51:19.16307-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'group:by:aggregateUsing:as:',			#protocol : #grouping,			#sourceCode : 'group: anAggregateColumnName by: aGroupColumnName aggregateUsing: aBlock as: aNewColumnName\r\r\t| groupColumn aggregateColumn |\r\t\r\taGroupColumnName = anAggregateColumnName\r\t\tifTrue: [ Error signal: \'Can not group a column by itself\' ].\r\t\t\r\tgroupColumn := self column: aGroupColumnName.\r\taggregateColumn := self column: anAggregateColumnName.\r\t\r\t^ aggregateColumn groupBy: groupColumn aggregateUsing: aBlock as: aNewColumnName',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '588' ],		#self : OmReference [ '589' ],		#time : DateAndTime [ '2021-01-25T09:51:19.163218-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'groupBy:aggregate:',			#protocol : #grouping,			#sourceCode : 'groupBy: columnName aggregate: anArrayOfUsingAsStatements\r\r\t| aggregatedColumns |\r\t\r\taggregatedColumns := anArrayOfUsingAsStatements collect: [ :aBlock |\r\t\taBlock value: self value: columnName ].\r\t\r\t^ DataFrame\r\t\twithColumns: aggregatedColumns\r\t\trowNames: aggregatedColumns first keys\r\t\tcolumnNames: (aggregatedColumns collect: #name)',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '589' ],		#self : OmReference [ '590' ],		#time : DateAndTime [ '2021-01-25T09:51:19.163366-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'gtInspectorFastTableIn:',			#protocol : #gt-inspector-extension,			#sourceCode : 'gtInspectorFastTableIn: composite\r\t<gtInspectorPresentationOrder: 0>\r\t<gtInspectorTag: #basic>\r\t\r\tcomposite morph\r\t\ttitle: \'Fast Table\';\r\t\tdisplay: [ self showWithGlamourIn: composite ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '590' ],		#self : OmReference [ '591' ],		#time : DateAndTime [ '2021-01-25T09:51:19.163598-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'gtInspectorItemsIn:',			#protocol : #gt-inspector-extension,			#sourceCode : 'gtInspectorItemsIn: composite\r"Hide Items from inspector"\r\r\tcomposite fastTable\r\t\twhen: [ false ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '591' ],		#self : OmReference [ '592' ],		#time : DateAndTime [ '2021-01-25T09:51:19.16387-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #head,			#protocol : #accessing,			#sourceCode : 'head \r\r\t^ self head: self defaultHeadTailSize.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '592' ],		#self : OmReference [ '593' ],		#time : DateAndTime [ '2021-01-25T09:51:19.164026-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'head:',			#protocol : #accessing,			#sourceCode : 'head: aNumber\r\r\t| n |\r\t\r\tself numberOfRows  > aNumber\r\t\tifTrue: [ n := aNumber ]\r\t\tifFalse: [ n := self numberOfRows ].\r\t\t\r\t^ self rowsAt: (1 to: n).',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '593' ],		#self : OmReference [ '594' ],		#time : DateAndTime [ '2021-01-25T09:51:19.164177-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'indexOfColumnNamed:',			#protocol : #accessing,			#sourceCode : 'indexOfColumnNamed: columnName\r\t"Answer the index of a column with a given name or signal an exception if the column with that name was not found"\r\t^ self\r\t\tindexOfColumnNamed: columnName\r\t\tifAbsent: [ LibrarySymbolNotFoundError signal: (\'Column \', columnName, \' was not found\') ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '594' ],		#self : OmReference [ '595' ],		#time : DateAndTime [ '2021-01-25T09:51:19.164353-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'indexOfColumnNamed:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'indexOfColumnNamed: columnName ifAbsent: exceptionBlock\r\t"Answer the index of a column with a given name or evaluate the exceptionBlock if the column with that name was not found"\r\t^ self columnNames\r\t\tindexOf: columnName\r\t\tifAbsent: exceptionBlock.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '595' ],		#self : OmReference [ '596' ],		#time : DateAndTime [ '2021-01-25T09:51:19.164651-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'indexOfRowNamed:',			#protocol : #accessing,			#sourceCode : 'indexOfRowNamed: rowName\r\t"Answer the index of a row with a given name or signal an exception if the row with that name was not found"\r\t^ self\r\t\tindexOfRowNamed: rowName\r\t\tifAbsent: [ LibrarySymbolNotFoundError signal: (\'Row \', rowName, \' was not found\') ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '596' ],		#self : OmReference [ '597' ],		#time : DateAndTime [ '2021-01-25T09:51:19.164827-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'indexOfRowNamed:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'indexOfRowNamed: rowName ifAbsent: exceptionBlock\r\t"Answer the index of a row with a given name or evaluate the exceptionBlock if the row with that name was not found"\r\t^ self rowNames\r\t\tindexOf: rowName\r\t\tifAbsent: exceptionBlock.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '597' ],		#self : OmReference [ '598' ],		#time : DateAndTime [ '2021-01-25T09:51:19.165107-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\tsuper initialize.\r\t\r\tcontents := DataFrameInternal new.\r\tself setDefaultRowColumnNames.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '598' ],		#self : OmReference [ '599' ],		#time : DateAndTime [ '2021-01-25T09:51:19.165422-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialization,			#sourceCode : 'initialize: aPoint\r\r\tsuper initialize.\r\t\r\tcontents := DataFrameInternal new: aPoint.\r\tself setDefaultRowColumnNames.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '599' ],		#self : OmReference [ '600' ],		#time : DateAndTime [ '2021-01-25T09:51:19.165628-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'initializeColumns:',			#protocol : #initialization,			#sourceCode : 'initializeColumns: anArrayOfArrays\r\r\tcontents := DataFrameInternal withColumns: anArrayOfArrays.\r\tself setDefaultRowColumnNames.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '600' ],		#self : OmReference [ '601' ],		#time : DateAndTime [ '2021-01-25T09:51:19.165856-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'initializeContents:rowNames:columnNames:',			#protocol : #initialization,			#sourceCode : 'initializeContents: aDataFrameInternal rowNames: rows columnNames: columns\r\r\tsuper initialize.\r\t\r\tcontents := aDataFrameInternal.\r\tself rowNames: rows.\r\tself columnNames: columns.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '601' ],		#self : OmReference [ '602' ],		#time : DateAndTime [ '2021-01-25T09:51:19.166086-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'initializeRows:',			#protocol : #initialization,			#sourceCode : 'initializeRows: anArrayOfArrays\r\r\tcontents := DataFrameInternal withRows: anArrayOfArrays.\r\tself setDefaultRowColumnNames.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '602' ],		#self : OmReference [ '603' ],		#time : DateAndTime [ '2021-01-25T09:51:19.166257-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'inject:into:',			#protocol : #enumerating,			#sourceCode : 'inject: thisValue into: binaryBlock \r\t| series |\r\tseries := super inject: thisValue into: binaryBlock.\r\tseries name: series defaultName.\r\t^ series',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '603' ],		#self : OmReference [ '604' ],		#time : DateAndTime [ '2021-01-25T09:51:19.166464-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'innerJoin:',			#protocol : #splitjoin,			#sourceCode : 'innerJoin: aDataFrame\r\t"Performs inner join on aDataFrame with rowNames as keys"\r\r\t| outputRows outputDf |\r\t\r\toutputDf := self class withColumnNames: (self getJointColumnsWith: aDataFrame).\r\t\r\t"Using select instead of intersection to preserve order"\r\toutputRows := self rowNames select: [ :row | aDataFrame rowNames includes: row ].\r\toutputRows do: [ :rowName |\r\t\t| rowToAdd |\r\t\trowToAdd := (self row: rowName) asArray, (aDataFrame row: rowName) asArray.\r\t\toutputDf addRow: rowToAdd named: rowName.\r\t\t].\r\t\r\t^ outputDf',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '604' ],		#self : OmReference [ '605' ],		#time : DateAndTime [ '2021-01-25T09:51:19.166636-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'innerJoin:on:',			#protocol : #splitjoin,			#sourceCode : 'innerJoin: aDataFrame on: aColumnName\r\t"Inner join of self with aDataFrame on a column that has a name aColumnName in both data frames"\r\t^ self innerJoin: aDataFrame onLeft: aColumnName onRight: aColumnName',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '605' ],		#self : OmReference [ '606' ],		#time : DateAndTime [ '2021-01-25T09:51:19.166858-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'innerJoin:onLeft:onRight:',			#protocol : #splitjoin,			#sourceCode : 'innerJoin: aDataFrame onLeft: leftColumn onRight: rightColumn\r\t"Performs inner join on aDataFrame with rowNames as keys.\r\t rowNames are not preserved.\r\t Duplicate column names will be appended with \'_x\' and \'_y\'."\r\r\t| outputRows outputDf |\r\t\r\toutputDf := self class withColumnNames: (self getJointColumnsWith: aDataFrame).\r\t\r\t"Skip join if any of the dataframe is zero"\r\t((self size isZero) | (aDataFrame size isZero)) ifFalse: [\r\t\t"Using select instead of intersection to preserve order"\r\t\toutputRows := OrderedCollection new.\r\t\t(self column: leftColumn) withIndexDo: [ :ele :index |\r\t\t\t((aDataFrame column: rightColumn) includes: ele) ifTrue: [ outputRows add: index ] ].\r\t\toutputRows do: [ :rowIndex |\r\t\t\t| rowsWithSameKey rowToAdd |\r\t\t\trowsWithSameKey := aDataFrame findAllIndicesOf: (self at: rowIndex at: (self indexOfColumnNamed: leftColumn)) atColumn: rightColumn.\r\t\t\trowsWithSameKey do: [ :rightRow |\r\t\t\t\trowToAdd := (self rowAt: rowIndex) asArray, (aDataFrame rowAt: rightRow) asArray.\r\t\t\t\toutputDf addRow: rowToAdd named: (outputDf size + 1).\r\t\t\t\t].\r\t\t\t].\r\t\t].\r\t\r\t"Since Key is common, remove duplicate key column if it is of same name"\r\t(leftColumn = rightColumn) ifTrue: [\r\t\toutputDf removeColumn: (rightColumn, \'_y\').\r\t\toutputDf renameColumn: (leftColumn, \'_x\') to: leftColumn.\r\t\t].\r\t\r\t^ outputDf',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '606' ],		#self : OmReference [ '607' ],		#time : DateAndTime [ '2021-01-25T09:51:19.167012-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #interquartileRange,			#protocol : #statistics,			#sourceCode : 'interquartileRange\r\r\t^ self applyToAllColumns: #interquartileRange',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '607' ],		#self : OmReference [ '608' ],		#time : DateAndTime [ '2021-01-25T09:51:19.167216-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'leftJoin:',			#protocol : #splitjoin,			#sourceCode : 'leftJoin: aDataFrame\r\t"Performs left join on aDataFrame with rowNames as keys"\r\r\t| outputDf commonRows |\r\t\r\toutputDf := self class withColumnNames: (self getJointColumnsWith: aDataFrame).\r\tcommonRows := self rowNames intersection: aDataFrame rowNames.\r\tself rowNames do: [ :rowName | \r\t\t| rowToAdd |\r\t\trowToAdd := (commonRows includes: rowName)\r\t\t\tifTrue: [ (self row: rowName) asArray , (aDataFrame row: rowName) asArray ]\r\t\t\tifFalse: [ (self row: rowName) asArray , (Array new: aDataFrame columnNames size) ].\r\t\toutputDf addRow: rowToAdd named: rowName ].\r\t\r\t^ outputDf',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '608' ],		#self : OmReference [ '609' ],		#time : DateAndTime [ '2021-01-25T09:51:19.167451-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'leftJoin:on:',			#protocol : #splitjoin,			#sourceCode : 'leftJoin: aDataFrame on: aColumnName\r\t"Left join of self with aDataFrame on a column that has a name aColumnName in both data frames"\r\t^ self leftJoin: aDataFrame onLeft: aColumnName onRight: aColumnName',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '609' ],		#self : OmReference [ '610' ],		#time : DateAndTime [ '2021-01-25T09:51:19.167673-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'leftJoin:onLeft:onRight:',			#protocol : #splitjoin,			#sourceCode : 'leftJoin: aDataFrame onLeft: leftColumn onRight: rightColumn\r\t"Performs left join on aDataFrame with rowNames as keys.\r\t rowNames are not preserved.\r\t Duplicate column names will be appended with \'_x\' and \'_y\'."\r\r\t| outputDf commonRows |\r\t\r\toutputDf := self class withColumnNames: (self getJointColumnsWith: aDataFrame).\r\t\r\tcommonRows := (self column: leftColumn) asArray intersection: (aDataFrame column: rightColumn) asArray.\r\t\r\t1 to: self size do: [ :rowIndex |\r\t\t| rowsWithSameKey rowToAdd |\r\t\t(commonRows includes: (self at: rowIndex at: (self indexOfColumnNamed: leftColumn)))\r\t\tifTrue: [\r\t\t\t"Row present in both df - append rows and add to outputDf"\r\t\t\trowsWithSameKey := aDataFrame findAllIndicesOf: (self at: rowIndex at: (self indexOfColumnNamed: leftColumn)) atColumn: rightColumn.\r\t\t\trowsWithSameKey do: [ :rightRow |\r\t\t\t\trowToAdd := (self rowAt: rowIndex) asArray, (aDataFrame rowAt: rightRow) asArray.\r\t\t\t\toutputDf addRow: rowToAdd named: (outputDf size + 1).\r\t\t\t\t].\r\t\t\t]\r\t\tifFalse: [\r\t\t\t"Row present in left-only - append nils and add to outputDf"\r\t\t\trowToAdd := (self rowAt: rowIndex) asArray, (Array new: aDataFrame columnNames size).\r\t\t\toutputDf addRow: rowToAdd named: (outputDf size + 1)\r\t\t\t].\r\t\t].\r\t\r\t"Since Key is common, remove duplicate key column if it is of same name"\r\t(leftColumn = rightColumn) ifTrue: [\r\t\toutputDf removeColumn: (rightColumn, \'_y\').\r\t\toutputDf renameColumn: (leftColumn, \'_x\') to: leftColumn.\r\t\t].\r\t\r\t^ outputDf',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '610' ],		#self : OmReference [ '611' ],		#time : DateAndTime [ '2021-01-25T09:51:19.16783-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #max,			#protocol : #statistics,			#sourceCode : 'max\r\r\t^ self applyToAllColumns: #max',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '611' ],		#self : OmReference [ '612' ],		#time : DateAndTime [ '2021-01-25T09:51:19.168001-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #median,			#protocol : #statistics,			#sourceCode : 'median\r\r\t^ self applyToAllColumns: #median',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '612' ],		#self : OmReference [ '613' ],		#time : DateAndTime [ '2021-01-25T09:51:19.1682-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #min,			#protocol : #statistics,			#sourceCode : 'min\r\r\t^ self applyToAllColumns: #min',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '613' ],		#self : OmReference [ '614' ],		#time : DateAndTime [ '2021-01-25T09:51:19.168366-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #mode,			#protocol : #statistics,			#sourceCode : 'mode\r\r\t^ self applyToAllColumns: #mode',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '614' ],		#self : OmReference [ '615' ],		#time : DateAndTime [ '2021-01-25T09:51:19.168533-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #numberOfColumns,			#protocol : #accessing,			#sourceCode : 'numberOfColumns\r\r\t^ contents numberOfColumns',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '615' ],		#self : OmReference [ '616' ],		#time : DateAndTime [ '2021-01-25T09:51:19.168674-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #numberOfRows,			#protocol : #accessing,			#sourceCode : 'numberOfRows\r\r\t^ contents numberOfRows',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '616' ],		#self : OmReference [ '617' ],		#time : DateAndTime [ '2021-01-25T09:51:19.168841-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'outerJoin:',			#protocol : #splitjoin,			#sourceCode : 'outerJoin: aDataFrame\r\t"Performs outer join on aDataFrame with rowNames as keys"\r\r\t| outputDf commonRows |\r\t\r\toutputDf := self class withColumnNames: (self getJointColumnsWith: aDataFrame).\r\tcommonRows := self rowNames intersection: aDataFrame rowNames.\r\tself rowNames do: [ :rowName | \r\t\t| rowToAdd |\r\t\trowToAdd := (commonRows includes: rowName)\r\t\t\tifTrue: [ (self row: rowName) asArray , (aDataFrame row: rowName) asArray ]\r\t\t\tifFalse: [ (self row: rowName) asArray , (Array new: aDataFrame columnNames size) ].\r\t\toutputDf addRow: rowToAdd named: rowName ].\r\t\r\taDataFrame rowNames do: [ :rowName | \r\t\t(commonRows includes: rowName)\r\t\t\tifFalse: [ outputDf\r\t\t\t\taddRow: (Array new: self columnNames size) , (aDataFrame row: rowName) asArray\r\t\t\t\tnamed: rowName ] ].\r\t\r\t^ outputDf',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '617' ],		#self : OmReference [ '618' ],		#time : DateAndTime [ '2021-01-25T09:51:19.168985-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'outerJoin:on:',			#protocol : #splitjoin,			#sourceCode : 'outerJoin: aDataFrame on: aColumnName\r\t"Outer join of self with aDataFrame on a column that has a name aColumnName in both data frames"\r\t^ self outerJoin: aDataFrame onLeft: aColumnName onRight: aColumnName',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '618' ],		#self : OmReference [ '619' ],		#time : DateAndTime [ '2021-01-25T09:51:19.169205-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'outerJoin:onLeft:onRight:',			#protocol : #splitjoin,			#sourceCode : 'outerJoin: aDataFrame onLeft: leftColumn onRight: rightColumn\r\t"Performs outer join on aDataFrame with rowNames as keys.\r\t rowNames are not preserved.\r\t Duplicate column names will be appended with \'_x\' and \'_y\'."\r\r\t| outputDf commonRows leftNils |\r\t\r\toutputDf := self class withColumnNames: (self getJointColumnsWith: aDataFrame).\r\t\r\tcommonRows := (self column: leftColumn) asArray intersection: (aDataFrame column: rightColumn) asArray.\r\r\t1 to: self size do: [ :rowIndex |\r\t\t| rowsWithSameKey rowToAdd |\r\t\t(commonRows includes: (self at: rowIndex at: (self indexOfColumnNamed: leftColumn)))\r\t\tifTrue: [\r\t\t\t"Row present in both df - append rows and add to outputDf"\r\t\t\trowsWithSameKey := aDataFrame findAllIndicesOf: (self at: rowIndex at: (self indexOfColumnNamed: leftColumn)) atColumn: rightColumn.\r\t\t\trowsWithSameKey do: [ :rightRow |\r\t\t\t\trowToAdd := (self rowAt: rowIndex) asArray, (aDataFrame rowAt: rightRow) asArray.\r\t\t\t\toutputDf addRow: rowToAdd named: (outputDf size + 1).\r\t\t\t\t].\r\t\t\t]\r\t\tifFalse: [\r\t\t\t"Row present in left-only - append nils and add to outputDf"\r\t\t\trowToAdd := (self rowAt: rowIndex) asArray, (Array new: aDataFrame columnNames size).\r\t\t\toutputDf addRow: rowToAdd named: (outputDf size + 1)\r\t\t\t].\r\t\t].\r\t\r\t1 to: aDataFrame size do: [ :rowIndex |\r\t\t| rowToAdd |\r\t\t(commonRows includes: (aDataFrame at: rowIndex at: (aDataFrame indexOfColumnNamed: rightColumn)))\r\t\tifFalse: [\r\t\t\t"Row present in right-only - construct row and append"\r\t\t\tleftNils := self columnNames collect: [ :col |\r\t\t\t\tcol = rightColumn\r\t\t\t\t\tifTrue: [ (aDataFrame rowAt: rowIndex) at: rightColumn ]\r\t\t\t\t\tifFalse: [ nil ] ].\r\t\t\trowToAdd := leftNils, (aDataFrame rowAt: rowIndex) asArray.\r\t\t\toutputDf addRow: rowToAdd named: (outputDf size + 1).\r\t\t\t].\r\t\t].\r\t\r\t"Since Key is common, remove duplicate key column if it is of same name"\r\t(leftColumn = rightColumn) ifTrue: [\r\t\toutputDf removeColumn: (rightColumn, \'_y\').\r\t\toutputDf renameColumn: (leftColumn, \'_x\') to: leftColumn.\r\t\t].\r\t\r\t^ outputDf',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '619' ],		#self : OmReference [ '620' ],		#time : DateAndTime [ '2021-01-25T09:51:19.169349-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\t| title |\r\ttitle := self class name.\r\taStream\r\t\tnextPutAll: (title first isVowel ifTrue: [\'an \'] ifFalse: [\'a \']);\r\t\tnextPutAll: title;\r\t\tspace;\r\t\tnextPutAll: self dimensions asString.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '620' ],		#self : OmReference [ '621' ],		#time : DateAndTime [ '2021-01-25T09:51:19.170196-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #range,			#protocol : #statistics,			#sourceCode : 'range\r\r\t^ self applyToAllColumns: #range',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '621' ],		#self : OmReference [ '622' ],		#time : DateAndTime [ '2021-01-25T09:51:19.170406-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeColumn:',			#protocol : #removing,			#sourceCode : 'removeColumn: columnName\r\r\t| index |\r\tindex := self indexOfColumnNamed: columnName.\r\tself removeColumnAt: index.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '622' ],		#self : OmReference [ '623' ],		#time : DateAndTime [ '2021-01-25T09:51:19.170561-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeColumnAt:',			#protocol : #removing,			#sourceCode : 'removeColumnAt: columnNumber\r\t(columnNumber < 1 or: [ columnNumber > self numberOfColumns ])\r\t\tifTrue: [ SubscriptOutOfBounds signalFor: columnNumber ].\r\r\tcontents removeColumnAt: columnNumber.\r\tcolumnNames := columnNames copyWithoutIndex: columnNumber.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '623' ],		#self : OmReference [ '624' ],		#time : DateAndTime [ '2021-01-25T09:51:19.170704-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeColumns:',			#protocol : #removing,			#sourceCode : 'removeColumns: aCollectionOfColumnNames\r\taCollectionOfColumnNames do: [ :each |\r\t\tself removeColumn: each ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '624' ],		#self : OmReference [ '625' ],		#time : DateAndTime [ '2021-01-25T09:51:19.170852-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeColumnsAt:',			#protocol : #removing,			#sourceCode : 'removeColumnsAt: aCollectionOfColumnIndices\r\t| columnNamesToRemove |\r\tcolumnNamesToRemove := aCollectionOfColumnIndices collect: [ :i |\r\t\tcolumnNames at: i ].\r\tself removeColumns: columnNamesToRemove',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '625' ],		#self : OmReference [ '626' ],		#time : DateAndTime [ '2021-01-25T09:51:19.171014-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeColumnsOfRowElementsSatisfing:onRow:',			#protocol : #removing,			#sourceCode : 'removeColumnsOfRowElementsSatisfing: aBlock onRow: rowNumber\r\r\t| columnNamesCopy |\r\t(rowNumber < 1 or: [ rowNumber > self numberOfRows ])\r\t\tifTrue: [ SubscriptOutOfBounds signalFor: rowNumber ].\r\t\t\r\tcolumnNamesCopy := columnNames deepCopy.\r\tcolumnNames removeAll.\r\tcolumnNamesCopy withIndexDo: [ :columnName :j |\r\t\t(aBlock value: (contents at: rowNumber at: j))\r\t\t\tifFalse: [ columnNames add: columnName ]].\r\tcontents removeColumnsOfRowElementsSatisfing: aBlock onRow: rowNumber.\r\t\r\tself numberOfColumns = 0 ifTrue: [ rowNames removeAll ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '626' ],		#self : OmReference [ '627' ],		#time : DateAndTime [ '2021-01-25T09:51:19.171161-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeColumnsOfRowElementsSatisfing:onRowNamed:',			#protocol : #removing,			#sourceCode : 'removeColumnsOfRowElementsSatisfing: aBlock onRowNamed: rowName\r\r\t| index |\r\tindex := self indexOfRowNamed: rowName.\r\tself removeColumnsOfRowElementsSatisfing: aBlock onRow: index.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '627' ],		#self : OmReference [ '628' ],		#time : DateAndTime [ '2021-01-25T09:51:19.171308-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeColumnsWithNilsAtRow:',			#protocol : #removing,			#sourceCode : 'removeColumnsWithNilsAtRow: rowNumber\r\tself removeColumnsOfRowElementsSatisfing: [ :ele | ele isNil ] onRow: rowNumber.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '628' ],		#self : OmReference [ '629' ],		#time : DateAndTime [ '2021-01-25T09:51:19.171448-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeColumnsWithNilsAtRowNamed:',			#protocol : #removing,			#sourceCode : 'removeColumnsWithNilsAtRowNamed: rowName\r\tself removeColumnsOfRowElementsSatisfing: [ :ele | ele isNil ] onRowNamed: rowName.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '629' ],		#self : OmReference [ '630' ],		#time : DateAndTime [ '2021-01-25T09:51:19.1716-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeRow:',			#protocol : #removing,			#sourceCode : 'removeRow: rowName\r\r\t| index |\r\tindex := self indexOfRowNamed: rowName.\r\tself removeRowAt: index.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '630' ],		#self : OmReference [ '631' ],		#time : DateAndTime [ '2021-01-25T09:51:19.171771-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeRowAt:',			#protocol : #removing,			#sourceCode : 'removeRowAt: rowNumber\r\t(rowNumber < 1 or: [ rowNumber > self numberOfRows ])\r\t\tifTrue: [ SubscriptOutOfBounds signalFor: rowNumber ].\r\t\t\r\tcontents removeRowAt: rowNumber.\r\trowNames := rowNames copyWithoutIndex: rowNumber.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '631' ],		#self : OmReference [ '632' ],		#time : DateAndTime [ '2021-01-25T09:51:19.171912-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeRows:',			#protocol : #removing,			#sourceCode : 'removeRows: aCollectionOfRowNames\r\taCollectionOfRowNames do: [ :each |\r\t\tself removeRow: each ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '632' ],		#self : OmReference [ '633' ],		#time : DateAndTime [ '2021-01-25T09:51:19.172058-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeRowsAt:',			#protocol : #removing,			#sourceCode : 'removeRowsAt: aCollectionOfRowIndices\r\t| rowNamesToRemove |\r\trowNamesToRemove := aCollectionOfRowIndices collect: [ :i |\r\t\trowNames at: i ].\r\tself removeRows: rowNamesToRemove',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '633' ],		#self : OmReference [ '634' ],		#time : DateAndTime [ '2021-01-25T09:51:19.172222-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeRowsOfColumnElementsSatisfing:onColumn:',			#protocol : #removing,			#sourceCode : 'removeRowsOfColumnElementsSatisfing: aBlock onColumn: columnNumber\r\t\r\t| rowNamesCopy |\r\t(columnNumber < 1 or: [ columnNumber > self numberOfColumns ])\r\t\tifTrue: [ SubscriptOutOfBounds signalFor: columnNumber ].\r\r\trowNamesCopy := rowNames deepCopy.\r\trowNames removeAll.\r\trowNamesCopy withIndexDo: [ :rowName :i |\r\t\t(aBlock value: (contents at: i at: columnNumber))\r\t\t\tifFalse: [ rowNames add: rowName ] ].\r\tcontents removeRowsOfColumnElementsSatisfing: aBlock onColumn: columnNumber.\r\t\r\tself numberOfRows = 0 ifTrue: [ columnNames removeAll ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '634' ],		#self : OmReference [ '635' ],		#time : DateAndTime [ '2021-01-25T09:51:19.17237-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeRowsOfColumnElementsSatisfing:onColumnNamed:',			#protocol : #removing,			#sourceCode : 'removeRowsOfColumnElementsSatisfing: aBlock onColumnNamed: columnName\r\r\t| index |\r\tindex := self indexOfColumnNamed: columnName.\r\tself removeRowsOfColumnElementsSatisfing: aBlock onColumn: index.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '635' ],		#self : OmReference [ '636' ],		#time : DateAndTime [ '2021-01-25T09:51:19.172569-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeRowsWithNilsAtColumn:',			#protocol : #removing,			#sourceCode : 'removeRowsWithNilsAtColumn: columnNumber\r\tself removeRowsOfColumnElementsSatisfing: [ :ele | ele isNil ] onColumn: columnNumber.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '636' ],		#self : OmReference [ '637' ],		#time : DateAndTime [ '2021-01-25T09:51:19.17272-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'removeRowsWithNilsAtColumnNamed:',			#protocol : #removing,			#sourceCode : 'removeRowsWithNilsAtColumnNamed: columnName\r\tself removeRowsOfColumnElementsSatisfing: [ :ele | ele isNil ] onColumnNamed: columnName.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '637' ],		#self : OmReference [ '638' ],		#time : DateAndTime [ '2021-01-25T09:51:19.172864-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'renameColumn:to:',			#protocol : #renaming,			#sourceCode : 'renameColumn: oldName to: newName\r\t"Find a column with oldName and rename it to newName"\r\t| index |\r\tindex := self indexOfColumnNamed: oldName.\r\tself columnNames at: index put: newName.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '638' ],		#self : OmReference [ '639' ],		#time : DateAndTime [ '2021-01-25T09:51:19.173134-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'renameRow:to:',			#protocol : #renaming,			#sourceCode : 'renameRow: oldName to: newName\r\t"Find a row with oldName and rename it to newName"\r\t| index |\r\tindex := self indexOfRowNamed: oldName.\r\tself rowNames at: index put: newName.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '639' ],		#self : OmReference [ '640' ],		#time : DateAndTime [ '2021-01-25T09:51:19.173401-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'rightJoin:',			#protocol : #splitjoin,			#sourceCode : 'rightJoin: aDataFrame\r\t"Performs right join on aDataFrame with rowNames as keys"\r\r\t| outputDf commonRows |\r\t\r\toutputDf := self class withColumnNames: (self getJointColumnsWith: aDataFrame).\r\tcommonRows := self rowNames intersection: aDataFrame rowNames.\r\t\r\taDataFrame rowNames do: [ :rowName | \r\t\t| rowToAdd |\r\t\trowToAdd := (commonRows includes: rowName)\r\t\t\tifTrue: [ (self row: rowName) asArray , (aDataFrame row: rowName) asArray ]\r\t\t\tifFalse: [ (Array new: self columnNames size) , (aDataFrame row: rowName) asArray ].\r\t\toutputDf addRow: rowToAdd named: rowName ].\r\t\r\t^ outputDf',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '640' ],		#self : OmReference [ '641' ],		#time : DateAndTime [ '2021-01-25T09:51:19.173569-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'rightJoin:on:',			#protocol : #splitjoin,			#sourceCode : 'rightJoin: aDataFrame on: aColumnName\r\t"Right join of self with aDataFrame on a column that has a name aColumnName in both data frames"\r\t^ self rightJoin: aDataFrame onLeft: aColumnName onRight: aColumnName',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '641' ],		#self : OmReference [ '642' ],		#time : DateAndTime [ '2021-01-25T09:51:19.173779-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'rightJoin:onLeft:onRight:',			#protocol : #splitjoin,			#sourceCode : 'rightJoin: aDataFrame onLeft: leftColumn onRight: rightColumn\r\t"Performs right join on aDataFrame with rowNames as keys.\r\t rowNames are not preserved.\r\t Duplicate column names will be appended with \'_x\' and \'_y\'."\r\r\t| outputDf commonRows leftNils |\r\t\r\toutputDf := self class withColumnNames: (self getJointColumnsWith: aDataFrame).\r\t\r\tcommonRows := (self column: leftColumn) asArray intersection: (aDataFrame column: rightColumn) asArray.\r\t\r\t1 to: aDataFrame size do: [ :rowIndex |\r\t\t| rowToAdd rowsWithSameKey |\r\t\t(commonRows includes: (aDataFrame at: rowIndex at: (aDataFrame indexOfColumnNamed: rightColumn)))\r\t\tifTrue: [ \r\t\t\t"Row present in both df - append rows and add to outputDf"\r\t\t\trowsWithSameKey := self findAllIndicesOf: (aDataFrame at: rowIndex at: (aDataFrame indexOfColumnNamed: rightColumn)) atColumn: leftColumn.\r\t\t\trowsWithSameKey do: [ :leftRow |\r\t\t\t\trowToAdd := (self rowAt: leftRow) asArray, (aDataFrame rowAt: rowIndex) asArray.\r\t\t\t\toutputDf addRow: rowToAdd named: (outputDf size + 1).\r\t\t\t\t]\r\t\t\t]\r\t\tifFalse: [\r\t\t\t"Row present in right-only - construct row and append"\r\t\t\tleftNils := self columnNames collect: [ :col |\r\t\t\t\tcol = rightColumn\r\t\t\t\t\tifTrue: [ (aDataFrame rowAt: rowIndex) at: rightColumn ]\r\t\t\t\t\tifFalse: [ nil ] ].\r\t\t\trowToAdd := leftNils, (aDataFrame rowAt: rowIndex) asArray.\r\t\t\toutputDf addRow: rowToAdd named: (outputDf size + 1).\r\t\t\t].\r\t\t].\r\t\r\t"Since Key is common, remove duplicate key column if it is of same name"\r\t(leftColumn = rightColumn) ifTrue: [\r\t\toutputDf removeColumn: (rightColumn, \'_y\').\r\t\toutputDf renameColumn: (leftColumn, \'_x\') to: leftColumn.\r\t\t].\r\t\r\t^ outputDf',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '642' ],		#self : OmReference [ '643' ],		#time : DateAndTime [ '2021-01-25T09:51:19.173931-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'row:',			#protocol : #accessing,			#sourceCode : 'row: rowName\r\t"Answer the row with rowName as a DataSeries or signal an exception if a row with that name was not found"\r\t| index |\r\tindex := self indexOfRowNamed: rowName.\r\t^ self rowAt: index',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '643' ],		#self : OmReference [ '644' ],		#time : DateAndTime [ '2021-01-25T09:51:19.174085-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'row:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'row: rowName ifAbsent: exceptionBlock\r\t"Answer the row with rowName as a DataSeries or evaluate exception block if a row with that name was not found"\r\t| index |\r\tindex := self\r\t\tindexOfRowNamed: rowName\r\t\tifAbsent: [ ^ exceptionBlock value ].\r\t\t\r\t^ self rowAt: index',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '644' ],		#self : OmReference [ '645' ],		#time : DateAndTime [ '2021-01-25T09:51:19.174237-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'row:put:',			#protocol : #accessing,			#sourceCode : 'row: rowName put: anArray\r\t"Replace the current values of row with rowName with anArray or signal an exception if a row with that name was not found"\r\t| index |\r\tindex := self indexOfRowNamed: rowName.\r\t^ self rowAt: index put: anArray.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '645' ],		#self : OmReference [ '646' ],		#time : DateAndTime [ '2021-01-25T09:51:19.174391-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'row:put:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'row: rowName put: anArray ifAbsent: exceptionBlock\r\t"Replace the current values of row with rowName with anArray or evaluate exception block if a row with that name was not found"\r\t| index |\r\tindex := self\r\t\tindexOfRowNamed: rowName\r\t\tifAbsent: [ ^ exceptionBlock value ].\r\t\t\r\t^ self rowAt: index put: anArray',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '646' ],		#self : OmReference [ '647' ],		#time : DateAndTime [ '2021-01-25T09:51:19.174541-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'row:transform:',			#protocol : #accessing,			#sourceCode : 'row: rowName transform: aBlock\r\t"Evaluate aBlock on the row with rowName and replace row with the result. Signal an exception if rowName was not found"\r\t| row |\r\trow := self row: rowName.\r\tself row: rowName put: (aBlock value: row) asArray',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '647' ],		#self : OmReference [ '648' ],		#time : DateAndTime [ '2021-01-25T09:51:19.174699-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'row:transform:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'row: rowName transform: aBlock ifAbsent: exceptionBlock\r\t"Evaluate aBlock on the row with rowName and replace row with the result. Evaluate exceptionBlock if rowName was not found"\r\t| row |\r\trow := self row: rowName ifAbsent: [ ^ exceptionBlock value ].\r\tself row: rowName put: (aBlock value: row)',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '648' ],		#self : OmReference [ '649' ],		#time : DateAndTime [ '2021-01-25T09:51:19.174934-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'rowAt:',			#protocol : #accessing,			#sourceCode : 'rowAt: aNumber\r\r\t| series |\r\tseries := (contents rowAt: aNumber) asDataSeries.\r\tseries name: (self rowNames at: aNumber).\r\tseries keys: self columnNames.\r\t^ series',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '649' ],		#self : OmReference [ '650' ],		#time : DateAndTime [ '2021-01-25T09:51:19.175088-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'rowAt:put:',			#protocol : #accessing,			#sourceCode : 'rowAt: aNumber put: anArray\r\r\tanArray size = self numberOfColumns\r\t\tifFalse: [ SizeMismatch signal ].\r\t\t\r\tcontents rowAt: aNumber put: anArray.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '650' ],		#self : OmReference [ '651' ],		#time : DateAndTime [ '2021-01-25T09:51:19.175237-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'rowAt:transform:',			#protocol : #accessing,			#sourceCode : 'rowAt: aNumber transform: aBlock\r\t"Evaluate aBlock on the row at aNumber and replace that row with the result"\r\t| row |\r\trow := self rowAt: aNumber.\r\tself rowAt: aNumber put: (aBlock value: row) asArray',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '651' ],		#self : OmReference [ '652' ],		#time : DateAndTime [ '2021-01-25T09:51:19.175376-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #rowNames,			#protocol : #accessing,			#sourceCode : 'rowNames\r\r\t^ rowNames',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '652' ],		#self : OmReference [ '653' ],		#time : DateAndTime [ '2021-01-25T09:51:19.175528-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'rowNames:',			#protocol : #accessing,			#sourceCode : 'rowNames: anArray\r\tanArray size = self numberOfRows \r\t\tifFalse: [ SizeMismatch signal: \'Wrong number of row names\' ].\r\t\t\r\tanArray asSet size = anArray size\r\t\tifFalse: [ Error signal: \'All row names must be distinct\' ].\r\t\t\r\trowNames := anArray asOrderedCollection',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '653' ],		#self : OmReference [ '654' ],		#time : DateAndTime [ '2021-01-25T09:51:19.175674-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'rows:',			#protocol : #accessing,			#sourceCode : 'rows: anArrayOfNames\r\t\r\t| anArrayOfNumbers |\r\t\r\tanArrayOfNumbers := anArrayOfNames\r\t\tcollect: [ :name |\r\t\t\tself indexOfRowNamed: name ].\r\t\t\t\r\t^ self rowsAt: anArrayOfNumbers.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '654' ],		#self : OmReference [ '655' ],		#time : DateAndTime [ '2021-01-25T09:51:19.175819-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'rows:put:',			#protocol : #accessing,			#sourceCode : 'rows: anArrayOfRowNames put: anArrayOfArrays\r\t\r\tanArrayOfArrays size = anArrayOfRowNames size\r\t\tifFalse: [ SizeMismatch signal ].\t\r\t\r\tanArrayOfRowNames with: anArrayOfArrays do: [ :name :array |\r\t\tself row: name put: array ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '655' ],		#self : OmReference [ '656' ],		#time : DateAndTime [ '2021-01-25T09:51:19.175973-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'rowsAt:',			#protocol : #accessing,			#sourceCode : 'rowsAt: anArrayOfNumbers\r\r\t| newRowNames |\r\t\r\tnewRowNames := (anArrayOfNumbers collect: [ :i |\r\t\tself rowNames at: i ]).\r\r\t^ DataFrame\r\t\twithDataFrameInternal: (self contents rowsAt: anArrayOfNumbers)\r\t\trowNames: newRowNames\r\t\tcolumnNames: self columnNames.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '656' ],		#self : OmReference [ '657' ],		#time : DateAndTime [ '2021-01-25T09:51:19.17612-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'rowsAt:put:',			#protocol : #accessing,			#sourceCode : 'rowsAt: anArrayOfNumbers put: anArrayOfArrays\r\t\r\tanArrayOfArrays size = anArrayOfNumbers size\r\t\tifFalse: [ SizeMismatch signal ].\t\r\t\r\tanArrayOfNumbers with: anArrayOfArrays do: [ :index :array |\r\t\tself rowAt: index put: array ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '657' ],		#self : OmReference [ '658' ],		#time : DateAndTime [ '2021-01-25T09:51:19.176296-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'rowsFrom:to:',			#protocol : #accessing,			#sourceCode : 'rowsFrom: begin to: end\r\r\t^ self rowsAt: (begin to: end).',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '658' ],		#self : OmReference [ '659' ],		#time : DateAndTime [ '2021-01-25T09:51:19.176471-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'rowsFrom:to:put:',			#protocol : #accessing,			#sourceCode : 'rowsFrom: firstNumber to: secondNumber put: anArrayOfArrays\r\r\t| interval |\r\t\r\tanArrayOfArrays size = ((firstNumber - secondNumber) abs + 1)\r\t\tifFalse: [ SizeMismatch signal ].\t\r\t\t\t\r\tinterval := secondNumber >= firstNumber\r\t\tifTrue: [ (firstNumber to: secondNumber) ]\r\t\tifFalse: [ (secondNumber to: firstNumber) reversed ].\r\t\r\tinterval withIndexDo: [ :rowIndex :i |\r\t\tself rowAt: rowIndex put: (anArrayOfArrays at: i) ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '659' ],		#self : OmReference [ '660' ],		#time : DateAndTime [ '2021-01-25T09:51:19.176654-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'select:',			#protocol : #enumerating,			#sourceCode : 'select: aBlock \r\t"Evaluate aBlock with each of the receiver\'s elements as the argument. \r\tCollect into a new collection like the receiver, only those elements for \r\twhich aBlock evaluates to true. Answer the new collection."\r\r\t| rows selectedRows selectedRowNames selectedColumnNames selectedRowsAsArrays df |\r\t\r\trows := self asArrayOfRows.\r\tselectedRows := rows select: aBlock.\r\tselectedRowNames := (selectedRows isEmpty)\r\t\tifTrue: [ #() ] ifFalse: [ selectedRows collect: #name ].\r\tselectedColumnNames := (selectedRows isEmpty)\r\t\tifTrue: [ #() ] ifFalse: [ self columnNames ].\r\tselectedRowsAsArrays := selectedRows collect: #asArray.\r\t\r\tdf := self class\r\t\twithRows: selectedRowsAsArrays\r\t\trowNames: selectedRowNames\r\t\tcolumnNames: selectedColumnNames.\r\t\r\t^ df',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '660' ],		#self : OmReference [ '661' ],		#time : DateAndTime [ '2021-01-25T09:51:19.176837-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #setDefaultRowColumnNames,			#protocol : #private,			#sourceCode : 'setDefaultRowColumnNames\r\r\tself rowNames: (1 to: self numberOfRows).\r\tself columnNames: (1 to: self numberOfColumns).',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '661' ],		#self : OmReference [ '662' ],		#time : DateAndTime [ '2021-01-25T09:51:19.177091-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'showWithGlamourIn:',			#protocol : #gt-inspector-extension,			#sourceCode : 'showWithGlamourIn: composite\r\t| table headerNames |\r\ttable := FTTableMorph new.\r\t"extent: 650@500"\r\ttable\r\t\tbeResizable;\r\t\tintercellSpacing: 1;\r\t\tdataSource: (DataFrameFTData elements: self);\r\t\tonAnnouncement: FTSelectionChanged\r\t\t\tdo: [ :ann | (self rowAt: ann newSelectedIndexes first) inspect ].\r\r\t"\t\tonAnnouncement: FTSelectionChanged \r\t\t\tdo: [ :ann | (self rowsAt: ann newSelectedRowIndexes) gtInspectorItemsIn: composite ];"\r\theaderNames := #(\'#\') , self columnNames.\r\ttable\r\t\tcolumns: (headerNames collect: [ :name | (FTColumn id: name) width: 100 ]).\r\t^ table',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '662' ],		#self : OmReference [ '663' ],		#time : DateAndTime [ '2021-01-25T09:51:19.177275-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #size,			#protocol : #accessing,			#sourceCode : 'size\r\t^ self numberOfRows',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '663' ],		#self : OmReference [ '664' ],		#time : DateAndTime [ '2021-01-25T09:51:19.177461-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'sortBy:',			#protocol : #sorting,			#sourceCode : 'sortBy: columnName\r\tself sortBy: columnName using: [ :a :b | a <= b ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '664' ],		#self : OmReference [ '665' ],		#time : DateAndTime [ '2021-01-25T09:51:19.177636-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'sortBy:using:',			#protocol : #sorting,			#sourceCode : 'sortBy: columnName using: aBlock\r\r\t| column sortedKeys newContents |\r\tcolumn := self column: columnName.\r\tcolumn := column copy.\r\tcolumn sort: aBlock.\r\tsortedKeys := column keys.\r\t\r\tnewContents := DataFrameInternal new: self dimensions.\r\t\r\tsortedKeys withIndexDo: [ :key :i |\r\t\tnewContents rowAt: i put: (self row: key) asArray ].\r\t\t\r\tcontents := newContents.\r\tself rowNames: sortedKeys.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '665' ],		#self : OmReference [ '666' ],		#time : DateAndTime [ '2021-01-25T09:51:19.177802-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'sortDescendingBy:',			#protocol : #sorting,			#sourceCode : 'sortDescendingBy: columnName\r\tself sortBy: columnName using: [ :a :b | a >= b ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '666' ],		#self : OmReference [ '667' ],		#time : DateAndTime [ '2021-01-25T09:51:19.177957-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #stdev,			#protocol : #statistics,			#sourceCode : 'stdev\r\r\t^ self applyToAllColumns: #stdev',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '667' ],		#self : OmReference [ '668' ],		#time : DateAndTime [ '2021-01-25T09:51:19.178132-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #tail,			#protocol : #accessing,			#sourceCode : 'tail\r\r\t^ self tail: self defaultHeadTailSize.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '668' ],		#self : OmReference [ '669' ],		#time : DateAndTime [ '2021-01-25T09:51:19.178301-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'tail:',			#protocol : #accessing,			#sourceCode : 'tail: aNumber\r\r\t| n rows |\r\t\r\trows := self numberOfRows.\r\t\r\trows > aNumber\r\t\tifTrue: [ n := aNumber ]\r\t\tifFalse: [ n := rows ].\r\t\t\t\r\t^ self rowsAt: ((rows - n + 1) to: rows).',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '669' ],		#self : OmReference [ '670' ],		#time : DateAndTime [ '2021-01-25T09:51:19.178456-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #thirdQuartile,			#protocol : #statistics,			#sourceCode : 'thirdQuartile\r\r\t^ self applyToAllColumns: #thirdQuartile',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '670' ],		#self : OmReference [ '671' ],		#time : DateAndTime [ '2021-01-25T09:51:19.178616-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'toColumn:applyElementwise:',			#protocol : #applying,			#sourceCode : 'toColumn: columnName applyElementwise: aBlock\r\t| column |\r\tcolumn := (self column: columnName) asArray.\r\tcolumn := column collect: [ :each | aBlock value: each ].\r\tself column: columnName put: column asArray.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '671' ],		#self : OmReference [ '672' ],		#time : DateAndTime [ '2021-01-25T09:51:19.178781-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'toColumnAt:applyElementwise:',			#protocol : #applying,			#sourceCode : 'toColumnAt: columnNumber applyElementwise: aBlock\r\t| columnName |\r\tcolumnName := self columnNames at: columnNumber.\r\t^ self toColumn: columnName applyElementwise: aBlock.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '672' ],		#self : OmReference [ '673' ],		#time : DateAndTime [ '2021-01-25T09:51:19.178939-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'toColumns:applyElementwise:',			#protocol : #applying,			#sourceCode : 'toColumns: arrayOfColumnNames applyElementwise: aBlock\r\t\t\r\tarrayOfColumnNames do: [ :each |\r\t\tself toColumn: each applyElementwise: aBlock ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '673' ],		#self : OmReference [ '674' ],		#time : DateAndTime [ '2021-01-25T09:51:19.1791-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'toColumnsAt:applyElementwise:',			#protocol : #applying,			#sourceCode : 'toColumnsAt: arrayOfColumnNumbers applyElementwise: aBlock\r\t\t\r\tarrayOfColumnNumbers do: [ :each |\r\t\tself toColumnAt: each applyElementwise: aBlock ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '674' ],		#self : OmReference [ '675' ],		#time : DateAndTime [ '2021-01-25T09:51:19.179291-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #transposed,			#protocol : #geometry,			#sourceCode : 'transposed\r\t"Returs a transposed DataFrame. Columns become rows and rows become columns."\r\r\t| transposedDf |\r\ttransposedDf := DataFrame withRows: (self asArrayOfColumns).\r\ttransposedDf rowNames: self columnNames.\r\ttransposedDf columnNames: self rowNames.\r\t^ transposedDf',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '675' ],		#self : OmReference [ '676' ],		#time : DateAndTime [ '2021-01-25T09:51:19.179449-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #variance,			#protocol : #statistics,			#sourceCode : 'variance\r\r\t^ self applyToAllColumns: #variance',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '676' ],		#self : OmReference [ '677' ],		#time : DateAndTime [ '2021-01-25T09:51:19.179639-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'withIndexCollect:',			#protocol : #enumerating,			#sourceCode : 'withIndexCollect: elementAndIndexBlock\r\t"Overrides withIndexCollect: to create DataFrame with the same number of columns as values in the first row"\r\t| firstRow newDataFrame |\r\t\r\tfirstRow := (self rowAt: 1) copy.\r\tnewDataFrame := self class new: 0@(elementAndIndexBlock value: firstRow value: 1) size.\r\tnewDataFrame columnNames: firstRow keys.\r\t\r\tself withIndexDo: [ :each :index | newDataFrame add: (elementAndIndexBlock value: each copy value: index)].\r\t^ newDataFrame',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '677' ],		#self : OmReference [ '678' ],		#time : DateAndTime [ '2021-01-25T09:51:19.179808-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'withIndexDo:',			#protocol : #enumerating,			#sourceCode : 'withIndexDo: elementAndIndexBlock\r\r\t1 to: self size do: [ :i |\r\t\t| row |\r\t\trow := (self rowAt: i).\r\t\telementAndIndexBlock value: row value: i.\r\t\t\t\r\t\t"A hack to allow modification of rows inside do block"\r\t\tself rowAt: i put: row asArray ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '678' ],		#self : OmReference [ '679' ],		#time : DateAndTime [ '2021-01-25T09:51:19.179977-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'withIndexReject:',			#protocol : #enumerating,			#sourceCode : 'withIndexReject: elementAndIndexBlock \r\t"Evaluate aBlock with each of the receiver\'s elements and index as the arguments. \r\tCollect into a new collection like the receiver, only those elements for \r\twhich aBlock evaluates to false. Answer the new collection."\r\t^ self withIndexSelect: [ :row :index | (elementAndIndexBlock value: row value: index) not ]',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '679' ],		#self : OmReference [ '680' ],		#time : DateAndTime [ '2021-01-25T09:51:19.180166-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'withIndexSelect:',			#protocol : #enumerating,			#sourceCode : 'withIndexSelect: elementAndIndexBlock \r\t"Evaluate aBlock with each of the receiver\'s elements and index as the arguments. \r\tCollect into a new collection like the receiver, only those elements for \r\twhich aBlock evaluates to true. Answer the new collection."\r\r\t| rows selectedRowIndices selectedRowNames selectedRowsAsArrays df |\r\t\r\trows := self asArrayOfRows.\r\tselectedRowIndices := (1 to: rows size) select: [ :i |\r\t\telementAndIndexBlock value: (rows at: i) value: i ].\r\tselectedRowNames := selectedRowIndices collect: [ :i | self rowNames at: i ].\r\tselectedRowsAsArrays := selectedRowIndices collect: [ :i | (rows at: i) asArray ].\r\t\r\tdf := self class\r\t\twithRows: selectedRowsAsArrays\r\t\trowNames: selectedRowNames\r\t\tcolumnNames: self columnNames.\r\t\r\t^ df',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '680' ],		#self : OmReference [ '681' ],		#time : DateAndTime [ '2021-01-25T09:51:19.180337-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrameInternal class',				#isMetaSide : true			},			#name : #'fromArray2D:',			#protocol : #'instance creation',			#sourceCode : 'fromArray2D: anArray2D\r\r\t| dfInternal |\r\t\r\t"We can\'t use Array2D>>extent, because it gives us col@row instead of row@col"\r\tdfInternal := self new:\r\t\t(anArray2D rowCount @ anArray2D columnCount).\r\t\r\tanArray2D withIndicesDo: [ :each :i :j |\r\t\tdfInternal at: i at: j put: each ].\r\t\r\t^ dfInternal',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '681' ],		#self : OmReference [ '682' ],		#time : DateAndTime [ '2021-01-25T09:51:19.180486-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrameInternal class',				#isMetaSide : true			},			#name : #'new:',			#protocol : #'instance creation',			#sourceCode : 'new: aPoint\r\r\t^ self new initialize: aPoint',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '682' ],		#self : OmReference [ '683' ],		#time : DateAndTime [ '2021-01-25T09:51:19.181774-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrameInternal class',				#isMetaSide : true			},			#name : #'withColumns:',			#protocol : #'instance creation',			#sourceCode : 'withColumns: anArrayOfArrays\r\t\r\t| numberOfRows numberOfColumns dfInternal |\r\t\r\tnumberOfColumns := anArrayOfArrays size.\r\tnumberOfRows := 0.\r\t1 to: numberOfColumns do: [ :index |\r\t\tnumberOfRows := numberOfRows max: (anArrayOfArrays at: index) size\r\t\t].\r\tdfInternal := self new: (numberOfRows @ numberOfColumns ).\r\t\r\t1 to: numberOfRows do: [ :i |\r\t\t1 to: numberOfColumns do: [ :j |\r\t\t\tdfInternal at: i at: j\r\t\t\t\tput: ((anArrayOfArrays at: j) asArray at: i ifAbsent: nil) ] ].\r\t\t\r\t^ dfInternal',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '683' ],		#self : OmReference [ '684' ],		#time : DateAndTime [ '2021-01-25T09:51:19.181999-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrameInternal class',				#isMetaSide : true			},			#name : #'withRows:',			#protocol : #'instance creation',			#sourceCode : 'withRows: anArrayOfArrays\r\r\t| numberOfRows numberOfColumns dfInternal |\r\t\r\tnumberOfRows := anArrayOfArrays size.\r\tnumberOfColumns := 0.\r\t1 to: numberOfRows do: [ :index |\r\t\tnumberOfColumns := numberOfColumns max: (anArrayOfArrays at: index) size\r\t\t].\r\tdfInternal := self new: numberOfRows @ numberOfColumns.\r\t\r\t1 to: numberOfRows do: [ :i | \r\t\t1 to: numberOfColumns do: [ :j | \r\t\t\tdfInternal at: i at: j\r\t\t\t\tput: ((anArrayOfArrays at: i) asArray at: j ifAbsent: nil) ] ].\r\t\r\t^ dfInternal',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '684' ],		#self : OmReference [ '685' ],		#time : DateAndTime [ '2021-01-25T09:51:19.182193-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= other\r\r\t((other class == self class)\r\t\tand: [ other numberOfRows = self numberOfRows \r\t\tand: [ other numberOfColumns = self numberOfColumns]])\r\t\tifFalse: [ ^ false ].\r\t\t\r\tother withIndicesDo: [ :each :i :j |\r\t\t(self at: i at: j) = each\r\t\t\tifFalse: [ ^ false ] ].\r\t\t\r\t^ true.\r\r\t\r\t',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '685' ],		#self : OmReference [ '686' ],		#time : DateAndTime [ '2021-01-25T09:51:19.182411-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'addColumn:atPosition:',			#protocol : #adding,			#sourceCode : 'addColumn: anArray atPosition: aNumber\r\r\t| rows cols newContents |\r\t\r\trows := self numberOfRows.\r\tcols := self numberOfColumns + 1.\r\t\r\tanArray size = rows\r\t\tifFalse: [ SizeMismatch signal ].\r\t\r\tnewContents := Array2D\r\t\trows: rows\r\t\tcolumns: cols.\r\t\r\t1 to: rows do: [ :i |\r\t\t1 to: aNumber - 1 do: [ :j |\r\t\t\tnewContents at: i at: j put:\r\t\t\t\t(self at: i at: j) ] ].\r\t\r\t1 to: rows do: [ :i |\r\t\tnewContents at: i at: aNumber\r\t\t\tput: (anArray at: i) ].\r\t\t\r\t1 to: rows do: [ :i |\r\t\taNumber + 1 to: cols do: [ :j |\r\t\t\tnewContents at: i at: j put:\r\t\t\t\t(self at: i at: j - 1) ] ].\r\t\r\tcontents := newContents.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '686' ],		#self : OmReference [ '687' ],		#time : DateAndTime [ '2021-01-25T09:51:19.182587-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'addRow:atPosition:',			#protocol : #adding,			#sourceCode : 'addRow: anArray atPosition: aNumber\r\r\t| rows cols newContents |\r\t\r\trows := self numberOfRows + 1.\r\tcols := self numberOfColumns.\r\t\r\tanArray size = cols\r\t\tifFalse: [ SizeMismatch signal ].\r\t\r\tnewContents := Array2D\r\t\trows: rows\r\t\tcolumns: cols.\r\t\r\t1 to: aNumber - 1 do: [ :i |\r\t\t1 to: cols do: [ :j |\r\t\t\tnewContents at: i at: j put:\r\t\t\t\t(self at: i at: j) ] ].\r\t\r\t1 to: cols do: [ :j |\r\t\tnewContents at: aNumber at: j\r\t\t\tput: (anArray at: j) ].\r\t\t\r\taNumber + 1 to: rows do: [ :i |\r\t\t1 to: cols do: [ :j |\r\t\t\tnewContents at: i at: j put:\r\t\t\t\t(self at: i - 1 at: j) ] ].\r\t\r\tcontents := newContents.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '687' ],		#self : OmReference [ '688' ],		#time : DateAndTime [ '2021-01-25T09:51:19.182725-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #asArray2D,			#protocol : #converting,			#sourceCode : 'asArray2D\r\t^ contents',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '688' ],		#self : OmReference [ '689' ],		#time : DateAndTime [ '2021-01-25T09:51:19.182876-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #asArrayOfColumns,			#protocol : #converting,			#sourceCode : 'asArrayOfColumns\r\t"Converts DataFrameInternal to the array of columns"\r\r\t^ (1 to: self numberOfColumns) collect: [ :j |\r\t\t(1 to: self numberOfRows) collect: [ :i |\r\t\t\tself at: i at: j ] ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '689' ],		#self : OmReference [ '690' ],		#time : DateAndTime [ '2021-01-25T09:51:19.183047-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #asArrayOfRows,			#protocol : #converting,			#sourceCode : 'asArrayOfRows\r\t"Converts DataFrameInternal to the array of rows"\r\r\t^ (1 to: self numberOfRows) collect: [ :i |\r\t\t(1 to: self numberOfColumns) collect: [ :j |\r\t\t\tself at: i at: j ] ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '690' ],		#self : OmReference [ '691' ],		#time : DateAndTime [ '2021-01-25T09:51:19.1832-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'at:at:',			#protocol : #accessing,			#sourceCode : 'at: rowIndex at: columnIndex\r\r\t^ contents at: rowIndex at: columnIndex.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '691' ],		#self : OmReference [ '692' ],		#time : DateAndTime [ '2021-01-25T09:51:19.18334-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'at:at:put:',			#protocol : #accessing,			#sourceCode : 'at: rowIndex at: columnIndex put: value\r\r\t^ contents at: rowIndex at: columnIndex put: value.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '692' ],		#self : OmReference [ '693' ],		#time : DateAndTime [ '2021-01-25T09:51:19.183482-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'collect:',			#protocol : #enumerating,			#sourceCode : 'collect: aBlock\r\r\t^ self class fromArray2D:\r\t\t(contents collect: aBlock).',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '693' ],		#self : OmReference [ '694' ],		#time : DateAndTime [ '2021-01-25T09:51:19.18375-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'columnAt:',			#protocol : #accessing,			#sourceCode : 'columnAt: aNumber\r\r\t^ (1 to: self numberOfRows) collect: [ :i |\r\t\tself at: i at: aNumber ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '694' ],		#self : OmReference [ '695' ],		#time : DateAndTime [ '2021-01-25T09:51:19.183908-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'columnAt:put:',			#protocol : #accessing,			#sourceCode : 'columnAt: aNumber put: anArray\r"Sets all the values of a given column equal to the values in array. It is assumed that array is of the same size as every column (number of rows). This should be tested in DataFrame"\r\r\t(1 to: self numberOfRows) do: [ :i |\r\t\tself at: i at: aNumber put: (anArray at: i) ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '695' ],		#self : OmReference [ '696' ],		#time : DateAndTime [ '2021-01-25T09:51:19.184062-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'columnsAt:',			#protocol : #accessing,			#sourceCode : 'columnsAt: anArrayOfNumbers\r\r\t| dfInternal numberOfRows numberOfColumns |\r\t\r\tnumberOfRows := self numberOfRows.\r\tnumberOfColumns := anArrayOfNumbers size.\r\tdfInternal := DataFrameInternal new: (numberOfRows @ numberOfColumns).\r\t\r\t1 to: numberOfRows do: [ :i |\r\t\tanArrayOfNumbers doWithIndex: [ :j :k |\r\t\t\tdfInternal at: i at: k put: (self at: i at: j) ] ].\r\t\r\t^ dfInternal.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '696' ],		#self : OmReference [ '697' ],		#time : DateAndTime [ '2021-01-25T09:51:19.184206-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #deepCopy,			#protocol : #copying,			#sourceCode : 'deepCopy\r\r\t^ self class fromArray2D: contents.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '697' ],		#self : OmReference [ '698' ],		#time : DateAndTime [ '2021-01-25T09:51:19.18437-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'do:',			#protocol : #enumerating,			#sourceCode : 'do: aBlock\r\r\t^ contents do: aBlock.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '698' ],		#self : OmReference [ '699' ],		#time : DateAndTime [ '2021-01-25T09:51:19.18453-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t\r\tsuper initialize.\r\tcontents := Array2D new.\r\t^ self.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '699' ],		#self : OmReference [ '700' ],		#time : DateAndTime [ '2021-01-25T09:51:19.184732-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'initialize:',			#protocol : #initialization,			#sourceCode : 'initialize: aPoint\r\t\r\tcontents := Array2D\r\t\trows: aPoint x\r\t\tcolumns: aPoint y.\r\t\t\r\t^ self.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '700' ],		#self : OmReference [ '701' ],		#time : DateAndTime [ '2021-01-25T09:51:19.184875-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #numberOfColumns,			#protocol : #accessing,			#sourceCode : 'numberOfColumns\r\r\tcontents numberOfColumns isNil\r\t\tifTrue: [ ^ 0 ].\r\t\t\r\t^ contents numberOfColumns.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '701' ],		#self : OmReference [ '702' ],		#time : DateAndTime [ '2021-01-25T09:51:19.185016-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #numberOfRows,			#protocol : #accessing,			#sourceCode : 'numberOfRows\r\r\tcontents numberOfRows isNil\r\t\tifTrue: [ ^ 0 ].\r\t\t\r\t^ contents numberOfRows.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '702' ],		#self : OmReference [ '703' ],		#time : DateAndTime [ '2021-01-25T09:51:19.185165-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\r\tcontents printOn: aStream.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '703' ],		#self : OmReference [ '704' ],		#time : DateAndTime [ '2021-01-25T09:51:19.185349-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'removeColumnAt:',			#protocol : #removing,			#sourceCode : 'removeColumnAt: columnNumber\r\r\t| newContents |\r\tnewContents := Array2D\r\t\trows: (self numberOfRows)\r\t\tcolumns: (self numberOfColumns - 1).\r\t\t\r\t1 to: self numberOfRows do: [ :i |\r\t\t1 to: columnNumber - 1 do: [ :j |\r\t\t\tnewContents at: i at: j put:\r\t\t\t\t(contents at: i at: j) ].\r\t\t\t\r\t\tcolumnNumber + 1 to: self numberOfColumns do: [ :j |\r\t\t\tnewContents at: i at: j - 1 put:\r\t\t\t\t(contents at: i at: j) ] ].\r\t\t\r\tcontents := newContents.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '704' ],		#self : OmReference [ '705' ],		#time : DateAndTime [ '2021-01-25T09:51:19.185534-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'removeColumnsOfRowElementsSatisfing:onRow:',			#protocol : #removing,			#sourceCode : 'removeColumnsOfRowElementsSatisfing: aBlock onRow: rowNumber\r\t"Executes aBlock for all elements in specified rowNumber and deletes the column\r\t which satisfied condition given in aBlock."\r\r\t| newContents columnsToDrop k |\r\t"columnsToDrop has 1 at i if i-th column needs to be dropped, else 0"\r\tcolumnsToDrop := (self rowAt: rowNumber) collect: [ :ele |\r\t\t(aBlock value: ele) ifTrue: [ true ] ifFalse: [ false ] ].\r\t\r\tnewContents := Array2D\r\t\trows: (self numberOfRows)\r\t\tcolumns: (self numberOfColumns - (columnsToDrop select: [ :ele | ele ]) size).\r\t\r\t(newContents numberOfColumns = 0) ifTrue: [ \r\t\tcontents := Array2D rows: 0 columns: 0.\r\t\t^ self.\r\t\t].\r\t\t\r\t1 to: self numberOfRows do: [ :i |\r\t\tk := 0.\r\t\t1 to: self numberOfColumns do: [ :j |\r\t\t\t(columnsToDrop at: j)\r\t\t\t\tifTrue: [ k := k + 1 ]\r\t\t\t\tifFalse: [\r\t\t\t\tnewContents at: i at: j - k put:\r\t\t\t\t\t(contents at: i at: j) ]]].\r\t\t\r\tcontents := newContents.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '705' ],		#self : OmReference [ '706' ],		#time : DateAndTime [ '2021-01-25T09:51:19.185692-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'removeRowAt:',			#protocol : #removing,			#sourceCode : 'removeRowAt: rowNumber\r\r\t| newContents |\r\tnewContents := Array2D\r\t\trows: (self numberOfRows - 1)\r\t\tcolumns: (self numberOfColumns).\r\t\t\r\t1 to: self numberOfColumns do: [ :j |\r\t\t1 to: rowNumber - 1 do: [ :i |\r\t\t\tnewContents at: i at: j put:\r\t\t\t\t(contents at: i at: j) ].\r\t\t\t\r\t\trowNumber + 1 to: self numberOfRows do: [ :i |\r\t\t\tnewContents at: i - 1 at: j put:\r\t\t\t\t(contents at: i at: j) ] ].\r\t\t\r\tcontents := newContents.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '706' ],		#self : OmReference [ '707' ],		#time : DateAndTime [ '2021-01-25T09:51:19.185898-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'removeRowsOfColumnElementsSatisfing:onColumn:',			#protocol : #removing,			#sourceCode : 'removeRowsOfColumnElementsSatisfing: aBlock onColumn: columnNumber\r\t"Removes all rows having a nil value at the column columnNumber"\r\r\t| newContents rowsToDrop k |\r\t"rowsToDrop has 1 at i if i-th row needs to be dropped, else 0"\r\trowsToDrop := (self columnAt: columnNumber) collect: [ :ele |\r\t\t(aBlock value: ele) ifTrue: [ true ] ifFalse: [ false ] ].\r\tnewContents := Array2D\r\t\trows: (self numberOfRows - (rowsToDrop select: [ :ele | ele ]) size)\r\t\tcolumns: (self numberOfColumns).\r\t\t\r\t(newContents numberOfRows = 0) ifTrue: [ \r\t\tcontents := Array2D rows: 0 columns: 0.\r\t\t^ self.\r\t\t].\r\t\r\t1 to: self numberOfColumns do: [ :j |\r\t\tk := 0.\r\t\t1 to: self numberOfRows do: [ :i |\r\t\t\t(rowsToDrop at: i)\r\t\t\t\tifTrue: [ k := k + 1 ]\r\t\t\t\tifFalse: [\r\t\t\t\tnewContents at: i - k at: j put:\r\t\t\t\t\t(contents at: i at: j) ]]].\r\t\t\r\tcontents := newContents.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '707' ],		#self : OmReference [ '708' ],		#time : DateAndTime [ '2021-01-25T09:51:19.186061-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'replaceMissingValuesStrings:',			#protocol : #filling,			#sourceCode : 'replaceMissingValuesStrings: aSet\r\t"Replaces dataframeinternal values with nil if they are a part of aSet"\r\r\t1 to: self numberOfRows do: [ :i |\r\t\t1 to: self numberOfColumns do: [ :j |\r\t\t\t(aSet includes: (contents at: i at: j))\r\t\t\t\tifTrue: [ contents at: i at: j put: nil ].\r\t\t\t ] ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '708' ],		#self : OmReference [ '709' ],		#time : DateAndTime [ '2021-01-25T09:51:19.186207-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'rowAt:',			#protocol : #accessing,			#sourceCode : 'rowAt: aNumber\r\r\t^ (1 to: self numberOfColumns) collect: [ :j |\r\t\tself at: aNumber at: j ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '709' ],		#self : OmReference [ '710' ],		#time : DateAndTime [ '2021-01-25T09:51:19.186361-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'rowAt:put:',			#protocol : #accessing,			#sourceCode : 'rowAt: aNumber put: anArray\r"Sets all the values of a given row equal to the values in array. It is assumed that array is of the same size as every row (number of columns). This should be tested in DataFrame"\r\r\t(1 to: self numberOfColumns) do: [ :j |\r\t\tself at: aNumber at: j put: (anArray at: j) ].',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '710' ],		#self : OmReference [ '711' ],		#time : DateAndTime [ '2021-01-25T09:51:19.186522-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'rowsAt:',			#protocol : #accessing,			#sourceCode : 'rowsAt: anArrayOfNumbers\r\r\t| dfInternal numberOfRows numberOfColumns |\r\t\r\tnumberOfRows := anArrayOfNumbers size.\r\tnumberOfColumns := self numberOfColumns.\r\tdfInternal := DataFrameInternal new: (numberOfRows @ numberOfColumns).\r\t\r\tanArrayOfNumbers doWithIndex: [ :i :k |\r\t\t1 to: numberOfColumns do: [ :j |\r\t\t\tdfInternal at: k at: j put: (self at: i at: j) ] ].\r\t\r\t^ dfInternal.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '711' ],		#self : OmReference [ '712' ],		#time : DateAndTime [ '2021-01-25T09:51:19.186664-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'withIndicesCollect:',			#protocol : #enumerating,			#sourceCode : 'withIndicesCollect: aBlock\r\r\t^ self class fromArray2D:\r\t\t(contents withIndicesCollect: aBlock).',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '712' ],		#self : OmReference [ '713' ],		#time : DateAndTime [ '2021-01-25T09:51:19.186805-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternal,				#isMetaSide : false			},			#name : #'withIndicesDo:',			#protocol : #enumerating,			#sourceCode : 'withIndicesDo: aBlock\r\r\t^ contents withIndicesDo: aBlock.',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '713' ],		#self : OmReference [ '714' ],		#time : DateAndTime [ '2021-01-25T09:51:19.190974-04:00' ],		#trigger : OmReference [ '403' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Behavior,				#isMetaSide : false			},			#name : #'inheritsFromOrEqualTo:',			#protocol : #'*DataFrame-Core-Base',			#sourceCode : 'inheritsFromOrEqualTo: aClass \r\t"Answer whether the argument, aClass, is equal to the receiver or belongs to its superclass chain."\r\r\t^ (self == aClass) or: (self inheritsFrom: aClass)',			#stamp : '',			#package : #DataFrame		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-01-25T09:51:19.423032-04:00' ],		#prior : OmReference [ '714' ],		#self : OmReference [ '715' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'DataFrame-Tests-CompatibleUserName.1607699955'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '715' ],		#self : OmReference [ '716' ],		#time : DateAndTime [ '2021-01-25T09:51:19.476247-04:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #DataFrame-Tests,		#affectedPackageName : #DataFrame-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '716' ],		#self : OmReference [ '717' ],		#time : DateAndTime [ '2021-01-25T09:51:19.478116-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #DataFrameAggrGroupTest\r\tinstanceVariableNames: \'df\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Tests\''			},			#name : #DataFrameAggrGroupTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameAggrGroupTest,						#isMetaSide : false					},					#name : #df,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameAggrGroupTest class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameAggrGroupTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameAggrGroupTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Tests,			#package : #DataFrame-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '717' ],		#self : OmReference [ '718' ],		#time : DateAndTime [ '2021-01-25T09:51:19.481648-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #DataFrameHeadTailTest\r\tinstanceVariableNames: \'df series\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Tests\''			},			#name : #DataFrameHeadTailTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameHeadTailTest,						#isMetaSide : false					},					#name : #df,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameHeadTailTest,						#isMetaSide : false					},					#name : #series,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameHeadTailTest class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameHeadTailTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameHeadTailTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Tests,			#package : #DataFrame-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '718' ],		#self : OmReference [ '719' ],		#time : DateAndTime [ '2021-01-25T09:51:19.485824-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #DataFrameInternalTest\r\tinstanceVariableNames: \'df\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Tests\''			},			#name : #DataFrameInternalTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameInternalTest,						#isMetaSide : false					},					#name : #df,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameInternalTest class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameInternalTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameInternalTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Tests,			#package : #DataFrame-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '719' ],		#self : OmReference [ '720' ],		#time : DateAndTime [ '2021-01-25T09:51:19.488417-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #DataFrameStatsTest\r\tinstanceVariableNames: \'df\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Tests\''			},			#name : #DataFrameStatsTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameStatsTest,						#isMetaSide : false					},					#name : #df,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameStatsTest class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameStatsTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameStatsTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Tests,			#package : #DataFrame-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '720' ],		#self : OmReference [ '721' ],		#time : DateAndTime [ '2021-01-25T09:51:19.490474-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #DataFrameTest\r\tinstanceVariableNames: \'df\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Tests\''			},			#name : #DataFrameTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameTest,						#isMetaSide : false					},					#name : #df,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameTest class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Tests,			#package : #DataFrame-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '721' ],		#self : OmReference [ '722' ],		#time : DateAndTime [ '2021-01-25T09:51:19.496304-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #DataSeriesTest\r\tinstanceVariableNames: \'series keyArray\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Tests\''			},			#name : #DataSeriesTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataSeriesTest,						#isMetaSide : false					},					#name : #series,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataSeriesTest,						#isMetaSide : false					},					#name : #keyArray,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataSeriesTest class\r\tinstanceVariableNames: \'\''				},				#name : #'DataSeriesTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataSeriesTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Tests,			#package : #DataFrame-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '722' ],		#self : OmReference [ '723' ],		#time : DateAndTime [ '2021-01-25T09:51:19.797622-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #initialization,			#sourceCode : 'setUp\r\r\tdf := DataFrame withRows: #(\r\t\t(16.99 1.01 Female No Sun Dinner 2)\r\t\t(10.34 1.66 Male No Sun Dinner 3)\r\t\t(21.01 3.5 Male No Sun Dinner 3)\r\t\t(23.68 3.31 Male No Sun Dinner 2)\r\t\t(24.59 3.61 Female No Sun Dinner 4)).\r\t\t\r\tdf columnNames: #(total_bill tip sex smoker day time size).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '723' ],		#self : OmReference [ '724' ],		#time : DateAndTime [ '2021-01-25T09:51:19.798573-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateArrayMultipleUsingAsSelector,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateArrayMultipleUsingAsSelector\r\t| expected actual |\r\t\r\texpected := DataFrame\r\t\twithColumns: #(\r\t\t\t(41.58 55.03)\r\t\t\t(20.79 18.343333333333334)\r\t\t\t(2.31 2.8233333333333337))\r\t\trowNames: #(Female Male)\r\t\tcolumnNames: #(total average averageTip).\r\t\t\r\tactual := df\r\t\tgroupBy: #sex\r\t\taggregate: {\r\t\t\t#total_bill using: #sum as: #total .\r\t\t\t#total_bill using: #average as: #average .\r\t\t\t#tip using: #average as: #averageTip\r\t\t}.\r\t\t\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '724' ],		#self : OmReference [ '725' ],		#time : DateAndTime [ '2021-01-25T09:51:19.799284-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateArrayUsingAsBlock,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateArrayUsingAsBlock\r\t| expected actual |\r\t\r\texpected := DataFrame\r\t\twithColumns: #((20.79 18.343333333333334))\r\t\trowNames: #(Female Male)\r\t\tcolumnNames: #(total).\r\t\t\r\tactual := df\r\t\tgroupBy: #sex\r\t\taggregate: { #total_bill using: [ :column | column sum / column size ] as: #total }.\r\t\t\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '725' ],		#self : OmReference [ '726' ],		#time : DateAndTime [ '2021-01-25T09:51:19.799672-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateArrayUsingAsNoSuchAggregateColumnError,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateArrayUsingAsNoSuchAggregateColumnError\r\tself\r\t\tshould: [\r\t\t\tdf groupBy: #sex\r\t\t\t\taggregate: { #NoSuchColumn using: #sum as: #total } ]\r\t\traise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '726' ],		#self : OmReference [ '727' ],		#time : DateAndTime [ '2021-01-25T09:51:19.799938-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateArrayUsingAsNoSuchGroupColumnError,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateArrayUsingAsNoSuchGroupColumnError\r\tself\r\t\tshould: [\r\t\t\tdf groupBy: #NoSuchColumn\r\t\t\t\taggregate: { #total_bill using: #sum as: #total } ]\r\t\traise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '727' ],		#self : OmReference [ '728' ],		#time : DateAndTime [ '2021-01-25T09:51:19.800106-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateArrayUsingAsSameColumnError,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateArrayUsingAsSameColumnError\r\tself\r\t\tshould: [\r\t\t\tdf groupBy: #sex\r\t\t\t\taggregate: { #sex using: #sum as: #total } ]\r\t\traise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '728' ],		#self : OmReference [ '729' ],		#time : DateAndTime [ '2021-01-25T09:51:19.80028-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateArrayUsingAsSelector,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateArrayUsingAsSelector\r\t| expected actual |\r\t\r\texpected := DataFrame\r\t\twithColumns: #((41.58 55.03))\r\t\trowNames: #(Female Male)\r\t\tcolumnNames: #(total).\r\t\t\r\tactual := df\r\t\tgroupBy: #sex\r\t\taggregate: { #total_bill using: #sum as: #total }.\r\t\t\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '729' ],		#self : OmReference [ '730' ],		#time : DateAndTime [ '2021-01-25T09:51:19.800448-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateArrayUsingBlock,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateArrayUsingBlock\r\t| expected actual |\r\t\r\texpected := DataFrame\r\t\twithColumns: #((20.79 18.343333333333334))\r\t\trowNames: #(Female Male)\r\t\tcolumnNames: #(total_bill).\r\t\t\r\tactual := df\r\t\tgroupBy: #sex\r\t\taggregate: { #total_bill using: [ :column | column sum / column size ] }.\r\t\t\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '730' ],		#self : OmReference [ '731' ],		#time : DateAndTime [ '2021-01-25T09:51:19.800622-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateArrayUsingSelector,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateArrayUsingSelector\r\t| expected actual |\r\t\r\texpected := DataFrame\r\t\twithColumns: #((41.58 55.03))\r\t\trowNames: #(Female Male)\r\t\tcolumnNames: #(total_bill).\r\t\t\r\tactual := df\r\t\tgroupBy: #sex\r\t\taggregate: { #total_bill using: #sum }.\r\t\t\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '731' ],		#self : OmReference [ '732' ],		#time : DateAndTime [ '2021-01-25T09:51:19.800799-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsingAsBlock,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateUsingAsBlock\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(Female Male)\r\t\tvalues: #(20.79 18.343333333333334)\r\t\tname: #total.\r\t\t\r\tactual := df\r\t\tgroup: #total_bill\r\t\tby: #sex\r\t\taggregateUsing: [ :column | column sum / column size ]\r\t\tas: #total.\r\t\t\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '732' ],		#self : OmReference [ '733' ],		#time : DateAndTime [ '2021-01-25T09:51:19.800981-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsingAsNoSuchAggregateColumnError,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateUsingAsNoSuchAggregateColumnError\r\tself\r\t\tshould: [\r\t\t\tdf group: #NoSuchColumn\r\t\t\t\tby: #sex\r\t\t\t\taggregateUsing: #sum\r\t\t\t\tas: #total ]\r\t\traise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '733' ],		#self : OmReference [ '734' ],		#time : DateAndTime [ '2021-01-25T09:51:19.801187-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsingAsNoSuchGroupColumnError,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateUsingAsNoSuchGroupColumnError\r\tself\r\t\tshould: [\r\t\t\tdf group: #sex\r\t\t\t\tby: #NoSuchColumn\r\t\t\t\taggregateUsing: #sum\r\t\t\t\tas: #total ]\r\t\traise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '734' ],		#self : OmReference [ '735' ],		#time : DateAndTime [ '2021-01-25T09:51:19.801351-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsingAsSameColumnError,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateUsingAsSameColumnError\r\tself\r\t\tshould: [\r\t\t\tdf group: #sex\r\t\t\t\tby: #sex\r\t\t\t\taggregateUsing: #sum\r\t\t\t\tas: #total ]\r\t\traise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '735' ],		#self : OmReference [ '736' ],		#time : DateAndTime [ '2021-01-25T09:51:19.801591-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsingAsSelector,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateUsingAsSelector\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(Female Male)\r\t\tvalues: #(41.58 55.03)\r\t\tname: #total.\r\t\t\r\tactual := df\r\t\tgroup: #total_bill\r\t\tby: #sex\r\t\taggregateUsing: #sum\r\t\tas: #total.\r\t\t\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '736' ],		#self : OmReference [ '737' ],		#time : DateAndTime [ '2021-01-25T09:51:19.80179-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsingBlock,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateUsingBlock\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(Female Male)\r\t\tvalues: #(20.79 18.343333333333334)\r\t\tname: #total_bill.\r\t\t\r\tactual := df\r\t\tgroup: #total_bill\r\t\tby: #sex\r\t\taggregateUsing: [ :column | column sum / column size ].\r\t\t\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '737' ],		#self : OmReference [ '738' ],		#time : DateAndTime [ '2021-01-25T09:51:19.801948-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsingNoSuchAggregateColumnError,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateUsingNoSuchAggregateColumnError\r\tself\r\t\tshould: [\r\t\t\tdf group: #NoSuchColumn\r\t\t\t\tby: #sex\r\t\t\t\taggregateUsing: #sum ]\r\t\traise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '738' ],		#self : OmReference [ '739' ],		#time : DateAndTime [ '2021-01-25T09:51:19.802103-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsingNoSuchGroupColumnError,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateUsingNoSuchGroupColumnError\r\tself\r\t\tshould: [\r\t\t\tdf group: #sex\r\t\t\t\tby: #NoSuchColumn\r\t\t\t\taggregateUsing: #sum ]\r\t\traise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '739' ],		#self : OmReference [ '740' ],		#time : DateAndTime [ '2021-01-25T09:51:19.80228-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsingSameColumnError,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateUsingSameColumnError\r\tself\r\t\tshould: [\r\t\t\tdf group: #sex\r\t\t\t\tby: #sex\r\t\t\t\taggregateUsing: #sum ]\r\t\traise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '740' ],		#self : OmReference [ '741' ],		#time : DateAndTime [ '2021-01-25T09:51:19.802455-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameAggrGroupTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsingSelector,			#protocol : #initialization,			#sourceCode : 'testGroupByAggregateUsingSelector\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(Female Male)\r\t\tvalues: #(41.58 55.03)\r\t\tname: #total_bill.\r\t\t\r\tactual := df\r\t\tgroup: #total_bill\r\t\tby: #sex\r\t\taggregateUsing: #sum.\r\t\t\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '741' ],		#self : OmReference [ '742' ],		#time : DateAndTime [ '2021-01-25T09:51:19.802724-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameHeadTailTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #initialization,			#sourceCode : 'setUp\r\r\tdf := DataFrame withRows: #(\r\t\t(5.1 3.5 1.4 0.2 setosa)\r\t\t(4.9 3 1.4 0.2 setosa)\r\t\t(4.7 3.2 1.3 0.2 setosa)\r\t\t(7 3.2 4.7 1.4 versicolor)\r\t\t(6.4 3.2 4.5 1.5 versicolor)\r\t\t(6.9 3.1 4.9 1.5 versicolor)\r\t\t(6.3 3.3 6 2.5 virginica)\r\t\t(5.8 2.7 5.1 1.9 virginica)\r\t\t(7.1 3 5.9 2.1 virginica)).\r\t\t\r\tdf columnNames: #(sepalLength sepalWidth petalLength petalWidth species).\r\tseries := df column: #sepalLength.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '742' ],		#self : OmReference [ '743' ],		#time : DateAndTime [ '2021-01-25T09:51:19.803081-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameHeadTailTest,				#isMetaSide : false			},			#name : #testDataFrameHead,			#protocol : #tests,			#sourceCode : 'testDataFrameHead\r\r\t| actual expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(5.1 3.5 1.4 0.2 setosa)\r\t\t(4.9 3 1.4 0.2 setosa)\r\t\t(4.7 3.2 1.3 0.2 setosa)\r\t\t(7 3.2 4.7 1.4 versicolor)\r\t\t(6.4 3.2 4.5 1.5 versicolor)).\r\texpected columnNames: df columnNames.\r\texpected rowNames: (1 to: df defaultHeadTailSize).\r\t\r\tactual := df head.\r\t\t\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '743' ],		#self : OmReference [ '744' ],		#time : DateAndTime [ '2021-01-25T09:51:19.803292-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameHeadTailTest,				#isMetaSide : false			},			#name : #testDataFrameHeadN,			#protocol : #tests,			#sourceCode : 'testDataFrameHeadN\r\r\t| actual expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(5.1 3.5 1.4 0.2 setosa)\r\t\t(4.9 3 1.4 0.2 setosa)\r\t\t(4.7 3.2 1.3 0.2 setosa)).\r\texpected columnNames: df columnNames.\r\texpected rowNames: (1 to: 3).\r\t\r\tactual := df head: 3.\r\t\t\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '744' ],		#self : OmReference [ '745' ],		#time : DateAndTime [ '2021-01-25T09:51:19.803462-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameHeadTailTest,				#isMetaSide : false			},			#name : #testDataFrameTail,			#protocol : #tests,			#sourceCode : 'testDataFrameTail\r\r\t| actual expected rows |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(6.4 3.2 4.5 1.5 versicolor)\r\t\t(6.9 3.1 4.9 1.5 versicolor)\r\t\t(6.3 3.3 6 2.5 virginica)\r\t\t(5.8 2.7 5.1 1.9 virginica)\r\t\t(7.1 3 5.9 2.1 virginica)).\r\texpected columnNames: df columnNames.\r\t\r\trows := df numberOfRows.\r\texpected rowNames:\r\t\t(rows - df defaultHeadTailSize + 1 to: rows).\r\t\r\tactual := df tail.\r\t\t\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '745' ],		#self : OmReference [ '746' ],		#time : DateAndTime [ '2021-01-25T09:51:19.803642-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameHeadTailTest,				#isMetaSide : false			},			#name : #testDataFrameTailN,			#protocol : #tests,			#sourceCode : 'testDataFrameTailN\r\r\t| actual expected rows |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(6.3 3.3 6 2.5 virginica)\r\t\t(5.8 2.7 5.1 1.9 virginica)\r\t\t(7.1 3 5.9 2.1 virginica)).\r\texpected columnNames: df columnNames.\r\t\r\trows := df numberOfRows.\r\texpected rowNames:\r\t\t(rows - 3 + 1 to: rows).\r\t\r\tactual := df tail: 3.\r\t\t\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '746' ],		#self : OmReference [ '747' ],		#time : DateAndTime [ '2021-01-25T09:51:19.803794-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameHeadTailTest,				#isMetaSide : false			},			#name : #testDefaultHeadTailSize,			#protocol : #tests,			#sourceCode : 'testDefaultHeadTailSize\r\r\tself assert: df defaultHeadTailSize equals: 5.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '747' ],		#self : OmReference [ '748' ],		#time : DateAndTime [ '2021-01-25T09:51:19.804088-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #initialization,			#sourceCode : 'setUp\r\r\tdf := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' 1.609 true)\r   \t\t(\'Dubai\' 2.789 true)\r   \t\t(\'London\' 8.788 false)).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '748' ],		#self : OmReference [ '749' ],		#time : DateAndTime [ '2021-01-25T09:51:19.804403-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testAddColumnAtPosition,			#protocol : #tests,			#sourceCode : 'testAddColumnAtPosition\r\r\t| expected |\r\t\r\texpected := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' 1.609 4 true)\r   \t\t(\'Dubai\' 2.789 3 true)\r   \t\t(\'London\' 8.788 4 false)).\r\t\t\r\tdf addColumn: #(4 3 4) atPosition: 3.\r\t\r\tself assert: df equals: expected.\r\t\r',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '749' ],		#self : OmReference [ '750' ],		#time : DateAndTime [ '2021-01-25T09:51:19.804718-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testAddColumnAtPositionSizeMismatch,			#protocol : #tests,			#sourceCode : 'testAddColumnAtPositionSizeMismatch\r\t\r\t| aBlock |\r\taBlock := [ df addColumn: #(1 2 3 4) atPosition: 3 ].\r\t\r\tself should: aBlock raise: SizeMismatch.\r\t\r',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '750' ],		#self : OmReference [ '751' ],		#time : DateAndTime [ '2021-01-25T09:51:19.804992-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testAddRowAtPosition,			#protocol : #tests,			#sourceCode : 'testAddRowAtPosition\r\r\t| expected |\r\t\r\texpected := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' 1.609 true)\r   \t\t(\'Dubai\' 2.789 true)\r\t\t(\'Lviv\' 0.724 true)\r   \t\t(\'London\' 8.788 false)).\r\t\t\r\tdf addRow: #(\'Lviv\' 0.724 true) atPosition: 3.\r\t\r\tself assert: df equals: expected.\r\t\r',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '751' ],		#self : OmReference [ '752' ],		#time : DateAndTime [ '2021-01-25T09:51:19.805211-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testAddRowAtPositionSizeMismatch,			#protocol : #tests,			#sourceCode : 'testAddRowAtPositionSizeMismatch\r\t\r\t| aBlock |\r\taBlock := [ df addRow: #(1 2) atPosition: 3 ].\r\t\r\tself should: aBlock raise: SizeMismatch.\r\t\r',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '752' ],		#self : OmReference [ '753' ],		#time : DateAndTime [ '2021-01-25T09:51:19.805423-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testAsArrayOfColumns,			#protocol : #tests,			#sourceCode : 'testAsArrayOfColumns\r\r\t| expected |\r\t\r\texpected := #(\r\t\t(\'Barcelona\' \'Dubai\' \'London\')\r\t\t(1.609 2.789 8.788)\r   \t\t(true true false)).\r\t\r\tself assert: df asArrayOfColumns equals: expected.\r\t\r',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '753' ],		#self : OmReference [ '754' ],		#time : DateAndTime [ '2021-01-25T09:51:19.807025-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testAsArrayOfRows,			#protocol : #tests,			#sourceCode : 'testAsArrayOfRows\r\r\t| expected |\r\t\r\texpected := #(\r\t\t(\'Barcelona\' 1.609 true)\r   \t\t(\'Dubai\' 2.789 true)\r   \t\t(\'London\' 8.788 false)).\r\t\r\tself assert: df asArrayOfRows equals: expected.\r\t\r',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '754' ],		#self : OmReference [ '755' ],		#time : DateAndTime [ '2021-01-25T09:51:19.807376-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testAtAt,			#protocol : #tests,			#sourceCode : 'testAtAt\r\t\r\tself assert: (df at: 2 at: 2) closeTo: 2.789.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '755' ],		#self : OmReference [ '756' ],		#time : DateAndTime [ '2021-01-25T09:51:19.807566-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testAtAtPut,			#protocol : #tests,			#sourceCode : 'testAtAtPut\r\r\t| array2D expected actual |\r\t\r\tarray2D := Array2D rows: 3 columns: 2\r\t\tcontents: #(1 2 3 4 5 6).\r\t\t\r\tactual := DataFrameInternal fromArray2D: array2D.\r\tactual at: 2 at: 2 put: 10.\r\t\r\tarray2D at: 2 at: 2 put: 10.\r\texpected := DataFrameInternal fromArray2D: array2D.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '756' ],		#self : OmReference [ '757' ],		#time : DateAndTime [ '2021-01-25T09:51:19.807739-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testCollect,			#protocol : #tests,			#sourceCode : 'testCollect\r\r\t| dfInternal dfActual dfExpected |\r\t\r\tdfInternal := DataFrameInternal withRows:\r\t\t#((1 2)(3 4)(5 6)).\r\t\t\r\tdfExpected := DataFrameInternal withRows:\r\t\t#((10 20)(30 40)(50 60)).\r\t\t\r\tdfActual := dfInternal\r\t\tcollect: [ :each |\r\t\t\teach * 10 ].\r\t\t\r\tself assert: dfActual equals: dfExpected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '757' ],		#self : OmReference [ '758' ],		#time : DateAndTime [ '2021-01-25T09:51:19.8079-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testColumnAt,			#protocol : #tests,			#sourceCode : 'testColumnAt\r\r\t| actualColumn expectedColumn |\r\t\r\tactualColumn := df columnAt: 2.\r\texpectedColumn := #(1.609 2.789 8.788).\r\t\r\tself assert: actualColumn equals: expectedColumn.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '758' ],		#self : OmReference [ '759' ],		#time : DateAndTime [ '2021-01-25T09:51:19.808065-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testColumnAtPut,			#protocol : #tests,			#sourceCode : 'testColumnAtPut\r\r\t| actual expected |\r\r\texpected := DataFrameInternal withRows: #(\r\t\t(\'X\' 1.609 0)\r   \t\t(\'Y\' 2.789 1)\r   \t\t(\'Z\' 8.788 0)).\r\t\r\tactual := df.\r\tactual columnAt: 1 put: #(X Y Z).\r\tactual columnAt: 3 put: #(0 1 0).\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '759' ],		#self : OmReference [ '760' ],		#time : DateAndTime [ '2021-01-25T09:51:19.808227-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testColumnsAt,			#protocol : #tests,			#sourceCode : 'testColumnsAt\r\r\t| columnNumbers dfActual dfExpected |\r\t\r\tcolumnNumbers := #(1 3).\r\t\r\tdfExpected := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' true)\r   \t\t(\'Dubai\' true)\r   \t\t(\'London\' false)).\r\t\t\r\tdfActual := df columnsAt: columnNumbers.\r\t\r\tself assert: dfActual equals: dfExpected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '760' ],		#self : OmReference [ '761' ],		#time : DateAndTime [ '2021-01-25T09:51:19.808416-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testCreateDataFrameInternalWithColumns,			#protocol : #tests,			#sourceCode : 'testCreateDataFrameInternalWithColumns\r\r\t| array2D expected actual |\r\t\r\tarray2D := Array2D\r\t\t\trows: 3\r\t\t\tcolumns: 2\r\t\t\tcontents: #(1 2 3 4 5 6).\r\t\r\texpected := DataFrameInternal fromArray2D: array2D.\r\tactual := DataFrameInternal withColumns: #((1 3 5)(2 4 6)).\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '761' ],		#self : OmReference [ '762' ],		#time : DateAndTime [ '2021-01-25T09:51:19.808591-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testCreateDataFrameInternalWithRows,			#protocol : #tests,			#sourceCode : 'testCreateDataFrameInternalWithRows\r\t\r\t| array2D actual expected |\r\t\r\tarray2D := Array2D\r\t\trows: 3\r\t\tcolumns: 2\r\t\tcontents: #(1 2 3 4 5 6).\r\t\r\texpected := DataFrameInternal fromArray2D: array2D.\t\r\tactual := DataFrameInternal withRows: #((1 2)(3 4)(5 6)).\r\t\r\tself assert: actual equals: expected.\r\t\r\t',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '762' ],		#self : OmReference [ '763' ],		#time : DateAndTime [ '2021-01-25T09:51:19.808746-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testDeepCopy,			#protocol : #tests,			#sourceCode : 'testDeepCopy\r\r\t| dfCopy |\r\t\r\tdfCopy := df deepCopy.\r\t\r\tself assert: df equals: dfCopy.\r\tself deny: df == dfCopy.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '763' ],		#self : OmReference [ '764' ],		#time : DateAndTime [ '2021-01-25T09:51:19.808901-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testDo,			#protocol : #tests,			#sourceCode : 'testDo\r\r\t| dfInternal sum |\r\t\r\tdfInternal := DataFrameInternal withRows:\r\t\t#((1 2)(3 4)(5 6)).\r\t\t\r\tsum := 0.\r\t\r\tdfInternal do: [ :each |\r\t\tsum := sum + each ].\r\t\r\tself assert: sum equals: 21.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '764' ],		#self : OmReference [ '765' ],		#time : DateAndTime [ '2021-01-25T09:51:19.809061-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testFromArray2D,			#protocol : #tests,			#sourceCode : 'testFromArray2D\r\r\t| dfi array2D |\r\t\r\tarray2D := Array2D\r\t\trows: 3\r\t\tcolumns: 2\r\t\tcontents: #(1 2 3 4 5 6).\r\t\t\r\tdfi := DataFrameInternal fromArray2D: array2D.\r\t\r\tself assert: dfi asArray2D equals: array2D.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '765' ],		#self : OmReference [ '766' ],		#time : DateAndTime [ '2021-01-25T09:51:19.809231-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testPrintOn,			#protocol : #tests,			#sourceCode : 'testPrintOn\r\r\t| expected actual |\r\t\r\texpected := String new writeStream.\r\texpected\r\t\tnextPutAll: \'(\'\'Barcelona\'\' 1.609 true\'; cr;\r\t\tnextPutAll: \'\'\'Dubai\'\' 2.789 true\'; cr;\r\t\tnextPutAll: \'\'\'London\'\' 8.788 false )\'.\r\texpected := expected contents.\r\t\r\tactual := String new writeStream.\r\tdf printOn: actual.\r\tactual := actual contents.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '766' ],		#self : OmReference [ '767' ],		#time : DateAndTime [ '2021-01-25T09:51:19.80939-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testRemoveColumnAt,			#protocol : #tests,			#sourceCode : 'testRemoveColumnAt\r\r\t| expected |\r\t\r\texpected := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' true)\r   \t\t(\'Dubai\' true)\r   \t\t(\'London\' false)).\r\t\t\r\tdf removeColumnAt: 2.\r\t\r\tself assert: df equals: expected.\r\t\r',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '767' ],		#self : OmReference [ '768' ],		#time : DateAndTime [ '2021-01-25T09:51:19.809564-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testRemoveColumnsOfRowElementsSatisfingOnRow,			#protocol : #tests,			#sourceCode : 'testRemoveColumnsOfRowElementsSatisfingOnRow\r\r\t| expected |\r\t\r\tdf := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' 1.609 nil)\r   \t\t(\'Dubai\' 2.789 true)\r   \t\t(\'London\' nil nil)\r\t\t(\'Washington\' nil true)\r\t\t(\'Delhi\' 10.422 nil)).\r\t\r\texpected := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\')\r   \t\t(\'Dubai\')\r   \t\t(\'London\')\r\t\t(\'Washington\')\r\t\t(\'Delhi\')).\r\t\r\tself assert: (df removeColumnsOfRowElementsSatisfing: [ :ele | ele isNil ] onRow: 3) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '768' ],		#self : OmReference [ '769' ],		#time : DateAndTime [ '2021-01-25T09:51:19.80972-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testRemoveRowAt,			#protocol : #tests,			#sourceCode : 'testRemoveRowAt\r\r\t| expected |\r\t\r\texpected := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' 1.609 true)\r   \t\t(\'London\' 8.788 false)).\r\t\t\r\tdf removeRowAt: 2.\r\t\r\tself assert: df equals: expected.\r\t\r',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '769' ],		#self : OmReference [ '770' ],		#time : DateAndTime [ '2021-01-25T09:51:19.809886-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testRemoveRowsOfColumnElementsSatisfingOnColumn,			#protocol : #tests,			#sourceCode : 'testRemoveRowsOfColumnElementsSatisfingOnColumn\r\r\t| expected |\r\t\r\tdf := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' 1.609 nil)\r   \t\t(\'Dubai\' 2.789 true)\r   \t\t(\'London\' 8.788 nil)\r\t\t(\'Washington\' nil true)\r\t\t(\'Delhi\' 10.422 nil)).\r\t\r\texpected := DataFrameInternal withRows: #(\r   \t\t(\'Dubai\' 2.789 true)\r\t\t(\'Washington\' nil true)).\r\t\r\tself assert: (df removeRowsOfColumnElementsSatisfing: [ :ele | ele isNil ] onColumn: 3) equals: expected.\r\r',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '770' ],		#self : OmReference [ '771' ],		#time : DateAndTime [ '2021-01-25T09:51:19.810054-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testReplaceMissingValuesStrings,			#protocol : #tests,			#sourceCode : 'testReplaceMissingValuesStrings\r\r\t| expected |\r\t\r\tdf := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' 1.609 \'null\')\r   \t\t(\'Dubai\' \'?\' true)\r   \t\t(nil 8.788 \'\')).\r\t\t\r\texpected := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' 1.609 nil)\r   \t\t(\'Dubai\' nil true)\r   \t\t(nil 8.788 nil)).\r\t\r\tself assert: (df replaceMissingValuesStrings: #(\'null\' \'?\' \'\') asSet) equals: expected.\r\r',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '771' ],		#self : OmReference [ '772' ],		#time : DateAndTime [ '2021-01-25T09:51:19.810217-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testReplaceMissingValuesStringsOnEmptySet,			#protocol : #tests,			#sourceCode : 'testReplaceMissingValuesStringsOnEmptySet\r\r\t| expected |\r\r\tdf := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' 1.609 true)\r   \t\t(\'Dubai\' 2.789 true)\r   \t\t(\'London\' 8.788 false)).\r\t\r\texpected := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' 1.609 true)\r   \t\t(\'Dubai\' 2.789 true)\r   \t\t(\'London\' 8.788 false)).\r\t\r\tself assert: (df replaceMissingValuesStrings: #() asSet) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '772' ],		#self : OmReference [ '773' ],		#time : DateAndTime [ '2021-01-25T09:51:19.810372-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testRowAt,			#protocol : #tests,			#sourceCode : 'testRowAt\r\r\t| actualRow expectedRow |\r\t\r\tactualRow := df rowAt: 2.\r\texpectedRow := #(\'Dubai\' 2.789 true).\r\t\r\tself assert: actualRow equals: expectedRow.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '773' ],		#self : OmReference [ '774' ],		#time : DateAndTime [ '2021-01-25T09:51:19.810589-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testRowAtPut,			#protocol : #tests,			#sourceCode : 'testRowAtPut\r\r\t| actual expected |\r\r\texpected := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' 1.609 true)\r   \t\t(\'X\' \'Y\' \'Z\')\r   \t\t(\'London\' 8.788 false)).\r\t\r\tactual := df.\r\tactual rowAt: 2 put: #(X Y Z).\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '774' ],		#self : OmReference [ '775' ],		#time : DateAndTime [ '2021-01-25T09:51:19.810794-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testRowsAt,			#protocol : #tests,			#sourceCode : 'testRowsAt\r\r\t| rowNumbers dfActual dfExpected |\r\t\r\trowNumbers := #(1 3).\r\t\r\tdfExpected := DataFrameInternal withRows: #(\r\t\t(\'Barcelona\' 1.609 true)\r   \t\t(\'London\' 8.788 false)).\r\t\t\r\tdfActual := df rowsAt: rowNumbers.\r\t\r\tself assert: dfActual equals: dfExpected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '775' ],		#self : OmReference [ '776' ],		#time : DateAndTime [ '2021-01-25T09:51:19.81096-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testVarSizeInstanceCreation,			#protocol : #tests,			#sourceCode : 'testVarSizeInstanceCreation\r\r\t| dfActual |\r\tdfActual := DataFrameInternal new: 6@8.\r\t\r\tself assert: dfActual numberOfRows equals: 6.\r\tself assert: dfActual numberOfColumns equals: 8.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '776' ],		#self : OmReference [ '777' ],		#time : DateAndTime [ '2021-01-25T09:51:19.811122-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testWithColumns,			#protocol : #tests,			#sourceCode : 'testWithColumns\r\r\t| dfi validOutput |\r\tdfi := DataFrameInternal withColumns: #((1 2) (1 2 3 4 5) (\'a\' 3.14 \'bcd\')).\r\tvalidOutput := Array2D\r\t\trows: 5\r\t\tcolumns: 3\r\t\tcontents: #(1 1 \'a\' 2 2 3.14 nil 3 \'bcd\' nil 4 nil nil 5 nil).\r\t\r\tself assert: dfi asArray2D equals: validOutput.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '777' ],		#self : OmReference [ '778' ],		#time : DateAndTime [ '2021-01-25T09:51:19.811287-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testWithIndicesCollect,			#protocol : #tests,			#sourceCode : 'testWithIndicesCollect\r\r\t| dfInternal actual expected |\r\t\r\tdfInternal := DataFrameInternal withRows:\r\t\t#((1 2)(3 4)(5 6)).\r\t\t\r\texpected := DataFrameInternal withRows:\r\t\t#((true true)(true true)(true true)).\r\t\t\r\tactual := dfInternal\r\t\twithIndicesCollect: [ :each :i :j |\r\t\t\teach = ((i - 1) * 2 + j) ].\r\t\t\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '778' ],		#self : OmReference [ '779' ],		#time : DateAndTime [ '2021-01-25T09:51:19.811449-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testWithIndicesDo,			#protocol : #tests,			#sourceCode : 'testWithIndicesDo\r\r\t| dfInternal |\r\t\r\tdfInternal := DataFrameInternal withRows:\r\t\t#((1 2)(3 4)(5 6)).\r\t\t\r\tdfInternal withIndicesDo: [ :each :i :j |\r\t\tself assert: each equals: ((i - 1) * 2 + j) ].',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '779' ],		#self : OmReference [ '780' ],		#time : DateAndTime [ '2021-01-25T09:51:19.81161-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameInternalTest,				#isMetaSide : false			},			#name : #testWithRows,			#protocol : #tests,			#sourceCode : 'testWithRows\r\r\t| dfi validOutput |\r\tdfi := DataFrameInternal withRows: #((1 2) (1 2 3 4 5) (\'a\' 3.14 \'bcd\')).\r\tvalidOutput := Array2D\r\t\trows: 3\r\t\tcolumns: 5\r\t\tcontents: #(1 2 nil nil nil 1 2 3 4 5 \'a\' 3.14 \'bcd\' nil nil).\r\t\r\tself assert: dfi asArray2D equals: validOutput.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '780' ],		#self : OmReference [ '781' ],		#time : DateAndTime [ '2021-01-25T09:51:19.811796-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameStatsTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #initialization,			#sourceCode : 'setUp\r\r\tdf := DataFrame withRows: #(\r\t\t(7.1 3.5 1.4 0.2)\r\t\t(4.9 3 1.4 0.2)\r\t\t(4.7 3.2 1.3 0.2)\r\t\t(7 3.2 4.7 1.4)\r\t\t(6.4 3.2 4.5 1.5)\r\t\t(6.9 3.1 4.9 1.5)\r\t\t(6.3 3.3 6 2.5)\r\t\t(5.8 2.7 5.1 1.9)\r\t\t(7.1 3 5.9 2.1)).\r\t\t\r\tdf columnNames: #(sepalLength sepalWidth petalLength petalWidth).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '781' ],		#self : OmReference [ '782' ],		#time : DateAndTime [ '2021-01-25T09:51:19.812006-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameStatsTest,				#isMetaSide : false			},			#name : #testAverage,			#protocol : #initialization,			#sourceCode : 'testAverage\r\r\t| expected actual |\r\t\r\texpected := { 6.244444 . 3.133333 . 3.911111 . 1.277778 } asDataSeries.\r\texpected name: #average.\r\texpected keys: df columnNames.\r\t\r\tactual := df average.\r\tself assert: actual closeTo: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '782' ],		#self : OmReference [ '783' ],		#time : DateAndTime [ '2021-01-25T09:51:19.812171-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameStatsTest,				#isMetaSide : false			},			#name : #testFirstQuartile,			#protocol : #initialization,			#sourceCode : 'testFirstQuartile\r\r\t| expected actual |\r\t\r\texpected := { 5.8 . 3 . 1.4 . 0.2 } asDataSeries.\r\texpected name: #firstQuartile.\r\texpected keys: df columnNames.\r\t\r\tactual := df firstQuartile.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '783' ],		#self : OmReference [ '784' ],		#time : DateAndTime [ '2021-01-25T09:51:19.812324-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameStatsTest,				#isMetaSide : false			},			#name : #testInterquartileRange,			#protocol : #initialization,			#sourceCode : 'testInterquartileRange\r\r\t| expected actual |\r\t\r\texpected := { 1.2 . 0.2 . 3.7 . 1.7 } asDataSeries.\r\texpected name: #interquartileRange.\r\texpected keys: df columnNames.\r\t\r\tactual := df interquartileRange.\r\tself assert: actual closeTo: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '784' ],		#self : OmReference [ '785' ],		#time : DateAndTime [ '2021-01-25T09:51:19.81248-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameStatsTest,				#isMetaSide : false			},			#name : #testMax,			#protocol : #initialization,			#sourceCode : 'testMax\r\r\t| expected actual |\r\t\r\texpected := { 7.1 . 3.5 . 6 . 2.5 } asDataSeries.\r\texpected name: #max.\r\texpected keys: df columnNames.\r\t\r\tactual := df max.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '785' ],		#self : OmReference [ '786' ],		#time : DateAndTime [ '2021-01-25T09:51:19.81263-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameStatsTest,				#isMetaSide : false			},			#name : #testMedian,			#protocol : #initialization,			#sourceCode : 'testMedian\r\r\t| expected actual |\r\t\r\texpected := { 6.4 . 3.2 . 4.7 . 1.5 } asDataSeries.\r\texpected name: #median.\r\texpected keys: df columnNames.\r\t\r\tactual := df median.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '786' ],		#self : OmReference [ '787' ],		#time : DateAndTime [ '2021-01-25T09:51:19.812784-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameStatsTest,				#isMetaSide : false			},			#name : #testMin,			#protocol : #initialization,			#sourceCode : 'testMin\r\r\t| expected actual |\r\t\r\texpected := { 4.7 . 2.7 . 1.3 . 0.2 } asDataSeries.\r\texpected name: #min.\r\texpected keys: df columnNames.\r\t\r\tactual := df min.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '787' ],		#self : OmReference [ '788' ],		#time : DateAndTime [ '2021-01-25T09:51:19.81302-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameStatsTest,				#isMetaSide : false			},			#name : #testMode,			#protocol : #initialization,			#sourceCode : 'testMode\r\r\t| expected actual |\r\t\r\texpected := { 7.1 . 3.2 . 1.4 . 0.2 } asDataSeries.\r\texpected name: #mode.\r\texpected keys: df columnNames.\r\t\r\tactual := df mode.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '788' ],		#self : OmReference [ '789' ],		#time : DateAndTime [ '2021-01-25T09:51:19.813212-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameStatsTest,				#isMetaSide : false			},			#name : #testRange,			#protocol : #initialization,			#sourceCode : 'testRange\r\r\t| expected actual |\r\t\r\texpected := { 2.4 . 0.8 . 4.7 . 2.3 } asDataSeries.\r\texpected name: #range.\r\texpected keys: df columnNames.\r\t\r\tactual := df range.\r\tself assert: actual closeTo: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '789' ],		#self : OmReference [ '790' ],		#time : DateAndTime [ '2021-01-25T09:51:19.81338-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameStatsTest,				#isMetaSide : false			},			#name : #testStdev,			#protocol : #initialization,			#sourceCode : 'testStdev\r\r\t| expected actual |\r\t\r\texpected := { 0.927512 . 0.223607 . 1.971956 . 0.877180 } asDataSeries.\r\r\texpected name: #stdev.\r\texpected keys: df columnNames.\r\t\r\tactual := df stdev.\r\tself assert: actual closeTo: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '790' ],		#self : OmReference [ '791' ],		#time : DateAndTime [ '2021-01-25T09:51:19.813541-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameStatsTest,				#isMetaSide : false			},			#name : #testThirdQuartile,			#protocol : #initialization,			#sourceCode : 'testThirdQuartile\r\r\t| expected actual |\r\t\r\texpected := { 7 . 3.2 . 5.1 . 1.9 } asDataSeries.\r\texpected name: #thirdQuartile.\r\texpected keys: df columnNames.\r\t\r\tactual := df thirdQuartile.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '791' ],		#self : OmReference [ '792' ],		#time : DateAndTime [ '2021-01-25T09:51:19.813694-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameStatsTest,				#isMetaSide : false			},			#name : #testVariance,			#protocol : #initialization,			#sourceCode : 'testVariance\r\r\t| expected actual |\r\t\r\texpected := { 0.860278 . 0.050000 . 3.888611 . 0.769444 } asDataSeries.\r\texpected name: #variance.\r\texpected keys: df columnNames.\r\t\r\tactual := df variance.\r\tself assert: actual closeTo: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '792' ],		#self : OmReference [ '793' ],		#time : DateAndTime [ '2021-01-25T09:51:19.813875-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #initialization,			#sourceCode : 'setUp\r\r\tdf := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true)\r   \t\t(London 8.788 false)).\r\t\t\r\tdf rowNames: #(A B C).\r\tdf columnNames: #(City Population BeenThere).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '793' ],		#self : OmReference [ '794' ],		#time : DateAndTime [ '2021-01-25T09:51:19.814056-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAdd,			#protocol : #tests,			#sourceCode : 'testAdd\r\r\t| row expected |\r\t\r\trow := DataSeries withValues: #(Paris 2.141 true) name: #X.\r\tdf add: row.\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true)\r   \t\t(London 8.788 false)\r\t\t(Paris 2.141 true)).\r\t\t\r\texpected rowNames: #(A B C X).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '794' ],		#self : OmReference [ '795' ],		#time : DateAndTime [ '2021-01-25T09:51:19.814227-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddColumn,			#protocol : #tests,			#sourceCode : 'testAddColumn\r\r\t| column expected |\r\t\r\tcolumn := DataSeries withValues: #(2015 2010 2017) name: #Year.\r\tdf addColumn: column.\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true 2015)\r   \t\t(Dubai 2.789 true 2010)\r   \t\t(London 8.788 false 2017)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population BeenThere Year).\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '795' ],		#self : OmReference [ '796' ],		#time : DateAndTime [ '2021-01-25T09:51:19.81439-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddColumnAtPosition,			#protocol : #tests,			#sourceCode : 'testAddColumnAtPosition\r\t| column expected |\r\t\r\tcolumn := DataSeries withValues: #(2015 2010 2017) name: #Year.\r\tdf addColumn: column atPosition: 3.\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 2015 true)\r   \t\t(Dubai 2.789 2010 true)\r   \t\t(London 8.788 2017 false)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population Year BeenThere).\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '796' ],		#self : OmReference [ '797' ],		#time : DateAndTime [ '2021-01-25T09:51:19.814597-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddColumnNameMustBeDistinct,			#protocol : #tests,			#sourceCode : 'testAddColumnNameMustBeDistinct\r\r\t| series |\r\tseries := DataSeries withValues: #(1 2 3) name: #City.\r\tself should: [ df addColumn: series ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '797' ],		#self : OmReference [ '798' ],		#time : DateAndTime [ '2021-01-25T09:51:19.814845-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddColumnNamed,			#protocol : #tests,			#sourceCode : 'testAddColumnNamed\r\t| expected |\r\t\r\tdf addColumn: #(2015 2010 2017) named: #Year.\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true 2015)\r   \t\t(Dubai 2.789 true 2010)\r   \t\t(London 8.788 false 2017)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population BeenThere Year).\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '798' ],		#self : OmReference [ '799' ],		#time : DateAndTime [ '2021-01-25T09:51:19.815125-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddColumnNamedAtPosition,			#protocol : #tests,			#sourceCode : 'testAddColumnNamedAtPosition\r\t| expected |\r\t\r\tdf addColumn: #(2015 2010 2017) named: #Year atPosition: 3.\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 2015 true)\r   \t\t(Dubai 2.789 2010 true)\r   \t\t(London 8.788 2017 false)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population Year BeenThere).\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '799' ],		#self : OmReference [ '800' ],		#time : DateAndTime [ '2021-01-25T09:51:19.815297-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddColumnNamedNameMustBeDistinct,			#protocol : #tests,			#sourceCode : 'testAddColumnNamedNameMustBeDistinct\r\r\tself should: [ df addColumn: #(1 2 3) named: #City ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '800' ],		#self : OmReference [ '801' ],		#time : DateAndTime [ '2021-01-25T09:51:19.815475-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddEmptyColumnNamed,			#protocol : #tests,			#sourceCode : 'testAddEmptyColumnNamed\r\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true nil)\r   \t\t(Dubai 2.789 true nil)\r   \t\t(London 8.788 false nil)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population BeenThere EmptyColumn).\r\t\t\r\tdf addEmptyColumnNamed: #EmptyColumn.\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '801' ],		#self : OmReference [ '802' ],		#time : DateAndTime [ '2021-01-25T09:51:19.815647-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddEmptyColumnNamedAtPosition,			#protocol : #tests,			#sourceCode : 'testAddEmptyColumnNamedAtPosition\r\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 nil true)\r   \t\t(Dubai 2.789 nil true)\r   \t\t(London 8.788 nil false)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population EmptyColumn BeenThere).\r\t\t\r\tdf addEmptyColumnNamed: #EmptyColumn atPosition: 3.\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '802' ],		#self : OmReference [ '803' ],		#time : DateAndTime [ '2021-01-25T09:51:19.815812-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddEmptyRowNamed,			#protocol : #tests,			#sourceCode : 'testAddEmptyRowNamed\r\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true)\r   \t\t(London 8.788 false)\r\t\t(nil nil nil)).\r\t\t\r\texpected rowNames: #(A B C X).\r\texpected columnNames: #(City Population BeenThere).\r\t\t\r\tdf addEmptyRowNamed: #X.\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '803' ],		#self : OmReference [ '804' ],		#time : DateAndTime [ '2021-01-25T09:51:19.81618-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddEmptyRowNamedAtPosition,			#protocol : #tests,			#sourceCode : 'testAddEmptyRowNamedAtPosition\r\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true)\r\t\t(nil nil nil)\r   \t\t(London 8.788 false)).\r\t\t\r\texpected rowNames: #(A B X C).\r\texpected columnNames: #(City Population BeenThere).\r\t\t\r\tdf addEmptyRowNamed: #X atPosition: 3.\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '804' ],		#self : OmReference [ '805' ],		#time : DateAndTime [ '2021-01-25T09:51:19.816383-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddRow,			#protocol : #tests,			#sourceCode : 'testAddRow\r\r\t| row expected |\r\t\r\trow := DataSeries withValues: #(Paris 2.141 true) name: #X.\r\tdf addRow: row.\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true)\r   \t\t(London 8.788 false)\r\t\t(Paris 2.141 true)).\r\t\t\r\texpected rowNames: #(A B C X).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '805' ],		#self : OmReference [ '806' ],		#time : DateAndTime [ '2021-01-25T09:51:19.816559-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddRowAtPosition,			#protocol : #tests,			#sourceCode : 'testAddRowAtPosition\r\t| row expected |\r\t\r\trow := DataSeries withValues: #(Paris 2.141 true) name: #X.\r\tdf addRow: row atPosition: 2.\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r\t\t(Paris 2.141 true)\r   \t\t(Dubai 2.789 true)\r   \t\t(London 8.788 false)).\r\t\t\r\texpected rowNames: #(A X B C).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '806' ],		#self : OmReference [ '807' ],		#time : DateAndTime [ '2021-01-25T09:51:19.816718-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddRowNameMustBeDistinct,			#protocol : #tests,			#sourceCode : 'testAddRowNameMustBeDistinct\r\r\t| series |\r\tseries := DataSeries withValues: #(1 2 3) name: #A.\r\tself should: [ df addRow: series ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '807' ],		#self : OmReference [ '808' ],		#time : DateAndTime [ '2021-01-25T09:51:19.816884-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddRowNamed,			#protocol : #tests,			#sourceCode : 'testAddRowNamed\r\t| expected |\r\t\r\tdf addRow: #(Paris 2.141 true) named: #X.\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true)\r   \t\t(London 8.788 false)\r\t\t(Paris 2.141 true)).\r\t\t\r\texpected rowNames: #(A B C X).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '808' ],		#self : OmReference [ '809' ],		#time : DateAndTime [ '2021-01-25T09:51:19.817056-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddRowNamedAtPosition,			#protocol : #tests,			#sourceCode : 'testAddRowNamedAtPosition\r\t| expected |\r\t\r\tdf addRow: #(Paris 2.141 true) named: #X atPosition: 2.\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r\t\t(Paris 2.141 true)\r   \t\t(Dubai 2.789 true)\r   \t\t(London 8.788 false)).\r\t\t\r\texpected rowNames: #(A X B C).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '809' ],		#self : OmReference [ '810' ],		#time : DateAndTime [ '2021-01-25T09:51:19.817251-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddRowNamedNameMustBeDistinct,			#protocol : #tests,			#sourceCode : 'testAddRowNamedNameMustBeDistinct\r\r\tself should: [ df addRow: #(1 2 3) named: #A ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '810' ],		#self : OmReference [ '811' ],		#time : DateAndTime [ '2021-01-25T09:51:19.817421-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAddRowSizeMismatch,			#protocol : #tests,			#sourceCode : 'testAddRowSizeMismatch\r\r\t| aBlock |\r\taBlock := [ df addRow: #(1 2) named: #TooSmall ].\r\t\r\tself should: aBlock raise: SizeMismatch.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '811' ],		#self : OmReference [ '812' ],		#time : DateAndTime [ '2021-01-25T09:51:19.817585-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAsArrayOfColumns,			#protocol : #tests,			#sourceCode : 'testAsArrayOfColumns\r\r\t| expected |\r\t\r\texpected := #(\r\t\t(\'Barcelona\' \'Dubai\' \'London\')\r\t\t(1.609 2.789 8.788)\r   \t\t(true true false)).\r\t\r\tself assert: df asArrayOfColumns equals: expected.\r\t\r',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '812' ],		#self : OmReference [ '813' ],		#time : DateAndTime [ '2021-01-25T09:51:19.817748-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAsArrayOfRows,			#protocol : #tests,			#sourceCode : 'testAsArrayOfRows\r\r\t| expected |\r\t\r\texpected := {\r\t\t#(\'Barcelona\' 1.609 true) asDataSeries name: \'A\'; keys: df columnNames; yourself .\r   \t\t#(\'Dubai\' 2.789 true) asDataSeries name: \'B\'; keys: df columnNames; yourself .\r   \t\t#(\'London\' 8.788 false) asDataSeries name: \'C\'; keys: df columnNames; yourself\r\t}.\r\t\r\tself assert: df asArrayOfRows equals: expected.\r\t\r',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '813' ],		#self : OmReference [ '814' ],		#time : DateAndTime [ '2021-01-25T09:51:19.817904-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAt,			#protocol : #tests,			#sourceCode : 'testAt\r\r\t| actual expected |\r\r\texpected := DataSeries withValues:\r\t\t#(\'Dubai\' 2.789 true).\r\t\t\r\texpected name: #B.\r\texpected keys: df columnNames.\r\t\r\tactual := df at: 2.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '814' ],		#self : OmReference [ '815' ],		#time : DateAndTime [ '2021-01-25T09:51:19.818055-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAtAt,			#protocol : #tests,			#sourceCode : 'testAtAt\r\r\tself assert: (df at: 2 at: 1) equals: \'Dubai\'.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '815' ],		#self : OmReference [ '816' ],		#time : DateAndTime [ '2021-01-25T09:51:19.818215-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAtAtPut,			#protocol : #tests,			#sourceCode : 'testAtAtPut\r\r\t| expectedDataFrame |\r\t\r\texpectedDataFrame := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true)\r   \t\t(London 1000 false)).\r\t\t\r\texpectedDataFrame rowNames: df rowNames.\r\texpectedDataFrame columnNames: df columnNames.\r\t\t\r\tdf at: 3 at: 2 put: 1000.\r\t\t\t\r\tself assert: df equals: expectedDataFrame. ',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '816' ],		#self : OmReference [ '817' ],		#time : DateAndTime [ '2021-01-25T09:51:19.818374-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAtAtTransform,			#protocol : #tests,			#sourceCode : 'testAtAtTransform\r\r\t| expected |\r\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 2 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere).\r\t\t\r\tdf at: 2 at: 2 transform: [ :value | value floor ].\r\tself assert: df equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '817' ],		#self : OmReference [ '818' ],		#time : DateAndTime [ '2021-01-25T09:51:19.818537-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testAtTransform,			#protocol : #tests,			#sourceCode : 'testAtTransform\r\r\t| expected |\r\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 0 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere).\r\t\t\r\tdf at: 2 transform: [ :row | row at: #Population put: 0; yourself ].\r\tself assert: df equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '818' ],		#self : OmReference [ '819' ],		#time : DateAndTime [ '2021-01-25T09:51:19.818714-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCollect,			#protocol : #tests,			#sourceCode : 'testCollect\r\t| expectedDf expectedResult actualResult |\r\t\r\texpectedDf := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true)\r   \t\t(London 8.788 false)).\r\t\t\r\texpectedDf rowNames: #(A B C).\r\texpectedDf columnNames: #(City Population BeenThere).\r\t\r\texpectedResult := DataFrame withRows: #(\r\t\t(\'BARCELONA\' 1)\r   \t\t(\'DUBAI\' 2)\r   \t\t(\'LONDON\' 8)).\r\t\t\r\texpectedResult rowNames: #(A B C).\r\texpectedResult columnNames: #(City Population).\r\t\r\tactualResult := df collect: [ :row |\r\t\trow at: #City put: (row at: #City) asUppercase.\r\t\trow at: #Population put: (row at: #Population) asInteger.\r\t\trow removeAt: #BeenThere.\r\t\trow ].\r\t\r\tself assert: actualResult equals: expectedResult.\r\tself assert: df equals: expectedDf.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '819' ],		#self : OmReference [ '820' ],		#time : DateAndTime [ '2021-01-25T09:51:19.818871-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumn,			#protocol : #tests,			#sourceCode : 'testColumn\r\r\t| actualSeries expectedSeries |\r\r\texpectedSeries := DataSeries withValues:\r\t\t#(Barcelona Dubai London).\r\t\r\texpectedSeries name: #City.\r\texpectedSeries keys: df rowNames.\r\t\r\tactualSeries := df column: #City.\r\t\r\tself assert: actualSeries equals: expectedSeries.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '820' ],		#self : OmReference [ '821' ],		#time : DateAndTime [ '2021-01-25T09:51:19.820382-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnAt,			#protocol : #tests,			#sourceCode : 'testColumnAt\r\r\t| actualSeries expectedSeries |\r\r\texpectedSeries := DataSeries withValues:\r\t\t#(Barcelona Dubai London).\r\t\r\texpectedSeries name: #City.\r\texpectedSeries keys: df rowNames.\r\t\r\tactualSeries := df columnAt: 1.\r\t\r\tself assert: actualSeries equals: expectedSeries.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '821' ],		#self : OmReference [ '822' ],		#time : DateAndTime [ '2021-01-25T09:51:19.820596-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnAtPut,			#protocol : #tests,			#sourceCode : 'testColumnAtPut\r\r\t| actual expected |\r\r\texpected := DataFrame withRows: #(\r\t\t(\'X\' 1.609 0)\r   \t\t(\'Y\' 2.789 1)\r   \t\t(\'Z\' 8.788 0)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tactual := df.\r\tactual columnAt: 1 put: #(\'X\' \'Y\' \'Z\').\r\tactual columnAt: 3 put: #(0 1 0).\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '822' ],		#self : OmReference [ '823' ],		#time : DateAndTime [ '2021-01-25T09:51:19.820767-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnAtTransform,			#protocol : #tests,			#sourceCode : 'testColumnAtTransform\r\r\t| expected |\r\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 0 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere).\r\t\t\r\tdf columnAt: 2 transform: [ :column | column at: #B put: 0; yourself ].\r\tself assert: df equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '823' ],		#self : OmReference [ '824' ],		#time : DateAndTime [ '2021-01-25T09:51:19.820937-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnIfAbsent,			#protocol : #tests,			#sourceCode : 'testColumnIfAbsent\r\r\t| exceptionBlockEvaluated |\r\t\r\texceptionBlockEvaluated := false.\r\t\r\tdf column: #NoSuchColumn\r\t\tifAbsent: [ exceptionBlockEvaluated := true ].\r\t\t\r\tself assert: exceptionBlockEvaluated.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '824' ],		#self : OmReference [ '825' ],		#time : DateAndTime [ '2021-01-25T09:51:19.821269-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnNames,			#protocol : #tests,			#sourceCode : 'testColumnNames\r\t| newNames |\r\tnewNames := #(X Y Z).\r\tdf columnNames: newNames.\r\tself assert: df columnNames equals: newNames asOrderedCollection',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '825' ],		#self : OmReference [ '826' ],		#time : DateAndTime [ '2021-01-25T09:51:19.821436-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnNamesMustBeDistinct,			#protocol : #tests,			#sourceCode : 'testColumnNamesMustBeDistinct\r\t| newNames |\r\tnewNames := #(x y y).\r\tself should: [ df columnNames: newNames ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '826' ],		#self : OmReference [ '827' ],		#time : DateAndTime [ '2021-01-25T09:51:19.821597-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnNamesSizeMismatch,			#protocol : #tests,			#sourceCode : 'testColumnNamesSizeMismatch\r\t| tooManyNames notEnoughNames |\r\t\r\ttooManyNames := #(W X Y Z).\r\tnotEnoughNames := #(Y Z).\r\t\r\tself should: [ df columnNames: tooManyNames ] raise: SizeMismatch.\r\tself should: [ df columnNames: notEnoughNames ] raise: SizeMismatch.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '827' ],		#self : OmReference [ '828' ],		#time : DateAndTime [ '2021-01-25T09:51:19.821779-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnNotFound,			#protocol : #tests,			#sourceCode : 'testColumnNotFound\r\tself\r\t\tshould: [ df column: #NoSuchColumn ]\r\t\traise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '828' ],		#self : OmReference [ '829' ],		#time : DateAndTime [ '2021-01-25T09:51:19.821966-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnPut,			#protocol : #tests,			#sourceCode : 'testColumnPut\r\r\t| actual expected |\r\r\texpected := DataFrame withRows: #(\r\t\t(\'X\' 1.609 0)\r   \t\t(\'Y\' 2.789 1)\r   \t\t(\'Z\' 8.788 0)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tactual := df.\r\tactual column: #City put: #(\'X\' \'Y\' \'Z\').\r\tactual column: #BeenThere put: #(0 1 0).\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '829' ],		#self : OmReference [ '830' ],		#time : DateAndTime [ '2021-01-25T09:51:19.82214-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnPutIfAbsent,			#protocol : #tests,			#sourceCode : 'testColumnPutIfAbsent\r\r\t| expected exceptionBlockEvaluated |\r\t\r\texceptionBlockEvaluated := false.\r\t\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 2.789 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere).\r\t\r\tdf column: #NoSuchColumn\r\t\tput: #(0 0 0)\r\t\tifAbsent: [ exceptionBlockEvaluated := true ].\r\t\t\r\tself assert: df equals: expected.\r\tself assert: exceptionBlockEvaluated.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '830' ],		#self : OmReference [ '831' ],		#time : DateAndTime [ '2021-01-25T09:51:19.822293-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnPutNotFound,			#protocol : #tests,			#sourceCode : 'testColumnPutNotFound\r\tself\r\t\tshould: [ df column: #NoSuchColumn put: #(0 0 0) ]\r\t\traise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '831' ],		#self : OmReference [ '832' ],		#time : DateAndTime [ '2021-01-25T09:51:19.822459-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnTransform,			#protocol : #tests,			#sourceCode : 'testColumnTransform\r\r\t| expected |\r\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 0 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere).\r\t\t\r\tdf column: #Population transform: [ :column | column at: #B put: 0; yourself ].\r\tself assert: df equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '832' ],		#self : OmReference [ '833' ],		#time : DateAndTime [ '2021-01-25T09:51:19.822628-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnTransformIfAbsent,			#protocol : #tests,			#sourceCode : 'testColumnTransformIfAbsent\r\r\t| expected exceptionBlockEvaluated |\r\r\texceptionBlockEvaluated := false.\r\t\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 2.789 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere).\r\t\t\r\tdf column: #NoSuchColumn\r\t\ttransform: [ :column | column at: #B put: 0 ]\r\t\tifAbsent: [ exceptionBlockEvaluated := true ].\r\t\t\r\tself assert: df equals: expected.\r\tself assert: exceptionBlockEvaluated.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '833' ],		#self : OmReference [ '834' ],		#time : DateAndTime [ '2021-01-25T09:51:19.822795-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnTransformNotFound,			#protocol : #tests,			#sourceCode : 'testColumnTransformNotFound\r\r\t| expected |\r\t\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 2.789 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere).\r\t\t\r\tself\r\t\tshould: [\r\t\t\tdf column: #NoSuchColumn\r\t\t\t\ttransform: [ :column | column at: #B put: 0 ] ]\r\t\traise: LibrarySymbolNotFoundError.\r\t\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '834' ],		#self : OmReference [ '835' ],		#time : DateAndTime [ '2021-01-25T09:51:19.823113-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumns,			#protocol : #tests,			#sourceCode : 'testColumns\r\r\t| columnNames actualDataFrame expectedDataFrame |\r\t\r\tcolumnNames := #(City BeenThere).\r\t\r\texpectedDataFrame := DataFrame withRows: #(\r\t\t(Barcelona true)\r   \t\t(Dubai true)\r   \t\t(London false)).\r\t\t\r\texpectedDataFrame rowNames: df rowNames.\r\texpectedDataFrame columnNames: columnNames.\r\t\r\tactualDataFrame := df columns: columnNames.\r\t\r\tself assert: actualDataFrame equals: expectedDataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '835' ],		#self : OmReference [ '836' ],		#time : DateAndTime [ '2021-01-25T09:51:19.823356-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnsAt,			#protocol : #tests,			#sourceCode : 'testColumnsAt\r\r\t| columnNumbers actualDataFrame expectedDataFrame |\r\t\r\tcolumnNumbers := #(1 3).\r\t\r\texpectedDataFrame := DataFrame withRows: #(\r\t\t(Barcelona true)\r   \t\t(Dubai true)\r   \t\t(London false)).\r\t\t\r\texpectedDataFrame rowNames: df rowNames.\r\texpectedDataFrame columnNames:\r\t\t(columnNumbers collect: [ :i |\r\t\t\tdf columnNames at: i ]).\r\t\r\tactualDataFrame := df columnsAt: columnNumbers.\r\t\r\tself assert: actualDataFrame equals: expectedDataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '836' ],		#self : OmReference [ '837' ],		#time : DateAndTime [ '2021-01-25T09:51:19.82356-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnsAtPut,			#protocol : #tests,			#sourceCode : 'testColumnsAtPut\r\t| rowNames columnNames dataFrame newColumns expected |\r\t\r\trowNames := #(\'01:10\' \'01:30\' \'01:50\' \'02:10\' \'02:30\') collect: #asTime.\r\tcolumnNames := #(temperature precipitation type).\r\t\r\tdataFrame := DataFrame\r\t\twithRows: #(\r\t\t\t(2.4 true rain)\r\t\t\t(0.5 true rain)\r\t\t\t(-1.2 true snow)\r\t\t\t(-2.3 false -)\r\t\t\t(3.2 true rain))\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\t\r\tnewColumns := #(\r\t\t(1 1 1 1 1)\r\t\t(2 2 2 2 2)).\r\t\t\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(2 true 1)\r\t\t\t(2 true 1)\r\t\t\t(2 true 1)\r\t\t\t(2 false 1)\r\t\t\t(2 true 1))\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\r\tdataFrame columnsAt: #(3 1) put: newColumns.\r\tself assert: dataFrame equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '837' ],		#self : OmReference [ '838' ],		#time : DateAndTime [ '2021-01-25T09:51:19.82373-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnsFromTo,			#protocol : #tests,			#sourceCode : 'testColumnsFromTo\r\r\t| actualDataFrame expectedDataFrame |\r\t\t\r\texpectedDataFrame := DataFrame withRows: #(\r\t\t(1.609 true)\r   \t\t(2.789 true)\r   \t\t(8.788 false)).\r\t\t\r\texpectedDataFrame rowNames: df rowNames.\r\texpectedDataFrame columnNames: #(Population BeenThere).\r\t\r\tactualDataFrame := df columnsFrom: 2 to: 3.\r\t\r\tself assert: actualDataFrame equals: expectedDataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '838' ],		#self : OmReference [ '839' ],		#time : DateAndTime [ '2021-01-25T09:51:19.823917-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnsFromToPut,			#protocol : #tests,			#sourceCode : 'testColumnsFromToPut\r\t| rowNames columnNames dataFrame newColumns expected |\r\t\r\trowNames := #(\'01:10\' \'01:30\' \'01:50\' \'02:10\' \'02:30\') collect: #asTime.\r\tcolumnNames := #(temperature precipitation type).\r\t\r\tdataFrame := DataFrame\r\t\twithRows: #(\r\t\t\t(2.4 true rain)\r\t\t\t(0.5 true rain)\r\t\t\t(-1.2 true snow)\r\t\t\t(-2.3 false -)\r\t\t\t(3.2 true rain))\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\t\r\tnewColumns := #(\r\t\t(1 1 1 1 1)\r\t\t(2 2 2 2 2)).\r\t\t\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(2.4 2 1)\r\t\t\t(0.5 2 1)\r\t\t\t(-1.2 2 1)\r\t\t\t(-2.3 2 1)\r\t\t\t(3.2 2 1))\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\r\tdataFrame columnsFrom: 3 to: 2 put: newColumns.\r\tself assert: dataFrame equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '839' ],		#self : OmReference [ '840' ],		#time : DateAndTime [ '2021-01-25T09:51:19.824142-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testColumnsPut,			#protocol : #tests,			#sourceCode : 'testColumnsPut\r\t| rowNames columnNames dataFrame newColumns expected |\r\t\r\trowNames := #(\'01:10\' \'01:30\' \'01:50\' \'02:10\' \'02:30\') collect: #asTime.\r\tcolumnNames := #(temperature precipitation type).\r\t\r\tdataFrame := DataFrame\r\t\twithRows: #(\r\t\t\t(2.4 true rain)\r\t\t\t(0.5 true rain)\r\t\t\t(-1.2 true snow)\r\t\t\t(-2.3 false -)\r\t\t\t(3.2 true rain))\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\t\r\tnewColumns := #(\r\t\t(1 1 1 1 1)\r\t\t(2 2 2 2 2)).\r\t\t\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(2 true 1)\r\t\t\t(2 true 1)\r\t\t\t(2 true 1)\r\t\t\t(2 false 1)\r\t\t\t(2 true 1))\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\r\tdataFrame columns: #(type temperature) put: newColumns.\r\tself assert: dataFrame equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '840' ],		#self : OmReference [ '841' ],		#time : DateAndTime [ '2021-01-25T09:51:19.824304-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateDataFrameWith3ColumnsAndNoRows,			#protocol : #tests,			#sourceCode : 'testCreateDataFrameWith3ColumnsAndNoRows\r\t| dataFrame |\r\tdataFrame := DataFrame new: 0@3.\r\t\r\tself assert: dataFrame class equals: DataFrame.\r\tself assert: dataFrame dimensions equals: 0@3.\r\tself assert: dataFrame rowNames equals: #() asOrderedCollection.\r\tself assert: dataFrame columnNames equals: #(1 2 3) asOrderedCollection.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '841' ],		#self : OmReference [ '842' ],		#time : DateAndTime [ '2021-01-25T09:51:19.824477-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateDataFrameWithColumns,			#protocol : #tests,			#sourceCode : 'testCreateDataFrameWithColumns\r\r\t| columns dataFrame expectedValues |\r\t\r\tcolumns := #(\r\t\t(\'Robb Stark\' \'Jon Snow\' \'Eddard Stark\')\r    \t(3 4 1)\r      \t(true false true)).\r\t\r\tdataFrame := DataFrame withColumns: columns.\r\t\r\tself assert: dataFrame rowNames equals: #(1 2 3) asOrderedCollection.\r\tself assert: dataFrame columnNames equals: #(1 2 3) asOrderedCollection.\r\t\r\t"We know that it works, because we have tests for it in DataFrameInternalTests"\r\texpectedValues := DataFrameInternal withColumns: columns.\r\t\r\tself assert: dataFrame contents equals: expectedValues.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '842' ],		#self : OmReference [ '843' ],		#time : DateAndTime [ '2021-01-25T09:51:19.82465-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateDataFrameWithColumnsColumnNames,			#protocol : #tests,			#sourceCode : 'testCreateDataFrameWithColumnsColumnNames\r\r\t| columns columnNames dataFrame expectedValues |\r\t\r\tcolumns := #(\r\t\t(\'Robb Stark\' \'Jon Snow\' \'Eddard Stark\')\r    \t(3 4 1)\r      \t(true false true)).\r\t\r\tcolumnNames := #(Name Book IsAlive) asOrderedCollection.\r\tdataFrame := DataFrame\r\t\twithColumns: columns\r\t\tcolumnNames: columnNames.\r\t\r\tself assert: dataFrame rowNames equals: #(1 2 3) asOrderedCollection.\r\tself assert: dataFrame columnNames equals: columnNames.\r\t\r\t"We know that it works, because we have tests for it in DataFrameInternalTests"\r\texpectedValues := DataFrameInternal withColumns: columns.\r\t\r\tself assert: dataFrame contents equals: expectedValues.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '843' ],		#self : OmReference [ '844' ],		#time : DateAndTime [ '2021-01-25T09:51:19.824821-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateDataFrameWithColumnsRowNames,			#protocol : #tests,			#sourceCode : 'testCreateDataFrameWithColumnsRowNames\r\r\t| columns rowNames dataFrame expectedValues |\r\t\r\tcolumns := #(\r\t\t(\'Robb Stark\' \'Jon Snow\' \'Eddard Stark\')\r    \t(3 4 1)\r      \t(true false true)).\r\t\r\trowNames := #(A B C) asOrderedCollection.\r\tdataFrame := DataFrame\r\t\twithColumns: columns\r\t\trowNames: rowNames.\r\t\r\tself assert: dataFrame rowNames equals: rowNames.\r\tself assert: dataFrame columnNames equals: #(1 2 3) asOrderedCollection.\r\t\r\t"We know that it works, because we have tests for it in DataFrameInternalTests"\r\texpectedValues := DataFrameInternal withColumns: columns.\r\t\r\tself assert: dataFrame contents equals: expectedValues.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '844' ],		#self : OmReference [ '845' ],		#time : DateAndTime [ '2021-01-25T09:51:19.825-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateDataFrameWithColumnsRowNamesColumnNames,			#protocol : #tests,			#sourceCode : 'testCreateDataFrameWithColumnsRowNamesColumnNames\r\r\t| columns rowNames columnNames dataFrame expectedValues |\r\t\r\tcolumns := #(\r\t\t(\'Robb Stark\' \'Jon Snow\' \'Eddard Stark\')\r    \t(3 4 1)\r      \t(true false true)).\r\t\r\trowNames := #(A B C) asOrderedCollection.\r\tcolumnNames := #(Name Book IsAlive) asOrderedCollection.\r\t\r\tdataFrame := DataFrame\r\t\twithColumns: columns\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\r\tself assert: dataFrame rowNames equals: rowNames.\r\tself assert: dataFrame columnNames equals: columnNames.\r\t\r\t"We know that it works, because we have tests for it in DataFrameInternalTests"\r\texpectedValues := DataFrameInternal withColumns: columns.\r\t\r\tself assert: dataFrame contents equals: expectedValues.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '845' ],		#self : OmReference [ '846' ],		#time : DateAndTime [ '2021-01-25T09:51:19.825178-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateDataFrameWithDataFrameInternalRowNamesColumnNames,			#protocol : #tests,			#sourceCode : 'testCreateDataFrameWithDataFrameInternalRowNamesColumnNames\r\r\t| rows dataFrameInternal rowNames columnNames dataFrame expectedValues |\r\t\r\trows := #(\r\t\t(\'Robb Stark\' 3 true)\r    \t(\'Jon Snow\' 4 false)\r      \t(\'Eddard Stark\' 1 true)).\r\t\r\tdataFrameInternal := DataFrameInternal withRows: rows.\r\trowNames := #(A B C) asOrderedCollection.\r\tcolumnNames := #(Name Book IsAlive) asOrderedCollection.\r\t\r\tdataFrame := DataFrame\r\t\twithDataFrameInternal: dataFrameInternal\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\r\tself assert: dataFrame rowNames equals: rowNames.\r\tself assert: dataFrame columnNames equals: columnNames.\r\t\r\t"We know that it works, because we have tests for it in DataFrameInternalTests"\r\texpectedValues := DataFrameInternal withRows: rows.\r\t\r\tself assert: dataFrame contents equals: expectedValues.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '846' ],		#self : OmReference [ '847' ],		#time : DateAndTime [ '2021-01-25T09:51:19.825345-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateDataFrameWithRows,			#protocol : #tests,			#sourceCode : 'testCreateDataFrameWithRows\r\r\t| rows dataFrame expectedValues |\r\t\r\trows := #(\r\t\t(\'Robb Stark\' 3 true)\r    \t(\'Jon Snow\' 4 false)\r      \t(\'Eddard Stark\' 1 true)).\r\t\r\tdataFrame := DataFrame\r\t\twithRows: rows.\r\t\r\tself assert: dataFrame rowNames equals: #(1 2 3) asOrderedCollection.\r\tself assert: dataFrame columnNames equals: #(1 2 3) asOrderedCollection.\r\t\r\t"We know that it works, because we have tests for it in DataFrameInternalTests"\r\texpectedValues := DataFrameInternal withRows: rows.\r\t\r\tself assert: dataFrame contents equals: expectedValues.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '847' ],		#self : OmReference [ '848' ],		#time : DateAndTime [ '2021-01-25T09:51:19.82552-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateDataFrameWithRowsColumnNames,			#protocol : #tests,			#sourceCode : 'testCreateDataFrameWithRowsColumnNames\r\r\t| rows columnNames dataFrame expectedValues |\r\t\r\trows := #(\r\t\t(\'Robb Stark\' 3 true)\r    \t(\'Jon Snow\' 4 false)\r      \t(\'Eddard Stark\' 1 true)).\r\t\r\tcolumnNames := #(Name Book IsAlive) asOrderedCollection.\r\t\r\tdataFrame := DataFrame\r\t\twithRows: rows\r\t\tcolumnNames: columnNames.\r\t\r\tself assert: dataFrame rowNames equals: #(1 2 3) asOrderedCollection.\r\tself assert: dataFrame columnNames equals: columnNames.\r\t\r\t"We know that it works, because we have tests for it in DataFrameInternalTests"\r\texpectedValues := DataFrameInternal withRows: rows.\r\t\r\tself assert: dataFrame contents equals: expectedValues.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '848' ],		#self : OmReference [ '849' ],		#time : DateAndTime [ '2021-01-25T09:51:19.825692-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateDataFrameWithRowsRowNames,			#protocol : #tests,			#sourceCode : 'testCreateDataFrameWithRowsRowNames\r\r\t| rows rowNames dataFrame expectedValues |\r\t\r\trows := #(\r\t\t(\'Robb Stark\' 3 true)\r    \t(\'Jon Snow\' 4 false)\r      \t(\'Eddard Stark\' 1 true)).\r\t\r\trowNames := #(A B C) asOrderedCollection.\r\t\r\tdataFrame := DataFrame\r\t\twithRows: rows\r\t\trowNames: rowNames.\r\t\r\tself assert: dataFrame rowNames equals: rowNames.\r\tself assert: dataFrame columnNames equals: #(1 2 3) asOrderedCollection.\r\t\r\t"We know that it works, because we have tests for it in DataFrameInternalTests"\r\texpectedValues := DataFrameInternal withRows: rows.\r\t\r\tself assert: dataFrame contents equals: expectedValues.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '849' ],		#self : OmReference [ '850' ],		#time : DateAndTime [ '2021-01-25T09:51:19.825865-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateDataFrameWithRowsRowNamesColumnNames,			#protocol : #tests,			#sourceCode : 'testCreateDataFrameWithRowsRowNamesColumnNames\r\r\t| rows rowNames columnNames dataFrame expectedValues |\r\t\r\trows := #(\r\t\t(\'Robb Stark\' 3 true)\r    \t(\'Jon Snow\' 4 false)\r      \t(\'Eddard Stark\' 1 true)).\r\t\r\trowNames := #(A B C) asOrderedCollection.\r\tcolumnNames := #(Name Book IsAlive) asOrderedCollection.\r\t\r\tdataFrame := DataFrame\r\t\twithRows: rows\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\r\tself assert: dataFrame rowNames equals: rowNames.\r\tself assert: dataFrame columnNames equals: columnNames.\r\t\r\t"We know that it works, because we have tests for it in DataFrameInternalTests"\r\texpectedValues := DataFrameInternal withRows: rows.\r\t\r\tself assert: dataFrame contents equals: expectedValues.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '850' ],		#self : OmReference [ '851' ],		#time : DateAndTime [ '2021-01-25T09:51:19.826025-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateEmptyDataFrame,			#protocol : #tests,			#sourceCode : 'testCreateEmptyDataFrame\r\t| dataFrame |\r\tdataFrame := DataFrame new.\r\t\r\tself assert: dataFrame class equals: DataFrame.\r\tself assert: dataFrame dimensions equals: 0@0.\r\tself assert: dataFrame rowNames equals: #() asOrderedCollection.\r\tself assert: dataFrame columnNames equals: #() asOrderedCollection.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '851' ],		#self : OmReference [ '852' ],		#time : DateAndTime [ '2021-01-25T09:51:19.826211-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateEmptyDataFrameWithColumnNames,			#protocol : #tests,			#sourceCode : 'testCreateEmptyDataFrameWithColumnNames\r\t| columnNames dataFrame |\r\t\r\tcolumnNames := #(Name Age Nationality) asOrderedCollection.\r\tdataFrame := DataFrame withColumnNames: columnNames.\r\t\r\tself assert: dataFrame class equals: DataFrame.\r\tself assert: dataFrame dimensions equals: 0@3.\r\tself assert: dataFrame rowNames equals: #() asOrderedCollection.\r\tself assert: dataFrame columnNames equals: columnNames.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '852' ],		#self : OmReference [ '853' ],		#time : DateAndTime [ '2021-01-25T09:51:19.826372-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateEmptyDataFrameWithColumns,			#protocol : #tests,			#sourceCode : 'testCreateEmptyDataFrameWithColumns\r\r\t| dataFrame  |\r\tdataFrame := DataFrame withColumns: #().\r\t\r\tself assert: dataFrame class equals: DataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '853' ],		#self : OmReference [ '854' ],		#time : DateAndTime [ '2021-01-25T09:51:19.82653-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateEmptyDataFrameWithColumnsColumnNames,			#protocol : #tests,			#sourceCode : 'testCreateEmptyDataFrameWithColumnsColumnNames\r\r\t| dataFrame  |\r\tdataFrame := DataFrame withColumns: #() columnNames: #().\r\t\r\tself assert: dataFrame class equals: DataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '854' ],		#self : OmReference [ '855' ],		#time : DateAndTime [ '2021-01-25T09:51:19.826683-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateEmptyDataFrameWithColumnsRowNames,			#protocol : #tests,			#sourceCode : 'testCreateEmptyDataFrameWithColumnsRowNames\r\r\t| dataFrame  |\r\tdataFrame := DataFrame withColumns: #() rowNames: #().\r\t\r\tself assert: dataFrame class equals: DataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '855' ],		#self : OmReference [ '856' ],		#time : DateAndTime [ '2021-01-25T09:51:19.826836-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateEmptyDataFrameWithColumnsRowNamesColumnNames,			#protocol : #tests,			#sourceCode : 'testCreateEmptyDataFrameWithColumnsRowNamesColumnNames\r\r\t| dataFrame  |\r\tdataFrame := DataFrame withColumns: #() rowNames: #() columnNames: #().\r\t\r\tself assert: dataFrame class equals: DataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '856' ],		#self : OmReference [ '857' ],		#time : DateAndTime [ '2021-01-25T09:51:19.827002-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateEmptyDataFrameWithRowNames,			#protocol : #tests,			#sourceCode : 'testCreateEmptyDataFrameWithRowNames\r\t| rowNames dataFrame |\r\t\r\trowNames := #(A B C) asOrderedCollection.\r\tdataFrame := DataFrame withRowNames: rowNames.\r\t\r\tself assert: dataFrame class equals: DataFrame.\r\tself assert: dataFrame dimensions equals: 3@0.\r\tself assert: dataFrame rowNames equals: rowNames.\r\tself assert: dataFrame columnNames equals: #() asOrderedCollection.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '857' ],		#self : OmReference [ '858' ],		#time : DateAndTime [ '2021-01-25T09:51:19.827164-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateEmptyDataFrameWithRowNamesColumnNames,			#protocol : #tests,			#sourceCode : 'testCreateEmptyDataFrameWithRowNamesColumnNames\r\t| rowNames columnNames dataFrame |\r\t\r\trowNames := #(A B C) asOrderedCollection.\r\tcolumnNames := #(Name Age Nationality) asOrderedCollection.\r\t\r\tdataFrame := DataFrame\r\t\twithRowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\r\tself assert: dataFrame class equals: DataFrame.\r\tself assert: dataFrame dimensions equals: 3@3.\r\tself assert: dataFrame rowNames equals: rowNames.\r\tself assert: dataFrame columnNames equals: columnNames.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '858' ],		#self : OmReference [ '859' ],		#time : DateAndTime [ '2021-01-25T09:51:19.827316-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateEmptyDataFrameWithRows,			#protocol : #tests,			#sourceCode : 'testCreateEmptyDataFrameWithRows\r\r\t| dataFrame  |\r\tdataFrame := DataFrame withRows: #().\r\t\r\tself assert: dataFrame class equals: DataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '859' ],		#self : OmReference [ '860' ],		#time : DateAndTime [ '2021-01-25T09:51:19.827463-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateEmptyDataFrameWithRowsColumnNames,			#protocol : #tests,			#sourceCode : 'testCreateEmptyDataFrameWithRowsColumnNames\r\r\t| dataFrame  |\r\tdataFrame := DataFrame withRows: #() columnNames: #().\r\t\r\tself assert: dataFrame class equals: DataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '860' ],		#self : OmReference [ '861' ],		#time : DateAndTime [ '2021-01-25T09:51:19.827642-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateEmptyDataFrameWithRowsRowNames,			#protocol : #tests,			#sourceCode : 'testCreateEmptyDataFrameWithRowsRowNames\r\r\t| dataFrame  |\r\tdataFrame := DataFrame withRows: #() rowNames: #().\r\t\r\tself assert: dataFrame class equals: DataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '861' ],		#self : OmReference [ '862' ],		#time : DateAndTime [ '2021-01-25T09:51:19.827803-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCreateEmptyDataFrameWithRowsRowNamesColumnNames,			#protocol : #tests,			#sourceCode : 'testCreateEmptyDataFrameWithRowsRowNamesColumnNames\r\r\t| dataFrame  |\r\tdataFrame := DataFrame withRows: #() rowNames: #() columnNames: #().\r\t\r\tself assert: dataFrame class equals: DataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '862' ],		#self : OmReference [ '863' ],		#time : DateAndTime [ '2021-01-25T09:51:19.827966-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testCrossTabulation,			#protocol : #tests,			#sourceCode : 'testCrossTabulation\r\r\t| dataFrame expected |\r\t\r\tdataFrame := DataFrame withRows: #(\r\t\t(Male Young)\r\t\t(Female Old)\r\t\t(Female Young)\r\t\t(Female Young)\r\t\t(Male Old)).\r\tdataFrame columnNames: #(Gender Age).\r\t\r\texpected := DataFrame withRows:\r\t\t#((1 2)(1 1)).\r\t\t\r\texpected rowNames: #(Female Male).\r\texpected columnNames: #(Old Young).\t\r\t\r\tself assert: (dataFrame crossTabulate: #Gender with: #Age) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '863' ],		#self : OmReference [ '864' ],		#time : DateAndTime [ '2021-01-25T09:51:19.828121-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testDetect,			#protocol : #tests,			#sourceCode : 'testDetect\r\t| actual expected |\r\r\texpected := DataSeries\r\t\twithKeys: df columnNames\r\t\tvalues: #(London 8.788 false)\r\t\tname: #C.\r\t\t\r\tactual := df detect:\r\t\t[ :row | (row at: #BeenThere) not ].\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '864' ],		#self : OmReference [ '865' ],		#time : DateAndTime [ '2021-01-25T09:51:19.82828-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testDetectIfNone,			#protocol : #tests,			#sourceCode : 'testDetectIfNone\r\t| actual expected |\r\r\texpected := DataSeries\r\t\twithKeys: df columnNames\r\t\tvalues: #(London 8.788 false)\r\t\tname: #C.\r\t\t\r\tactual := df\r\t\tdetect: [ :row | (row at: #BeenThere) not ]\r\t\tifNone: [ \'not found\' ].\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '865' ],		#self : OmReference [ '866' ],		#time : DateAndTime [ '2021-01-25T09:51:19.828469-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testDetectIfNoneNotFound,			#protocol : #tests,			#sourceCode : 'testDetectIfNoneNotFound\r\t| actual expected |\r\t\r\texpected := \'not found\'.\r\t\t\r\tactual := df\r\t\tdetect: [ :row | (row at: #City) = \'Paris\' ]\r\t\tifNone: [ \'not found\' ].\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '866' ],		#self : OmReference [ '867' ],		#time : DateAndTime [ '2021-01-25T09:51:19.828626-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testDetectNotFound,			#protocol : #tests,			#sourceCode : 'testDetectNotFound\r\tself\r\t\tshould: [ df detect: [ :row | row at: #City = \'Paris\' ] ]\r\t\traise: NotFound',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '867' ],		#self : OmReference [ '868' ],		#time : DateAndTime [ '2021-01-25T09:51:19.828795-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testDo,			#protocol : #tests,			#sourceCode : 'testDo\r\r\t| actual expected |\r\r\texpected := OrderedCollection\r\t\twith: #(Barcelona 1.609 true) asDataSeries\r\t\twith: #(Dubai 2.789 true) asDataSeries\r\t\twith: #(London 8.788 false) asDataSeries.\r\t\t\r\texpected doWithIndex: [ :each :i |\r\t\teach keys: #(City Population BeenThere).\r\t\teach name: (#(A B C) at: i) ].\r\t\t\r\tactual := OrderedCollection new.\r\t\r\tdf do: [ :each |\r\t\tactual add: each ].\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '868' ],		#self : OmReference [ '869' ],		#time : DateAndTime [ '2021-01-25T09:51:19.828955-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testDoCanModifyRows,			#protocol : #tests,			#sourceCode : 'testDoCanModifyRows\r\t| expected |\r\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(BARCELONA 1.609 true)\r\t\t\t(DUBAI 2.789 true)\r\t\t\t(LONDON 8.788 false))\r\t\trowNames: df rowNames\r\t\tcolumnNames: df columnNames.\r\t\r\tdf do: [ :row |\r\t\trow at: #City put: (row at: #City) asUppercase ].\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '869' ],		#self : OmReference [ '870' ],		#time : DateAndTime [ '2021-01-25T09:51:19.829115-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testEquality,			#protocol : #tests,			#sourceCode : 'testEquality\r\r\t| df1 df2 |\r\t\r\tdf1 := DataFrame withRows: #((1 2)(3 4)).\r\tdf2 := DataFrame withRows: #((1 2)(3 4)).\r\t\r\tself assert: df1 equals: df2.\r\tself assert: (df1 = df2).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '870' ],		#self : OmReference [ '871' ],		#time : DateAndTime [ '2021-01-25T09:51:19.829278-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testFindAllAtColumn,			#protocol : #find-select,			#sourceCode : 'testFindAllAtColumn\r\r\tdf addRow: #(\'London\' 8.788 false) named: #D.\r\tself assert: (df findAll: \'London\' atColumn: \'City\') equals: #(\'C\' \'D\') asOrderedCollection.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '871' ],		#self : OmReference [ '872' ],		#time : DateAndTime [ '2021-01-25T09:51:19.829439-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testFindAllAtColumnBoolean,			#protocol : #find-select,			#sourceCode : 'testFindAllAtColumnBoolean\r\r\tdf addRow: #(Barcelona 1.609 true) named: #D.\r\tself assert: (df findAll: true atColumn: \'BeenThere\') equals: #(\'A\' \'B\' \'D\') asOrderedCollection.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '872' ],		#self : OmReference [ '873' ],		#time : DateAndTime [ '2021-01-25T09:51:19.829595-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testFindAllAtColumnFloat,			#protocol : #find-select,			#sourceCode : 'testFindAllAtColumnFloat\r\r\tdf addRow: #(Dubai 2.789 true) named: #D.\r\tself assert: (df findAll: 2.789 atColumn: \'Population\') equals: #(\'B\' \'D\') asOrderedCollection.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '873' ],		#self : OmReference [ '874' ],		#time : DateAndTime [ '2021-01-25T09:51:19.829753-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testFindAllIndicesOfAtColumn,			#protocol : #find-select,			#sourceCode : 'testFindAllIndicesOfAtColumn\r\r\tdf addRow: #(\'London\' 8.788 false) named: #D.\r\tself assert: (df findAllIndicesOf: \'London\' atColumn: \'City\') equals: #(3 4) asOrderedCollection.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '874' ],		#self : OmReference [ '875' ],		#time : DateAndTime [ '2021-01-25T09:51:19.829908-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testFindAllIndicesOfAtColumnBoolean,			#protocol : #find-select,			#sourceCode : 'testFindAllIndicesOfAtColumnBoolean\r\r\tdf addRow: #(Barcelona 1.609 true) named: #D.\r\tself assert: (df findAllIndicesOf: true atColumn: \'BeenThere\') equals: #(1 2 4) asOrderedCollection.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '875' ],		#self : OmReference [ '876' ],		#time : DateAndTime [ '2021-01-25T09:51:19.830062-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testFindAllIndicesOfAtColumnFloat,			#protocol : #find-select,			#sourceCode : 'testFindAllIndicesOfAtColumnFloat\r\r\tdf addRow: #(Dubai 2.789 true) named: #D.\r\tself assert: (df findAllIndicesOf: 2.789 atColumn: \'Population\') equals: #(2 4) asOrderedCollection.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '876' ],		#self : OmReference [ '877' ],		#time : DateAndTime [ '2021-01-25T09:51:19.830216-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testIndexOfColumnNamed,			#protocol : #tests,			#sourceCode : 'testIndexOfColumnNamed\r\t| expected actual |\r\texpected := 2.\r\tactual := df indexOfColumnNamed: #Population.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '877' ],		#self : OmReference [ '878' ],		#time : DateAndTime [ '2021-01-25T09:51:19.830378-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testIndexOfColumnNamedIfAbsent,			#protocol : #tests,			#sourceCode : 'testIndexOfColumnNamedIfAbsent \r\t| expected actual exceptionBlockEvaluated |\r\texceptionBlockEvaluated := false.\r\texpected := 2.\r\t\r\tactual := df\r\t\tindexOfColumnNamed: #Population\r\t\tifAbsent: [ exceptionBlockEvaluated := true ].\r\t\t\r\tself assert: actual equals: expected.\r\tself deny: exceptionBlockEvaluated',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '878' ],		#self : OmReference [ '879' ],		#time : DateAndTime [ '2021-01-25T09:51:19.830551-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testIndexOfColumnNamedIfAbsentNotFound,			#protocol : #tests,			#sourceCode : 'testIndexOfColumnNamedIfAbsentNotFound\r\t| exceptionBlockEvaluated |\r\texceptionBlockEvaluated := false.\r\t\r\tdf indexOfColumnNamed: #NoSuchColumn\r\t\tifAbsent: [ exceptionBlockEvaluated := true ].\r\t\t\r\tself assert: exceptionBlockEvaluated',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '879' ],		#self : OmReference [ '880' ],		#time : DateAndTime [ '2021-01-25T09:51:19.830708-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testIndexOfColumnNamedNotFound,			#protocol : #tests,			#sourceCode : 'testIndexOfColumnNamedNotFound\r\tself\r\t\tshould: [ df indexOfColumnNamed: #NoSuchColumn ]\r\t\traise: LibrarySymbolNotFoundError',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '880' ],		#self : OmReference [ '881' ],		#time : DateAndTime [ '2021-01-25T09:51:19.830859-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testIndexOfRowNamed,			#protocol : #tests,			#sourceCode : 'testIndexOfRowNamed\r\t| expected actual |\r\texpected := 2.\r\tactual := df indexOfRowNamed: #B.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '881' ],		#self : OmReference [ '882' ],		#time : DateAndTime [ '2021-01-25T09:51:19.831113-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testIndexOfRowNamedIfAbsent,			#protocol : #tests,			#sourceCode : 'testIndexOfRowNamedIfAbsent \r\t| expected actual exceptionBlockEvaluated |\r\texceptionBlockEvaluated := false.\r\texpected := 2.\r\t\r\tactual := df\r\t\tindexOfRowNamed: #B\r\t\tifAbsent: [ exceptionBlockEvaluated := true ].\r\t\t\r\tself assert: actual equals: expected.\r\tself deny: exceptionBlockEvaluated',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '882' ],		#self : OmReference [ '883' ],		#time : DateAndTime [ '2021-01-25T09:51:19.831397-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testIndexOfRowNamedIfAbsentNotFound,			#protocol : #tests,			#sourceCode : 'testIndexOfRowNamedIfAbsentNotFound\r\t| exceptionBlockEvaluated |\r\texceptionBlockEvaluated := false.\r\t\r\tdf indexOfRowNamed: #NoSuchRow\r\t\tifAbsent: [ exceptionBlockEvaluated := true ].\r\t\t\r\tself assert: exceptionBlockEvaluated',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '883' ],		#self : OmReference [ '884' ],		#time : DateAndTime [ '2021-01-25T09:51:19.831575-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testIndexOfRowNamedNotFound,			#protocol : #tests,			#sourceCode : 'testIndexOfRowNamedNotFound\r\tself\r\t\tshould: [ df indexOfRowNamed: #NoSuchRow ]\r\t\traise: LibrarySymbolNotFoundError',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '884' ],		#self : OmReference [ '885' ],		#time : DateAndTime [ '2021-01-25T09:51:19.831775-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInequality,			#protocol : #tests,			#sourceCode : 'testInequality\r\r\t| df1 df2 df3 df4 df5 |\r\t\r\t"Other data frames will be compared to this one"\r\tdf1 := DataFrame withRows: #((1 2)(3 4)).\r\tdf1 rowNames: #(a b).\r\tdf1 columnNames: #(x y).\r\t\r\t"This one has different row names"\r\tdf2 := DataFrame withRows: #((1 2)(3 4)).\r\tdf2 rowNames: #(c b).\r\tdf2 columnNames: #(x y).\r\t\r\t"This one has different column names"\r\tdf3 := DataFrame withRows: #((1 2)(3 4)).\r\tdf3 rowNames: #(a b).\r\tdf3 columnNames: #(x z).\r\t\r\t"This one has different dimensions"\r\tdf4 := DataFrame withRows: #((1 2)(3 4)(5 6)).\r\tdf4 rowNames: #(a b c).\r\tdf4 columnNames: #(x z).\r\t\r\t"This one has different values"\r\tdf5 := DataFrame withRows: #((1 2)(3 5)).\r\tdf5 rowNames: #(a b).\r\tdf5 columnNames: #(x z).\r\r\tself assert: (df2 = df1) not.\r\tself assert: (df3 = df1) not.\r\tself assert: (df4 = df1) not.\r\tself assert: (df5 = df1) not.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '885' ],		#self : OmReference [ '886' ],		#time : DateAndTime [ '2021-01-25T09:51:19.833358-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInjectInto,			#protocol : #tests,			#sourceCode : 'testInjectInto\r\t| numericDataFrame actual expected |\r\t\r\tnumericDataFrame := DataFrame \r\t\twithRows: #(\r\t\t\t(4.5 86 24)\r\t\t\t(2.3 60 14)\r\t\t\t(1.2 56 16)\r\t\t\t(-1.0 12 18))\r\t\trowNames: #(A B C D)\r\t\tcolumnNames: #(temperature humidity wind).\r\r\texpected := DataSeries\r\t\twithKeys: #(temperature humidity wind)\r\t\tvalues: #(7.0 214 72)\r\t\tname: \'(no name)\'.\r\t\t\r\tactual := numericDataFrame inject: 0 into:\r\t\t[ :sum :each | sum + each ].\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '886' ],		#self : OmReference [ '887' ],		#time : DateAndTime [ '2021-01-25T09:51:19.833576-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoin,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoin\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true false 0)\r   \t\t(Dubai 2.789 true false 1)\r   \t\t(London 8.788 false true 2))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df innerJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '887' ],		#self : OmReference [ '888' ],		#time : DateAndTime [ '2021-01-25T09:51:19.833749-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinNoIntersection,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinNoIntersection\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(D E F)\r\t\tcolumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withColumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df innerJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '888' ],		#self : OmReference [ '889' ],		#time : DateAndTime [ '2021-01-25T09:51:19.833926-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOn,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOn\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df innerJoin: df2 on: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '889' ],		#self : OmReference [ '890' ],		#time : DateAndTime [ '2021-01-25T09:51:19.834089-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOnEmpty,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOnEmpty\r\t| df2 expected |\r\t\r\tdf2 := DataFrame new.\r\t\r\texpected := DataFrame withColumnNames: #(City Population BeenThere).\r\t\r\tself assert: (df innerJoin: df2) equals: expected.\r\tself assert: (df2 innerJoin: df) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '890' ],		#self : OmReference [ '891' ],		#time : DateAndTime [ '2021-01-25T09:51:19.83425-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOnEmptyWithColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOnEmptyWithColumnNames\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withColumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withColumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df innerJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '891' ],		#self : OmReference [ '892' ],		#time : DateAndTime [ '2021-01-25T09:51:19.834426-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOnLeftOnRight,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOnLeftOnRight\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key1 A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key2 C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'K0\' \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'K1\' \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'K2\' \'B2\' true)\r\t\t)\r\t\tcolumnNames: #(Key1 A B Key2 C D).\r\t\t\r\tself assert: (df innerJoin: df2 onLeft: \'Key1\' onRight: \'Key2\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '892' ],		#self : OmReference [ '893' ],		#time : DateAndTime [ '2021-01-25T09:51:19.834616-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOnLeftOnRightDuplicateKeys,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOnLeftOnRightDuplicateKeys\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K1\' \'A2\' 2)\r\t\t(\'K2\' \'A3\' 3)\r\t\t(\'K0\' \'A4\' 4)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'2K1\' \'1K2\' \'2K0\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K3\' \'B0\' false)\r\t\t(\'K2\' \'B1\' true)\r\t\t(\'K2\' \'B2\' false)\r\t\t(\'K1\' \'B3\' true)\r\t\t(\'K3\' \'B4\' false)\r\t\t(\'K3\' \'B5\' true)\r\t\t(\'K0\' \'B6\' false)\r\t\t)\r\t\trowNames: #(\'1K3\' \'1K2\' \'2K2\' \'1K1\' \'2K3\' \'3K3\' \'1K0\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B6\' false)\r\t\t(\'K1\' \'A1\' 1 \'B3\' true)\r\t\t(\'K1\' \'A2\' 2 \'B3\' true)\r\t\t(\'K2\' \'A3\' 3 \'B1\' true)\r\t\t(\'K2\' \'A3\' 3 \'B2\' false)\r\t\t(\'K0\' \'A4\' 4 \'B6\' false)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df innerJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '893' ],		#self : OmReference [ '894' ],		#time : DateAndTime [ '2021-01-25T09:51:19.834793-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOnLeftOnRightMissingKey,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOnLeftOnRightMissingKey\r\r\t| df2 |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key1 A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key2 C D).\r\t\t\r\tself should: [df innerJoin: df2 onLeft: \'Key\' onRight: \'Key2\'] raise: Error.\r\tself should: [df innerJoin: df2 onLeft: \'Key1\' onRight: \'Key\'] raise: Error.\r\tself should: [df innerJoin: df2 onLeft: \'Key\' onRight: \'Key\'] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '894' ],		#self : OmReference [ '895' ],		#time : DateAndTime [ '2021-01-25T09:51:19.83499-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOnLeftOnRightNoIntersection,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOnLeftOnRightNoIntersection\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'L0\' \'B0\' true)\r\t\t(\'L1\' \'B1\' false)\r\t\t(\'L2\' \'B2\' true)\r\t\t(\'L3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withColumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df innerJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '895' ],		#self : OmReference [ '896' ],		#time : DateAndTime [ '2021-01-25T09:51:19.835157-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOnLeftOnRightOnEmpty,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOnLeftOnRightOnEmpty\r\r\t| df2 |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame new.\r\t\t\r\tself should: [df innerJoin: df2 onLeft: \'Key\' onRight: \'Key\'] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '896' ],		#self : OmReference [ '897' ],		#time : DateAndTime [ '2021-01-25T09:51:19.83533-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOnLeftOnRightOnEmptyWithColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOnLeftOnRightOnEmptyWithColumnNames\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withColumnNames: #(Key C D).\r\t\r\texpected := DataFrame withColumnNames: #(Key A B C D).\r\tself assert: (df innerJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.\r\t\r\texpected := DataFrame withColumnNames: #(Key C D A B).\r\tself assert: (df2 innerJoin: df onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '897' ],		#self : OmReference [ '898' ],		#time : DateAndTime [ '2021-01-25T09:51:19.835502-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOnLeftOnRightOnSelf,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOnLeftOnRightOnSelf\r\t\r\t| expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\t\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1 \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2 \'A2\' 2)\r\t\t)\r\t\tcolumnNames: #(Key A_x B_x A_y B_y).\r\t\t\r\tself assert: (df innerJoin: df onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '898' ],		#self : OmReference [ '899' ],		#time : DateAndTime [ '2021-01-25T09:51:19.835677-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOnLeftOnRightRowMismatch,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOnLeftOnRightRowMismatch\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K3\' \'A3\' 3)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K3\' \'A3\' 3 \'B3\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df innerJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '899' ],		#self : OmReference [ '900' ],		#time : DateAndTime [ '2021-01-25T09:51:19.835854-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOnLeftOnRightSameColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOnLeftOnRightSameColumnNames\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key A B).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t)\r\t\tcolumnNames: #(Key A_x B_x A_y B_y).\r\t\t\r\tself assert: (df innerJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '900' ],		#self : OmReference [ '901' ],		#time : DateAndTime [ '2021-01-25T09:51:19.836033-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOnLeftOnRightSameKeyName,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOnLeftOnRightSameKeyName\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df innerJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '901' ],		#self : OmReference [ '902' ],		#time : DateAndTime [ '2021-01-25T09:51:19.836196-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinOnSelf,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinOnSelf\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true Dubai 2.789 true)\r   \t\t(London 8.788 false London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City_x Population_x BeenThere_x City_y Population_y BeenThere_y).\r\t\r\tself assert: (df innerJoin: df) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '902' ],		#self : OmReference [ '903' ],		#time : DateAndTime [ '2021-01-25T09:51:19.836363-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinRowMismatch,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinRowMismatch\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(A D C)\r\t\tcolumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true false 0)\r   \t\t(London 8.788 false true 2))\r\t\trowNames: #(A C)\r\t\tcolumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df innerJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '903' ],		#self : OmReference [ '904' ],		#time : DateAndTime [ '2021-01-25T09:51:19.836534-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testInnerJoinSameColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testInnerJoinSameColumnNames\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(A D C)\r\t\tcolumnNames: #(Capital Population).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true false 0)\r   \t\t(London 8.788 false true 2))\r\t\trowNames: #(A C)\r\t\tcolumnNames: #(City Population_x BeenThere Capital Population_y).\r\t\r\tself assert: (df innerJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '904' ],		#self : OmReference [ '905' ],		#time : DateAndTime [ '2021-01-25T09:51:19.836704-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoin,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoin\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true false 0)\r   \t\t(Dubai 2.789 true false 1)\r   \t\t(London 8.788 false true 2))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df leftJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '905' ],		#self : OmReference [ '906' ],		#time : DateAndTime [ '2021-01-25T09:51:19.836873-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinNoIntersection,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinNoIntersection\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(D E F)\r\t\tcolumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true nil nil)\r   \t\t(Dubai 2.789 true nil nil)\r   \t\t(London 8.788 false nil nil))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df leftJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '906' ],		#self : OmReference [ '907' ],		#time : DateAndTime [ '2021-01-25T09:51:19.837046-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOn,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOn\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'B1\' false)\r\t\t(\'K2\' \'A2\' 2  \'B2\' true)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df leftJoin: df2 on: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '907' ],		#self : OmReference [ '908' ],		#time : DateAndTime [ '2021-01-25T09:51:19.837219-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOnEmpty,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOnEmpty\r\t| df2 expected |\r\t\r\tdf2 := DataFrame new.\r\t\r\texpected := DataFrame withColumnNames: #(City Population BeenThere).\r\t\r\tself assert: (df leftJoin: df2) equals: df.\r\tself assert: (df2 leftJoin: df) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '908' ],		#self : OmReference [ '909' ],		#time : DateAndTime [ '2021-01-25T09:51:19.837388-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOnEmptyWithColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOnEmptyWithColumnNames\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withColumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true nil nil)\r   \t\t(Dubai 2.789 true nil nil)\r   \t\t(London 8.788 false nil nil))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df leftJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '909' ],		#self : OmReference [ '910' ],		#time : DateAndTime [ '2021-01-25T09:51:19.837568-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOnLeftOnRight,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOnLeftOnRight\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key1 A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key2 C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'K0\' \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'K1\' \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'K2\' \'B2\' true)\r\t\t)\r\t\tcolumnNames: #(Key1 A B Key2 C D).\r\t\t\r\tself assert: (df leftJoin: df2 onLeft: \'Key1\' onRight: \'Key2\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '910' ],		#self : OmReference [ '911' ],		#time : DateAndTime [ '2021-01-25T09:51:19.837756-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOnLeftOnRightDuplicateKeys,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOnLeftOnRightDuplicateKeys\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K1\' \'A2\' 2)\r\t\t(\'K2\' \'A3\' 3)\r\t\t(\'K0\' \'A4\' 4)\r\t\t(\'K5\' \'A5\' 5)\r\t\t(\'K6\' \'A6\' 6)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'2K1\' \'1K2\' \'2K0\' \'1K5\' \'1K6\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K3\' \'B0\' false)\r\t\t(\'K2\' \'B1\' true)\r\t\t(\'K2\' \'B2\' false)\r\t\t(\'K1\' \'B3\' true)\r\t\t(\'K3\' \'B4\' false)\r\t\t(\'K3\' \'B5\' true)\r\t\t(\'K0\' \'B6\' false)\r\t\t)\r\t\trowNames: #(\'1K3\' \'1K2\' \'2K2\' \'1K1\' \'2K3\' \'3K3\' \'1K0\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B6\' false)\r\t\t(\'K1\' \'A1\' 1 \'B3\' true)\r\t\t(\'K1\' \'A2\' 2 \'B3\' true)\r\t\t(\'K2\' \'A3\' 3 \'B1\' true)\r\t\t(\'K2\' \'A3\' 3 \'B2\' false)\r\t\t(\'K0\' \'A4\' 4 \'B6\' false)\r\t\t(\'K5\' \'A5\' 5 nil nil)\r\t\t(\'K6\' \'A6\' 6 nil nil)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df leftJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '911' ],		#self : OmReference [ '912' ],		#time : DateAndTime [ '2021-01-25T09:51:19.837931-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOnLeftOnRightMissingKey,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOnLeftOnRightMissingKey\r\r\t| df2 |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key1 A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key2 C D).\r\t\t\r\tself should: [df leftJoin: df2 onLeft: \'Key\' onRight: \'Key2\'] raise: Error.\r\tself should: [df leftJoin: df2 onLeft: \'Key1\' onRight: \'Key\'] raise: Error.\r\tself should: [df leftJoin: df2 onLeft: \'Key\' onRight: \'Key\'] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '912' ],		#self : OmReference [ '913' ],		#time : DateAndTime [ '2021-01-25T09:51:19.83811-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOnLeftOnRightNoIntersection,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOnLeftOnRightNoIntersection\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'L0\' \'B0\' true)\r\t\t(\'L1\' \'B1\' false)\r\t\t(\'L2\' \'B2\' true)\r\t\t(\'L3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected :=  DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 nil nil)\r\t\t(\'K1\' \'A1\' 1 nil nil)\r\t\t(\'K2\' \'A2\' 2 nil nil)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df leftJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '913' ],		#self : OmReference [ '914' ],		#time : DateAndTime [ '2021-01-25T09:51:19.838271-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOnLeftOnRightOnEmpty,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOnLeftOnRightOnEmpty\r\r\t| df2 |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame new.\r\t\t\r\tself should: [df leftJoin: df2 onLeft: \'Key\' onRight: \'Key\'] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '914' ],		#self : OmReference [ '915' ],		#time : DateAndTime [ '2021-01-25T09:51:19.838447-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOnLeftOnRightOnEmptyWithColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOnLeftOnRightOnEmptyWithColumnNames\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withColumnNames: #(Key C D).\r\t\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 nil nil)\r\t\t(\'K1\' \'A1\' 1 nil nil)\r\t\t(\'K2\' \'A2\' 2 nil nil)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\tself assert: (df leftJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.\r\t\r\texpected := DataFrame withColumnNames: #(Key C D A B).\r\tself assert: (df2 leftJoin: df onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '915' ],		#self : OmReference [ '916' ],		#time : DateAndTime [ '2021-01-25T09:51:19.838618-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOnLeftOnRightOnSelf,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOnLeftOnRightOnSelf\r\t\r\t| expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\t\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1 \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2 \'A2\' 2)\r\t\t)\r\t\tcolumnNames: #(Key A_x B_x A_y B_y).\r\t\t\r\tself assert: (df leftJoin: df onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '916' ],		#self : OmReference [ '917' ],		#time : DateAndTime [ '2021-01-25T09:51:19.838793-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOnLeftOnRightRowMismatch,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOnLeftOnRightRowMismatch\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K3\' \'A3\' 3)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K3\' \'A3\' 3 \'B3\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df leftJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '917' ],		#self : OmReference [ '918' ],		#time : DateAndTime [ '2021-01-25T09:51:19.838968-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOnLeftOnRightSameColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOnLeftOnRightSameColumnNames\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key A B).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t)\r\t\tcolumnNames: #(Key A_x B_x A_y B_y).\r\t\t\r\tself assert: (df leftJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '918' ],		#self : OmReference [ '919' ],		#time : DateAndTime [ '2021-01-25T09:51:19.83931-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOnLeftOnRightSameKeyName,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOnLeftOnRightSameKeyName\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df leftJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '919' ],		#self : OmReference [ '920' ],		#time : DateAndTime [ '2021-01-25T09:51:19.839792-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinOnSelf,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinOnSelf\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true Dubai 2.789 true)\r   \t\t(London 8.788 false London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City_x Population_x BeenThere_x City_y Population_y BeenThere_y).\r\t\r\tself assert: (df leftJoin: df) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '920' ],		#self : OmReference [ '921' ],		#time : DateAndTime [ '2021-01-25T09:51:19.840038-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinRowMismatch,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinRowMismatch\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(A D C)\r\t\tcolumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true false 0)\r   \t\t(Dubai 2.789 true nil nil)\r   \t\t(London 8.788 false true 2))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df leftJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '921' ],		#self : OmReference [ '922' ],		#time : DateAndTime [ '2021-01-25T09:51:19.840273-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testLeftJoinSameColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testLeftJoinSameColumnNames\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(A D C)\r\t\tcolumnNames: #(Capital Population).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true false 0)\r   \t\t(Dubai 2.789 true nil nil)\r   \t\t(London 8.788 false true 2))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population_x BeenThere Capital Population_y).\r\t\r\tself assert: (df leftJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '922' ],		#self : OmReference [ '923' ],		#time : DateAndTime [ '2021-01-25T09:51:19.840521-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoin,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoin\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(D B C)\r\t\tcolumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true nil nil)\r   \t\t(Dubai 2.789 true false 1)\r   \t\t(London 8.788 false true 2)\r\t\t(nil nil nil false 0))\r\t\trowNames: #(A B C D)\r\t\tcolumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df outerJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '923' ],		#self : OmReference [ '924' ],		#time : DateAndTime [ '2021-01-25T09:51:19.840708-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinNoIntersection,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinNoIntersection\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(D E F)\r\t\tcolumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true nil nil)\r   \t\t(Dubai 2.789 true nil nil)\r   \t\t(London 8.788 false nil nil)\r\t\t(nil nil nil false 0)\r   \t\t(nil nil nil false 1)\r   \t\t(nil nil nil true 2))\r\t\trowNames: #(A B C D E F)\r\t\tcolumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df outerJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '924' ],		#self : OmReference [ '925' ],		#time : DateAndTime [ '2021-01-25T09:51:19.840897-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOn,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOn\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t(\'K3\' nil nil \'B3\' false)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df outerJoin: df2 on: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '925' ],		#self : OmReference [ '926' ],		#time : DateAndTime [ '2021-01-25T09:51:19.841057-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOnEmpty,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOnEmpty\r\t| df2 |\r\t\r\tdf2 := DataFrame new.\r\t\r\tself assert: (df outerJoin: df2) equals: df.\r\tself assert: (df2 outerJoin: df) equals: df.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '926' ],		#self : OmReference [ '927' ],		#time : DateAndTime [ '2021-01-25T09:51:19.841232-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOnEmptyWithColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOnEmptyWithColumnNames\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withColumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true nil nil)\r   \t\t(Dubai 2.789 true nil nil)\r   \t\t(London 8.788 false nil nil))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df outerJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '927' ],		#self : OmReference [ '928' ],		#time : DateAndTime [ '2021-01-25T09:51:19.841417-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOnLeftOnRight,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOnLeftOnRight\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key1 A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key2 C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'K0\' \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'K1\' \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'K2\' \'B2\' true)\r\t\t(nil nil nil \'K3\' \'B3\' false)\r\t\t)\r\t\tcolumnNames: #(Key1 A B Key2 C D).\r\t\t\r\tself assert: (df outerJoin: df2 onLeft: \'Key1\' onRight: \'Key2\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '928' ],		#self : OmReference [ '929' ],		#time : DateAndTime [ '2021-01-25T09:51:19.84165-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOnLeftOnRightDuplicateKeys,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOnLeftOnRightDuplicateKeys\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K1\' \'A2\' 2)\r\t\t(\'K2\' \'A3\' 3)\r\t\t(\'K0\' \'A4\' 4)\r\t\t(\'K5\' \'A5\' 5)\r\t\t(\'K6\' \'A6\' 6)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'2K1\' \'1K2\' \'2K0\' \'1K5\' \'1K6\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K3\' \'B0\' false)\r\t\t(\'K2\' \'B1\' true)\r\t\t(\'K2\' \'B2\' false)\r\t\t(\'K1\' \'B3\' true)\r\t\t(\'K3\' \'B4\' false)\r\t\t(\'K3\' \'B5\' true)\r\t\t(\'K0\' \'B6\' false)\r\t\t)\r\t\trowNames: #(\'1K3\' \'1K2\' \'2K2\' \'1K1\' \'2K3\' \'3K3\' \'1K0\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B6\' false)\r\t\t(\'K1\' \'A1\' 1 \'B3\' true)\r\t\t(\'K1\' \'A2\' 2 \'B3\' true)\r\t\t(\'K2\' \'A3\' 3 \'B1\' true)\r\t\t(\'K2\' \'A3\' 3 \'B2\' false)\r\t\t(\'K0\' \'A4\' 4 \'B6\' false)\r\t\t(\'K5\' \'A5\' 5 nil nil)\r\t\t(\'K6\' \'A6\' 6 nil nil)\r\t\t(\'K3\' nil nil \'B0\' false)\r\t\t(\'K3\' nil nil \'B4\' false)\r\t\t(\'K3\' nil nil \'B5\' true)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df outerJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '929' ],		#self : OmReference [ '930' ],		#time : DateAndTime [ '2021-01-25T09:51:19.841851-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOnLeftOnRightMissingKey,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOnLeftOnRightMissingKey\r\r\t| df2 |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key1 A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key2 C D).\r\t\t\r\tself should: [df outerJoin: df2 onLeft: \'Key\' onRight: \'Key2\'] raise: Error.\r\tself should: [df outerJoin: df2 onLeft: \'Key1\' onRight: \'Key\'] raise: Error.\r\tself should: [df outerJoin: df2 onLeft: \'Key\' onRight: \'Key\'] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '930' ],		#self : OmReference [ '931' ],		#time : DateAndTime [ '2021-01-25T09:51:19.842042-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOnLeftOnRightNoIntersection,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOnLeftOnRightNoIntersection\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'L0\' \'B0\' true)\r\t\t(\'L1\' \'B1\' false)\r\t\t(\'L2\' \'B2\' true)\r\t\t(\'L3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected :=  DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 nil nil)\r\t\t(\'K1\' \'A1\' 1 nil nil)\r\t\t(\'K2\' \'A2\' 2 nil nil)\r\t\t(\'L0\' nil nil \'B0\' true)\r\t\t(\'L1\' nil nil \'B1\' false)\r\t\t(\'L2\' nil nil \'B2\' true)\r\t\t(\'L3\' nil nil \'B3\' false)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df outerJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '931' ],		#self : OmReference [ '932' ],		#time : DateAndTime [ '2021-01-25T09:51:19.842212-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOnLeftOnRightOnEmpty,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOnLeftOnRightOnEmpty\r\r\t| df2 |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame new.\r\t\t\r\tself should: [df outerJoin: df2 onLeft: \'Key\' onRight: \'Key\'] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '932' ],		#self : OmReference [ '933' ],		#time : DateAndTime [ '2021-01-25T09:51:19.842403-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOnLeftOnRightOnEmptyWithColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOnLeftOnRightOnEmptyWithColumnNames\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withColumnNames: #(Key C D).\r\t\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 nil nil)\r\t\t(\'K1\' \'A1\' 1 nil nil)\r\t\t(\'K2\' \'A2\' 2 nil nil)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\tself assert: (df outerJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' nil nil \'A0\' 0)\r\t\t(\'K1\' nil nil \'A1\' 1)\r\t\t(\'K2\' nil nil \'A2\' 2)\r\t\t)\r\t\tcolumnNames: #(Key C D A B).\r\tself assert: (df2 outerJoin: df onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '933' ],		#self : OmReference [ '934' ],		#time : DateAndTime [ '2021-01-25T09:51:19.842576-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOnLeftOnRightOnSelf,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOnLeftOnRightOnSelf\r\t\r\t| expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\t\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1 \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2 \'A2\' 2)\r\t\t)\r\t\tcolumnNames: #(Key A_x B_x A_y B_y).\r\t\t\r\tself assert: (df outerJoin: df onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '934' ],		#self : OmReference [ '935' ],		#time : DateAndTime [ '2021-01-25T09:51:19.842758-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOnLeftOnRightRowMismatch,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOnLeftOnRightRowMismatch\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K3\' \'A3\' 3)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K3\' \'A3\' 3 \'B3\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t(\'K1\' nil nil \'B1\' false)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df outerJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '935' ],		#self : OmReference [ '936' ],		#time : DateAndTime [ '2021-01-25T09:51:19.842945-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOnLeftOnRightSameColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOnLeftOnRightSameColumnNames\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key A B).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t(\'K3\' nil nil \'B3\' false)\r\t\t)\r\t\tcolumnNames: #(Key A_x B_x A_y B_y).\r\t\t\r\tself assert: (df outerJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '936' ],		#self : OmReference [ '937' ],		#time : DateAndTime [ '2021-01-25T09:51:19.843138-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOnLeftOnRightSameKeyName,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOnLeftOnRightSameKeyName\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t(\'K3\' nil nil \'B3\' false)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df outerJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '937' ],		#self : OmReference [ '938' ],		#time : DateAndTime [ '2021-01-25T09:51:19.843308-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinOnSelf,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinOnSelf\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true Dubai 2.789 true)\r   \t\t(London 8.788 false London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City_x Population_x BeenThere_x City_y Population_y BeenThere_y).\r\t\r\tself assert: (df outerJoin: df) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '938' ],		#self : OmReference [ '939' ],		#time : DateAndTime [ '2021-01-25T09:51:19.843488-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinRowMismatch,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinRowMismatch\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(A D C)\r\t\tcolumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true false 0)\r   \t\t(Dubai 2.789 true nil nil)\r   \t\t(London 8.788 false true 2)\r\t\t(nil nil nil false 1))\r\t\trowNames: #(A B C D)\r\t\tcolumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df outerJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '939' ],		#self : OmReference [ '940' ],		#time : DateAndTime [ '2021-01-25T09:51:19.843664-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testOuterJoinSameColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testOuterJoinSameColumnNames\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(A D C)\r\t\tcolumnNames: #(Capital Population).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true false 0)\r   \t\t(Dubai 2.789 true nil nil)\r   \t\t(London 8.788 false true 2)\r\t\t(nil nil nil false 1))\r\t\trowNames: #(A B C D)\r\t\tcolumnNames: #(City Population_x BeenThere Capital Population_y).\r\t\r\tself assert: (df outerJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '940' ],		#self : OmReference [ '941' ],		#time : DateAndTime [ '2021-01-25T09:51:19.843846-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testPrintOn,			#protocol : #tests,			#sourceCode : 'testPrintOn\r\r\t| expected actual |\r\t\r\texpected := \'a DataFrame (3@3)\'.\r\t\r\tactual := String new writeStream.\r\tdf printOn: actual.\r\tactual := actual contents.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '941' ],		#self : OmReference [ '942' ],		#time : DateAndTime [ '2021-01-25T09:51:19.844012-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRangeError,			#protocol : #tests,			#sourceCode : 'testRangeError\r\tself should: [ df range ] raise: MessageNotUnderstood\t"Instance of Character did not understand #Barcelona"',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '942' ],		#self : OmReference [ '943' ],		#time : DateAndTime [ '2021-01-25T09:51:19.844177-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testReject,			#protocol : #tests,			#sourceCode : 'testReject\r\t| actual expected |\r\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Dubai 2.789 true)\r\t\t\t(London 8.788 false))\r\t\trowNames: #(B C)\r\t\tcolumnNames: df columnNames.\r\t\t\r\tactual := df reject:\r\t\t[ :row | (row at: #Population) < 2 ].\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '943' ],		#self : OmReference [ '944' ],		#time : DateAndTime [ '2021-01-25T09:51:19.844341-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRejectEntireDataFrame,			#protocol : #tests,			#sourceCode : 'testRejectEntireDataFrame\r\t| actual expected |\r\r\texpected := DataFrame\r\t\twithRows: #().\r\t\t\r\tactual := df reject:\r\t\t[ :row | (row at: #Population) < 10 ].\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '944' ],		#self : OmReference [ '945' ],		#time : DateAndTime [ '2021-01-25T09:51:19.844517-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveColumn,			#protocol : #removing,			#sourceCode : 'testRemoveColumn\r\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona true)\r   \t\t(Dubai true)\r   \t\t(London false)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City BeenThere).\r\t\t\r\tdf removeColumn: #Population.\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '945' ],		#self : OmReference [ '946' ],		#time : DateAndTime [ '2021-01-25T09:51:19.846058-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveColumnAt,			#protocol : #removing,			#sourceCode : 'testRemoveColumnAt\r\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona true)\r   \t\t(Dubai true)\r   \t\t(London false)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City BeenThere).\r\t\t\r\tdf removeColumnAt: 2.\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '946' ],		#self : OmReference [ '947' ],		#time : DateAndTime [ '2021-01-25T09:51:19.846264-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveColumnAtOutOfRange,			#protocol : #removing,			#sourceCode : 'testRemoveColumnAtOutOfRange\r\tself should: [ df removeColumnAt: 100 ] raise: SubscriptOutOfBounds.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '947' ],		#self : OmReference [ '948' ],		#time : DateAndTime [ '2021-01-25T09:51:19.846435-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveColumnNotFound,			#protocol : #removing,			#sourceCode : 'testRemoveColumnNotFound\r\tself should: [ df removeColumn: #NoSuchColumn ] raise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '948' ],		#self : OmReference [ '949' ],		#time : DateAndTime [ '2021-01-25T09:51:19.84662-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveColumns,			#protocol : #removing,			#sourceCode : 'testRemoveColumns\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(true)\r   \t\t(true)\r   \t\t(false)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(BeenThere).\r\t\t\r\tdf removeColumns: #(City Population).\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '949' ],		#self : OmReference [ '950' ],		#time : DateAndTime [ '2021-01-25T09:51:19.846791-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveColumnsAt,			#protocol : #removing,			#sourceCode : 'testRemoveColumnsAt\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(true)\r   \t\t(true)\r   \t\t(false)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(BeenThere).\r\t\t\r\tdf removeColumnsAt: #(1 2).\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '950' ],		#self : OmReference [ '951' ],		#time : DateAndTime [ '2021-01-25T09:51:19.84698-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveColumnsOfRowElementsSatisfingOnRow,			#protocol : #removing,			#sourceCode : 'testRemoveColumnsOfRowElementsSatisfingOnRow\r\r\t| expected aBlock |\r\tdf := DataFrame withRows: #(\r\t\t(1 2 3)\r   \t\t(Dubai 4 5.0)\r   \t\t(nil 8.788 false)).\r\t\t\r\tdf rowNames: #(A B C).\r\tdf columnNames: #(X Y Z).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(2)\r   \t\t(4)\r   \t\t(8.788)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(Y).\r\t\r\taBlock := [ :rowElement | rowElement ~= 4 ].\r\t\r\tself assert: (df removeColumnsOfRowElementsSatisfing: aBlock onRow: 2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '951' ],		#self : OmReference [ '952' ],		#time : DateAndTime [ '2021-01-25T09:51:19.847345-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveColumnsOfRowElementsSatisfingOnRowAllTrue,			#protocol : #removing,			#sourceCode : 'testRemoveColumnsOfRowElementsSatisfingOnRowAllTrue\r\r\t| expected aBlock |\r\t\r\texpected := DataFrame withRows: #().\r\taBlock := [ :rowElement | true ].\r\t\r\tself assert: (df removeColumnsOfRowElementsSatisfing: aBlock onRow: 2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '952' ],		#self : OmReference [ '953' ],		#time : DateAndTime [ '2021-01-25T09:51:19.847638-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveColumnsOfRowElementsSatisfingOnRowNamed,			#protocol : #removing,			#sourceCode : 'testRemoveColumnsOfRowElementsSatisfingOnRowNamed\r\r\t| expected aBlock |\r\tdf := DataFrame withRows: #(\r\t\t(1 2 3)\r   \t\t(Dubai 4 5.0)\r   \t\t(nil 8.788 false)).\r\t\t\r\tdf rowNames: #(A B C).\r\tdf columnNames: #(X Y Z).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(2)\r   \t\t(4)\r   \t\t(8.788)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(Y).\r\t\r\taBlock := [ :rowElement | rowElement ~= 4 ].\r\t\r\tself assert: (df removeColumnsOfRowElementsSatisfing: aBlock onRowNamed: \'B\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '953' ],		#self : OmReference [ '954' ],		#time : DateAndTime [ '2021-01-25T09:51:19.84784-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveColumnsWithNilsAtRow,			#protocol : #removing,			#sourceCode : 'testRemoveColumnsWithNilsAtRow\r\r\t| expected |\r\tdf := DataFrame withRows: #(\r\t\t(Barcelona 1.609 nil)\r   \t\t(Dubai nil nil)\r   \t\t(nil 8.788 false)).\r\t\t\r\tdf rowNames: #(A B C).\r\tdf columnNames: #(City Population BeenThere).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona)\r   \t\t(Dubai)\r   \t\t(nil)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City).\r\t\r\tself assert: (df removeColumnsWithNilsAtRow: 2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '954' ],		#self : OmReference [ '955' ],		#time : DateAndTime [ '2021-01-25T09:51:19.848021-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveColumnsWithNilsAtRowNamed,			#protocol : #removing,			#sourceCode : 'testRemoveColumnsWithNilsAtRowNamed\r\r\t| expected |\r\tdf := DataFrame withRows: #(\r\t\t(Barcelona 1.609 nil)\r   \t\t(Dubai nil nil)\r   \t\t(nil 8.788 false)).\r\t\t\r\tdf rowNames: #(A B C).\r\tdf columnNames: #(City Population BeenThere).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona)\r   \t\t(Dubai)\r   \t\t(nil)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City).\r\t\r\tself assert: (df removeColumnsWithNilsAtRowNamed: #B) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '955' ],		#self : OmReference [ '956' ],		#time : DateAndTime [ '2021-01-25T09:51:19.848223-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveColumnsWithNilsAtRowOutOfRange,			#protocol : #removing,			#sourceCode : 'testRemoveColumnsWithNilsAtRowOutOfRange\r\tself should: [ df removeColumnsWithNilsAtRow: 100 ] raise: SubscriptOutOfBounds.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '956' ],		#self : OmReference [ '957' ],		#time : DateAndTime [ '2021-01-25T09:51:19.848491-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveRow,			#protocol : #removing,			#sourceCode : 'testRemoveRow\r\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(London 8.788 false)).\r\t\t\r\texpected rowNames: #(A C).\r\texpected columnNames: #(City Population BeenThere).\r\t\t\r\tdf removeRow: #B.\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '957' ],		#self : OmReference [ '958' ],		#time : DateAndTime [ '2021-01-25T09:51:19.84877-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveRowAt,			#protocol : #removing,			#sourceCode : 'testRemoveRowAt\r\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(London 8.788 false)).\r\t\t\r\texpected rowNames: #(A C).\r\texpected columnNames: #(City Population BeenThere).\r\t\t\r\tdf removeRowAt: 2.\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '958' ],		#self : OmReference [ '959' ],		#time : DateAndTime [ '2021-01-25T09:51:19.848971-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveRowAtOutOfRange,			#protocol : #removing,			#sourceCode : 'testRemoveRowAtOutOfRange\r\tself should: [ df removeRowAt: 100 ] raise: SubscriptOutOfBounds.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '959' ],		#self : OmReference [ '960' ],		#time : DateAndTime [ '2021-01-25T09:51:19.84914-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveRowNotFound,			#protocol : #removing,			#sourceCode : 'testRemoveRowNotFound\r\tself should: [ df removeRow: #NoSuchRow ] raise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '960' ],		#self : OmReference [ '961' ],		#time : DateAndTime [ '2021-01-25T09:51:19.849311-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveRows,			#protocol : #removing,			#sourceCode : 'testRemoveRows\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)).\r\t\t\r\texpected rowNames: #(A).\r\texpected columnNames: #(City Population BeenThere).\r\t\t\r\tdf removeRows: #(B C).\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '961' ],		#self : OmReference [ '962' ],		#time : DateAndTime [ '2021-01-25T09:51:19.849486-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveRowsAt,			#protocol : #removing,			#sourceCode : 'testRemoveRowsAt\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)).\r\t\t\r\texpected rowNames: #(A).\r\texpected columnNames: #(City Population BeenThere).\r\t\t\r\tdf removeRowsAt: #(2 3).\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '962' ],		#self : OmReference [ '963' ],		#time : DateAndTime [ '2021-01-25T09:51:19.849668-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveRowsOfColumnElementsSatisfingOnColumn,			#protocol : #removing,			#sourceCode : 'testRemoveRowsOfColumnElementsSatisfingOnColumn\r\r\t| expected aBlock |\r\tdf := DataFrame withRows: #(\r\t\t(1 2 3)\r   \t\t(Dubai 4 5.0)\r   \t\t(nil 8.788 false)).\r\t\t\r\tdf rowNames: #(A B C).\r\tdf columnNames: #(X Y Z).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Dubai 4 5.0)).\r\t\t\r\texpected rowNames: #(B).\r\texpected columnNames: #(X Y Z).\r\t\r\taBlock := [ :rowElement | rowElement ~= 4 ].\r\t\r\tself assert: (df removeRowsOfColumnElementsSatisfing: aBlock onColumn: 2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '963' ],		#self : OmReference [ '964' ],		#time : DateAndTime [ '2021-01-25T09:51:19.849836-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveRowsOfColumnElementsSatisfingOnColumnAllTrue,			#protocol : #removing,			#sourceCode : 'testRemoveRowsOfColumnElementsSatisfingOnColumnAllTrue\r\r\t| expected aBlock |\r\t\r\texpected := DataFrame withColumns: #().\t\r\taBlock := [ :rowElement | true ].\r\t\r\tself assert: (df removeRowsOfColumnElementsSatisfing: aBlock onColumn: 2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '964' ],		#self : OmReference [ '965' ],		#time : DateAndTime [ '2021-01-25T09:51:19.85002-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveRowsOfColumnElementsSatisfingOnColumnNamed,			#protocol : #removing,			#sourceCode : 'testRemoveRowsOfColumnElementsSatisfingOnColumnNamed\r\r\t| expected aBlock |\r\tdf := DataFrame withRows: #(\r\t\t(1 2 3)\r   \t\t(Dubai 4 5.0)\r   \t\t(nil 8.788 false)).\r\t\t\r\tdf rowNames: #(A B C).\r\tdf columnNames: #(X Y Z).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Dubai 4 5.0)).\r\t\t\r\texpected rowNames: #(B).\r\texpected columnNames: #(X Y Z).\r\t\r\taBlock := [ :rowElement | rowElement ~= 4 ].\r\t\r\tself assert: (df removeRowsOfColumnElementsSatisfing: aBlock onColumnNamed: #Y) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '965' ],		#self : OmReference [ '966' ],		#time : DateAndTime [ '2021-01-25T09:51:19.8502-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveRowsWithNilsAtColumn,			#protocol : #removing,			#sourceCode : 'testRemoveRowsWithNilsAtColumn\r\r\t| expected |\r\tdf := DataFrame withRows: #(\r\t\t(Barcelona 1.609 nil)\r   \t\t(Dubai nil nil)\r   \t\t(nil 8.788 false)).\r\t\t\r\tdf rowNames: #(A B C).\r\tdf columnNames: #(City Population BeenThere).\r\t\r\texpected := DataFrame withRows: #(\r   \t\t(nil 8.788 false)).\r\t\t\r\texpected rowNames: #(C).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tself assert: (df removeRowsWithNilsAtColumn: 3) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '966' ],		#self : OmReference [ '967' ],		#time : DateAndTime [ '2021-01-25T09:51:19.850377-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveRowsWithNilsAtColumnNamed,			#protocol : #removing,			#sourceCode : 'testRemoveRowsWithNilsAtColumnNamed\r\r\t| expected |\r\tdf := DataFrame withRows: #(\r\t\t(Barcelona 1.609 nil)\r   \t\t(Dubai nil nil)\r   \t\t(nil 8.788 false)).\r\t\t\r\tdf rowNames: #(A B C).\r\tdf columnNames: #(City Population BeenThere).\r\t\r\texpected := DataFrame withRows: #(\r   \t\t(nil 8.788 false)).\r\t\t\r\texpected rowNames: #(C).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tself assert: (df removeRowsWithNilsAtColumnNamed: #BeenThere) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '967' ],		#self : OmReference [ '968' ],		#time : DateAndTime [ '2021-01-25T09:51:19.85059-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRemoveRowsWithNilsAtColumnOutOfRange,			#protocol : #removing,			#sourceCode : 'testRemoveRowsWithNilsAtColumnOutOfRange\r\tself should: [ df removeRowsWithNilsAtColumn: 100 ] raise: SubscriptOutOfBounds.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '968' ],		#self : OmReference [ '969' ],		#time : DateAndTime [ '2021-01-25T09:51:19.850764-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRenameColumnTo,			#protocol : #tests,			#sourceCode : 'testRenameColumnTo\r\t| expected |\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 2.789 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population Visited).\r\t\t\r\tdf renameColumn: #BeenThere to: #Visited.\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '969' ],		#self : OmReference [ '970' ],		#time : DateAndTime [ '2021-01-25T09:51:19.850925-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRenameColumnToNotFound,			#protocol : #tests,			#sourceCode : 'testRenameColumnToNotFound\r\tself\r\t\tshould: [ df renameColumn: #NoSuchColumn to: #Sth ]\r\t\traise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '970' ],		#self : OmReference [ '971' ],		#time : DateAndTime [ '2021-01-25T09:51:19.851097-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRenameRowTo,			#protocol : #tests,			#sourceCode : 'testRenameRowTo\r\t| expected |\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 2.789 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A X C)\r\t\tcolumnNames: #(City Population BeenThere).\r\t\t\r\tdf renameRow: #B to: #X.\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '971' ],		#self : OmReference [ '972' ],		#time : DateAndTime [ '2021-01-25T09:51:19.851259-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRenameRowToNotFound,			#protocol : #tests,			#sourceCode : 'testRenameRowToNotFound\r\tself\r\t\tshould: [ df renameRow: #NoSuchRow to: #Sth ]\r\t\traise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '972' ],		#self : OmReference [ '973' ],		#time : DateAndTime [ '2021-01-25T09:51:19.851436-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoin,			#protocol : #splitjoin,			#sourceCode : 'testRightJoin\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true false 0)\r   \t\t(Dubai 2.789 true false 1)\r   \t\t(London 8.788 false true 2))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df rightJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '973' ],		#self : OmReference [ '974' ],		#time : DateAndTime [ '2021-01-25T09:51:19.851621-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinNoIntersection,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinNoIntersection\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(D E F)\r\t\tcolumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(nil nil nil false 0)\r   \t\t(nil nil nil false 1)\r   \t\t(nil nil nil true 2))\r\t\trowNames: #(D E F)\r\t\tcolumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df rightJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '974' ],		#self : OmReference [ '975' ],		#time : DateAndTime [ '2021-01-25T09:51:19.851807-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOn,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOn\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t(\'K3\' nil nil \'B3\' false)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df rightJoin: df2 on: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '975' ],		#self : OmReference [ '976' ],		#time : DateAndTime [ '2021-01-25T09:51:19.851978-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOnEmpty,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOnEmpty\r\t| df2 expected |\r\t\r\tdf2 := DataFrame new.\r\t\r\texpected := DataFrame withColumnNames: #(City Population BeenThere).\r\t\r\tself assert: (df rightJoin: df2) equals: expected.\r\tself assert: (df2 rightJoin: df) equals: df.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '976' ],		#self : OmReference [ '977' ],		#time : DateAndTime [ '2021-01-25T09:51:19.852148-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOnEmptyWithColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOnEmptyWithColumnNames\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withColumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withColumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df rightJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '977' ],		#self : OmReference [ '978' ],		#time : DateAndTime [ '2021-01-25T09:51:19.852332-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOnLeftOnRight,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOnLeftOnRight\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key1 A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key2 C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'K0\' \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'K1\' \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'K2\' \'B2\' true)\r\t\t(nil nil nil \'K3\' \'B3\' false)\r\t\t)\r\t\tcolumnNames: #(Key1 A B Key2 C D).\r\t\t\r\tself assert: (df rightJoin: df2 onLeft: \'Key1\' onRight: \'Key2\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '978' ],		#self : OmReference [ '979' ],		#time : DateAndTime [ '2021-01-25T09:51:19.852539-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOnLeftOnRightDuplicateKeys,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOnLeftOnRightDuplicateKeys\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K1\' \'A2\' 2)\r\t\t(\'K2\' \'A3\' 3)\r\t\t(\'K0\' \'A4\' 4)\r\t\t(\'K5\' \'A5\' 5)\r\t\t(\'K6\' \'A6\' 6)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'2K1\' \'1K2\' \'2K0\' \'1K5\' \'1K6\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K3\' \'B0\' false)\r\t\t(\'K2\' \'B1\' true)\r\t\t(\'K2\' \'B2\' false)\r\t\t(\'K1\' \'B3\' true)\r\t\t(\'K3\' \'B4\' false)\r\t\t(\'K3\' \'B5\' true)\r\t\t(\'K0\' \'B6\' false)\r\t\t)\r\t\trowNames: #(\'1K3\' \'1K2\' \'2K2\' \'1K1\' \'2K3\' \'3K3\' \'1K0\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K3\' nil nil \'B0\' false)\r\t\t(\'K2\' \'A3\' 3 \'B1\' true)\r\t\t(\'K2\' \'A3\' 3 \'B2\' false)\r\t\t(\'K1\' \'A1\' 1 \'B3\' true)\r\t\t(\'K1\' \'A2\' 2 \'B3\' true)\r\t\t(\'K3\' nil nil \'B4\' false)\r\t\t(\'K3\' nil nil \'B5\' true)\r\t\t(\'K0\' \'A0\' 0 \'B6\' false)\r\t\t(\'K0\' \'A4\' 4 \'B6\' false)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df rightJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '979' ],		#self : OmReference [ '980' ],		#time : DateAndTime [ '2021-01-25T09:51:19.852724-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOnLeftOnRightMissingKey,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOnLeftOnRightMissingKey\r\r\t| df2 |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key1 A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key2 C D).\r\t\t\r\tself should: [df rightJoin: df2 onLeft: \'Key\' onRight: \'Key2\'] raise: Error.\r\tself should: [df rightJoin: df2 onLeft: \'Key1\' onRight: \'Key\'] raise: Error.\r\tself should: [df rightJoin: df2 onLeft: \'Key\' onRight: \'Key\'] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '980' ],		#self : OmReference [ '981' ],		#time : DateAndTime [ '2021-01-25T09:51:19.852928-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOnLeftOnRightNoIntersection,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOnLeftOnRightNoIntersection\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'L0\' \'B0\' true)\r\t\t(\'L1\' \'B1\' false)\r\t\t(\'L2\' \'B2\' true)\r\t\t(\'L3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected :=  DataFrame withRows: #(\r\t\t(\'L0\' nil nil \'B0\' true)\r\t\t(\'L1\' nil nil \'B1\' false)\r\t\t(\'L2\' nil nil \'B2\' true)\r\t\t(\'L3\' nil nil \'B3\' false)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df rightJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '981' ],		#self : OmReference [ '982' ],		#time : DateAndTime [ '2021-01-25T09:51:19.853102-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOnLeftOnRightOnEmpty,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOnLeftOnRightOnEmpty\r\r\t| df2 |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame new.\r\t\t\r\tself should: [df rightJoin: df2 onLeft: \'Key\' onRight: \'Key\'] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '982' ],		#self : OmReference [ '983' ],		#time : DateAndTime [ '2021-01-25T09:51:19.853288-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOnLeftOnRightOnEmptyWithColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOnLeftOnRightOnEmptyWithColumnNames\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withColumnNames: #(Key C D).\r\t\t\r\texpected := DataFrame withColumnNames: #(Key A B C D).\r\tself assert: (df rightJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' nil nil \'A0\' 0)\r\t\t(\'K1\' nil nil \'A1\' 1)\r\t\t(\'K2\' nil nil \'A2\' 2)\r\t\t)\r\t\tcolumnNames: #(Key C D A B).\r\tself assert: (df2 rightJoin: df onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '983' ],		#self : OmReference [ '984' ],		#time : DateAndTime [ '2021-01-25T09:51:19.853464-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOnLeftOnRightOnSelf,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOnLeftOnRightOnSelf\r\t\r\t| expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\t\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1 \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2 \'A2\' 2)\r\t\t)\r\t\tcolumnNames: #(Key A_x B_x A_y B_y).\r\t\t\r\tself assert: (df rightJoin: df onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '984' ],		#self : OmReference [ '985' ],		#time : DateAndTime [ '2021-01-25T09:51:19.853654-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOnLeftOnRightRowMismatch,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOnLeftOnRightRowMismatch\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K3\' \'A3\' 3)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K1\' nil nil \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t(\'K3\' \'A3\' 3 \'B3\' false)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df rightJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '985' ],		#self : OmReference [ '986' ],		#time : DateAndTime [ '2021-01-25T09:51:19.85384-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOnLeftOnRightSameColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOnLeftOnRightSameColumnNames\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key A B).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t(\'K3\' nil nil \'B3\' false)\r\t\t)\r\t\tcolumnNames: #(Key A_x B_x A_y B_y).\r\t\t\r\tself assert: (df rightJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '986' ],		#self : OmReference [ '987' ],		#time : DateAndTime [ '2021-01-25T09:51:19.854024-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOnLeftOnRightSameKeyName,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOnLeftOnRightSameKeyName\r\r\t| df2 expected |\r\t\r\tdf := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0)\r\t\t(\'K1\' \'A1\' 1)\r\t\t(\'K2\' \'A2\' 2)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\')\r\t\tcolumnNames: #(Key A B).\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(\'K0\' \'B0\' true)\r\t\t(\'K1\' \'B1\' false)\r\t\t(\'K2\' \'B2\' true)\r\t\t(\'K3\' \'B3\' false)\r\t\t)\r\t\trowNames: #(\'1K0\' \'1K1\' \'1K2\' \'1K3\')\r\t\tcolumnNames: #(Key C D).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'K0\' \'A0\' 0 \'B0\' true)\r\t\t(\'K1\' \'A1\' 1 \'B1\' false)\r\t\t(\'K2\' \'A2\' 2 \'B2\' true)\r\t\t(\'K3\' nil nil \'B3\' false)\r\t\t)\r\t\tcolumnNames: #(Key A B C D).\r\t\t\r\tself assert: (df rightJoin: df2 onLeft: \'Key\' onRight: \'Key\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '987' ],		#self : OmReference [ '988' ],		#time : DateAndTime [ '2021-01-25T09:51:19.854201-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinOnSelf,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinOnSelf\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true Dubai 2.789 true)\r   \t\t(London 8.788 false London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City_x Population_x BeenThere_x City_y Population_y BeenThere_y).\r\t\r\tself assert: (df rightJoin: df) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '988' ],		#self : OmReference [ '989' ],		#time : DateAndTime [ '2021-01-25T09:51:19.854378-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinRowMismatch,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinRowMismatch\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(A D C)\r\t\tcolumnNames: #(Capital TimesVisited).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true false 0)\r   \t\t(nil nil nil false 1)\r   \t\t(London 8.788 false true 2))\r\t\trowNames: #(A D C)\r\t\tcolumnNames: #(City Population BeenThere Capital TimesVisited).\r\t\r\tself assert: (df rightJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '989' ],		#self : OmReference [ '990' ],		#time : DateAndTime [ '2021-01-25T09:51:19.854554-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRightJoinSameColumnNames,			#protocol : #splitjoin,			#sourceCode : 'testRightJoinSameColumnNames\r\t| df2 expected |\r\t\r\tdf2 := DataFrame withRows: #(\r\t\t(false 0)\r   \t\t(false 1)\r   \t\t(true 2))\r\t\trowNames: #(A D C)\r\t\tcolumnNames: #(Capital Population).\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true false 0)\r   \t\t(nil nil nil false 1)\r   \t\t(London 8.788 false true 2))\r\t\trowNames: #(A D C)\r\t\tcolumnNames: #(City Population_x BeenThere Capital Population_y).\r\t\r\tself assert: (df rightJoin: df2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '990' ],		#self : OmReference [ '991' ],		#time : DateAndTime [ '2021-01-25T09:51:19.854727-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRow,			#protocol : #tests,			#sourceCode : 'testRow\r\r\t| actualSeries expectedSeries |\r\r\texpectedSeries := DataSeries withValues:\r\t\t#(\'Dubai\' 2.789 true).\r\t\t\r\texpectedSeries name: #B.\r\texpectedSeries keys: df columnNames.\r\t\r\tactualSeries := df row: #B.\r\t\r\tself assert: actualSeries equals: expectedSeries.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '991' ],		#self : OmReference [ '992' ],		#time : DateAndTime [ '2021-01-25T09:51:19.854896-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowAt,			#protocol : #tests,			#sourceCode : 'testRowAt\r\r\t| actualSeries expectedSeries |\r\r\texpectedSeries := DataSeries withValues:\r\t\t#(\'Dubai\' 2.789 true).\r\t\t\r\texpectedSeries name: #B.\r\texpectedSeries keys: df columnNames.\r\t\r\tactualSeries := df rowAt: 2.\r\t\r\tself assert: actualSeries equals: expectedSeries.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '992' ],		#self : OmReference [ '993' ],		#time : DateAndTime [ '2021-01-25T09:51:19.855203-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowAtPut,			#protocol : #tests,			#sourceCode : 'testRowAtPut\r\r\t| actual expected |\r\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(X Y Z)\r   \t\t(London 8.788 false)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tactual := df.\r\tactual rowAt: 2 put: #(X Y Z).\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '993' ],		#self : OmReference [ '994' ],		#time : DateAndTime [ '2021-01-25T09:51:19.855492-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowAtTransform,			#protocol : #tests,			#sourceCode : 'testRowAtTransform\r\r\t| expected |\r\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 0 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere).\r\t\t\r\tdf rowAt: 2 transform: [ :row | row at: #Population put: 0; yourself ].\r\tself assert: df equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '994' ],		#self : OmReference [ '995' ],		#time : DateAndTime [ '2021-01-25T09:51:19.855725-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowIfAbsent,			#protocol : #tests,			#sourceCode : 'testRowIfAbsent\r\r\t| exceptionBlockEvaluated |\r\t\r\texceptionBlockEvaluated := false.\r\r\tdf row: #NoSuchRow\r\t\tifAbsent: [ exceptionBlockEvaluated := true ].\r\t\t\r\tself assert: exceptionBlockEvaluated.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '995' ],		#self : OmReference [ '996' ],		#time : DateAndTime [ '2021-01-25T09:51:19.855897-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowNames,			#protocol : #tests,			#sourceCode : 'testRowNames\r\t| newNames |\r\tnewNames := #(X Y Z).\r\tdf rowNames: newNames.\r\tself assert: df rowNames equals: newNames asOrderedCollection',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '996' ],		#self : OmReference [ '997' ],		#time : DateAndTime [ '2021-01-25T09:51:19.856066-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowNamesMustBeDistinct,			#protocol : #tests,			#sourceCode : 'testRowNamesMustBeDistinct\r\t| newNames |\r\tnewNames := #(x y y).\r\tself should: [ df rowNames: newNames ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '997' ],		#self : OmReference [ '998' ],		#time : DateAndTime [ '2021-01-25T09:51:19.856233-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowNamesSizeMismatch,			#protocol : #tests,			#sourceCode : 'testRowNamesSizeMismatch\r\t| tooManyNames notEnoughNames |\r\t\r\ttooManyNames := #(W X Y Z).\r\tnotEnoughNames := #(Y Z).\r\t\r\tself should: [ df rowNames: tooManyNames ] raise: SizeMismatch.\r\tself should: [ df rowNames: notEnoughNames ] raise: SizeMismatch.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '998' ],		#self : OmReference [ '999' ],		#time : DateAndTime [ '2021-01-25T09:51:19.856389-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowNotFound,			#protocol : #tests,			#sourceCode : 'testRowNotFound\r\tself\r\t\tshould: [ df row: #NoSuchRow ]\r\t\traise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '999' ],		#self : OmReference [ '1000' ],		#time : DateAndTime [ '2021-01-25T09:51:19.85656-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowPut,			#protocol : #tests,			#sourceCode : 'testRowPut\r\r\t| actual expected |\r\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(X Y Z)\r   \t\t(London 8.788 false)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tactual := df.\r\tactual row: #B put: #(X Y Z).\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1000' ],		#self : OmReference [ '1001' ],		#time : DateAndTime [ '2021-01-25T09:51:19.856733-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowPutIfAbsent,			#protocol : #tests,			#sourceCode : 'testRowPutIfAbsent\r\r\t| expected exceptionBlockEvaluated |\r\t\r\texceptionBlockEvaluated := false.\r\t\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 2.789 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere).\r\t\r\tdf row: #NoSuchRow\r\t\tput: #(0 0 0)\r\t\tifAbsent: [ exceptionBlockEvaluated := true ].\r\t\t\r\tself assert: df equals: expected.\r\tself assert: exceptionBlockEvaluated.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1001' ],		#self : OmReference [ '1002' ],		#time : DateAndTime [ '2021-01-25T09:51:19.856892-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowPutNotFound,			#protocol : #tests,			#sourceCode : 'testRowPutNotFound\r\tself\r\t\tshould: [ df row: #NoSuchRow put: #(0 0 0) ]\r\t\traise: LibrarySymbolNotFoundError.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1002' ],		#self : OmReference [ '1003' ],		#time : DateAndTime [ '2021-01-25T09:51:19.857062-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowTransform,			#protocol : #tests,			#sourceCode : 'testRowTransform\r\r\t| expected |\r\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 0 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere).\r\t\t\r\tdf row: #B transform: [ :row | row at: #Population put: 0; yourself ].\r\tself assert: df equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1003' ],		#self : OmReference [ '1004' ],		#time : DateAndTime [ '2021-01-25T09:51:19.857238-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowTransformIfAbsent,			#protocol : #tests,			#sourceCode : 'testRowTransformIfAbsent\r\r\t| expected exceptionBlockEvaluated |\r\r\texceptionBlockEvaluated := false.\r\t\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 2.789 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere).\r\t\t\r\tdf row: #NoSuchRow\r\t\ttransform: [ :row | row at: #Population put: 0 ]\r\t\tifAbsent: [ exceptionBlockEvaluated := true ].\r\t\t\r\tself assert: df equals: expected.\r\tself assert: exceptionBlockEvaluated.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1004' ],		#self : OmReference [ '1005' ],		#time : DateAndTime [ '2021-01-25T09:51:19.857421-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowTransformNotFound,			#protocol : #tests,			#sourceCode : 'testRowTransformNotFound\r\r\t| expected |\r\t\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r   \t\t\t(Dubai 2.789 true)\r   \t\t\t(London 8.788 false))\r\t\trowNames: #(A B C)\r\t\tcolumnNames: #(City Population BeenThere).\r\t\t\r\tself\r\t\tshould: [\r\t\t\tdf row: #NoSuchRow\r\t\t\t\ttransform: [ :row | row at: #Population put: 0 ] ]\r\t\traise: LibrarySymbolNotFoundError.\r\t\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1005' ],		#self : OmReference [ '1006' ],		#time : DateAndTime [ '2021-01-25T09:51:19.858916-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRows,			#protocol : #tests,			#sourceCode : 'testRows\r\r\t| rowNames actualDataFrame expectedDataFrame |\r\t\r\trowNames := #(A C).\r\t\r\texpectedDataFrame := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(London 8.788 false)).\r\t\t\r\texpectedDataFrame rowNames: rowNames.\r\texpectedDataFrame columnNames: df columnNames.\r\t\r\tactualDataFrame := df rows: rowNames.\r\t\r\tself assert: actualDataFrame equals: expectedDataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1006' ],		#self : OmReference [ '1007' ],		#time : DateAndTime [ '2021-01-25T09:51:19.859131-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowsAt,			#protocol : #tests,			#sourceCode : 'testRowsAt\r\r\t| rowNumbers actualDataFrame expectedDataFrame |\r\t\r\trowNumbers := #(1 3).\r\t\r\texpectedDataFrame := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(London 8.788 false)).\r\t\t\r\texpectedDataFrame rowNames:\r\t\t(rowNumbers collect: [ :i |\r\t\t\tdf rowNames at: i ]).\r\texpectedDataFrame columnNames: df columnNames.\r\t\r\tactualDataFrame := df rowsAt: rowNumbers.\r\t\r\tself assert: actualDataFrame equals: expectedDataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1007' ],		#self : OmReference [ '1008' ],		#time : DateAndTime [ '2021-01-25T09:51:19.859326-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowsAtPut,			#protocol : #tests,			#sourceCode : 'testRowsAtPut\r\t| rowNames columnNames dataFrame newRows expected |\r\t\r\trowNames := #(\'01:10\' \'01:30\' \'01:50\' \'02:10\' \'02:30\') collect: #asTime.\r\tcolumnNames := #(temperature precipitation type).\r\t\r\tdataFrame := DataFrame\r\t\twithRows: #(\r\t\t\t(2.4 true rain)\r\t\t\t(0.5 true rain)\r\t\t\t(-1.2 true snow)\r\t\t\t(-2.3 false -)\r\t\t\t(3.2 true rain))\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\t\r\tnewRows := #(\r\t\t(1 1 1)\r\t\t(2 2 2)\r\t\t(3 3 3)).\r\t\t\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(2.4 true rain)\r\t\t\t(3 3 3)\r\t\t\t(1 1 1)\r\t\t\t(-2.3 false -)\r\t\t\t(2 2 2))\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\r\tdataFrame rowsAt: #(3 5 2) put: newRows.\r\tself assert: dataFrame equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1008' ],		#self : OmReference [ '1009' ],		#time : DateAndTime [ '2021-01-25T09:51:19.859496-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowsFromTo,			#protocol : #tests,			#sourceCode : 'testRowsFromTo\r\r\t| actualDataFrame expectedDataFrame |\r\t\t\r\texpectedDataFrame := DataFrame withRows: #(\r   \t\t(Dubai 2.789 true)\r   \t\t(London 8.788 false)).\r\t\t\r\texpectedDataFrame rowNames: #(B C).\r\texpectedDataFrame columnNames: df columnNames.\r\t\r\tactualDataFrame := df rowsFrom: 2 to: 3.\r\t\r\tself assert: actualDataFrame equals: expectedDataFrame.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1009' ],		#self : OmReference [ '1010' ],		#time : DateAndTime [ '2021-01-25T09:51:19.859793-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowsFromToPut,			#protocol : #tests,			#sourceCode : 'testRowsFromToPut\r\t| rowNames columnNames dataFrame newRows expected |\r\t\r\trowNames := #(\'01:10\' \'01:30\' \'01:50\' \'02:10\' \'02:30\') collect: #asTime.\r\tcolumnNames := #(temperature precipitation type).\r\t\r\tdataFrame := DataFrame\r\t\twithRows: #(\r\t\t\t(2.4 true rain)\r\t\t\t(0.5 true rain)\r\t\t\t(-1.2 true snow)\r\t\t\t(-2.3 false -)\r\t\t\t(3.2 true rain))\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\t\r\tnewRows := #(\r\t\t(1 1 1)\r\t\t(2 2 2)\r\t\t(3 3 3)).\r\t\t\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(2.4 true rain)\r\t\t\t(3 3 3)\r\t\t\t(2 2 2)\r\t\t\t(1 1 1)\r\t\t\t(3.2 true rain))\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\r\tdataFrame rowsFrom: 4 to: 2 put: newRows.\r\tself assert: dataFrame equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1010' ],		#self : OmReference [ '1011' ],		#time : DateAndTime [ '2021-01-25T09:51:19.859986-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testRowsPut,			#protocol : #tests,			#sourceCode : 'testRowsPut\r\t| rowNames columnNames dataFrame newRows expected |\r\t\r\trowNames := #(\'01:10\' \'01:30\' \'01:50\' \'02:10\' \'02:30\') collect: #asTime.\r\tcolumnNames := #(temperature precipitation type).\r\t\r\tdataFrame := DataFrame\r\t\twithRows: #(\r\t\t\t(2.4 true rain)\r\t\t\t(0.5 true rain)\r\t\t\t(-1.2 true snow)\r\t\t\t(-2.3 false -)\r\t\t\t(3.2 true rain))\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\t\r\tnewRows := #(\r\t\t(1 1 1)\r\t\t(2 2 2)\r\t\t(3 3 3)).\r\t\t\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(2.4 true rain)\r\t\t\t(3 3 3)\r\t\t\t(1 1 1)\r\t\t\t(-2.3 false -)\r\t\t\t(2 2 2))\r\t\trowNames: rowNames\r\t\tcolumnNames: columnNames.\r\t\r\tdataFrame rows: { \'01:50\' asTime . \'02:30\' asTime . \'01:30\' asTime } put: newRows.\r\tself assert: dataFrame equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1011' ],		#self : OmReference [ '1012' ],		#time : DateAndTime [ '2021-01-25T09:51:19.860151-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testSelect,			#protocol : #tests,			#sourceCode : 'testSelect\r\t| actual expected |\r\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Dubai 2.789 true)\r\t\t\t(London 8.788 false))\r\t\trowNames: #(B C)\r\t\tcolumnNames: df columnNames.\r\t\t\r\tactual := df select:\r\t\t[ :row | (row at: #Population) > 2 ].\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1012' ],		#self : OmReference [ '1013' ],		#time : DateAndTime [ '2021-01-25T09:51:19.860312-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testSelectEmptyDataFrame,			#protocol : #tests,			#sourceCode : 'testSelectEmptyDataFrame\r\t| actual expected |\r\r\texpected := DataFrame withRows: #().\r\t\t\r\tactual := df select:\r\t\t[ :row | (row at: #Population) > 10 ].\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1013' ],		#self : OmReference [ '1014' ],		#time : DateAndTime [ '2021-01-25T09:51:19.860482-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testSortBy,			#protocol : #tests,			#sourceCode : 'testSortBy\r\r\t| actual expected |\r\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true)\r\t\t(London 8.788 false)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tactual := df sortBy: #Population.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1014' ],		#self : OmReference [ '1015' ],		#time : DateAndTime [ '2021-01-25T09:51:19.860647-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testSortByUsing,			#protocol : #tests,			#sourceCode : 'testSortByUsing\r\t"Sort by second letter of city name"\r\t| actual expected |\r\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r\t\t(London 8.788 false)\r\t\t(Dubai 2.789 true)).\r\t\t\r\texpected rowNames: #(A C B).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tactual := df sortBy: #City using: [ :name1 :name2 |\r\t\tname1 second <= name2 second ].\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1015' ],		#self : OmReference [ '1016' ],		#time : DateAndTime [ '2021-01-25T09:51:19.860814-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testSortDescendingBy,			#protocol : #tests,			#sourceCode : 'testSortDescendingBy\r\r\t| actual expected |\r\r\texpected := DataFrame withRows: #(\r\t\t(London 8.788 false)\r\t\t(Dubai 2.789 true)\r\t\t(Barcelona 1.609 true)).\r\t\t\r\texpected rowNames: #(C B A).\r\texpected columnNames: #(City Population BeenThere).\r\t\r\tactual := df sortDescendingBy: #Population.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1016' ],		#self : OmReference [ '1017' ],		#time : DateAndTime [ '2021-01-25T09:51:19.860984-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testToColumnApplyElementwise,			#protocol : #tests,			#sourceCode : 'testToColumnApplyElementwise\r\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona \'1.609\' true)\r   \t\t(Dubai \'2.789\' true)\r   \t\t(London \'8.788\' false)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population BeenThere).\r\t\t\r\tdf toColumn: #Population\r\t\tapplyElementwise: [ :each | each asString ].\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1017' ],		#self : OmReference [ '1018' ],		#time : DateAndTime [ '2021-01-25T09:51:19.861151-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testToColumnAtApplyElementwise,			#protocol : #tests,			#sourceCode : 'testToColumnAtApplyElementwise\r\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona \'1.609\' true)\r   \t\t(Dubai \'2.789\' true)\r   \t\t(London \'8.788\' false)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population BeenThere).\r\t\t\r\tdf toColumnAt: 2\r\t\tapplyElementwise: [ :each | each asString ].\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1018' ],		#self : OmReference [ '1019' ],		#time : DateAndTime [ '2021-01-25T09:51:19.861318-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testToColumnsApplyElementwise,			#protocol : #tests,			#sourceCode : 'testToColumnsApplyElementwise\r\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona \'1.609\' \'true\')\r   \t\t(Dubai \'2.789\' \'true\')\r   \t\t(London \'8.788\' \'false\')).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population BeenThere).\r\t\t\r\tdf toColumns: #(Population BeenThere)\r\t\tapplyElementwise: [ :each | each asString ].\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1019' ],		#self : OmReference [ '1020' ],		#time : DateAndTime [ '2021-01-25T09:51:19.861486-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testToColumnsAtApplyElementwise,			#protocol : #tests,			#sourceCode : 'testToColumnsAtApplyElementwise\r\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(Barcelona \'1.609\' \'true\')\r   \t\t(Dubai \'2.789\' \'true\')\r   \t\t(London \'8.788\' \'false\')).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(City Population BeenThere).\r\t\t\r\tdf toColumnsAt: #(2 3)\r\t\tapplyElementwise: [ :each | each asString ].\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1020' ],		#self : OmReference [ '1021' ],		#time : DateAndTime [ '2021-01-25T09:51:19.861649-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testTransposed,			#protocol : #tests,			#sourceCode : 'testTransposed\r\r\t| expected |\r\t\r\texpected := DataFrame withRows: #(\r\t\t(\'Barcelona\' \'Dubai\' \'London\')\r\t\t(1.609 2.789 8.788)\r   \t\t(true true false)).\r\t\t\r\texpected rowNames: df columnNames.\r\texpected columnNames: df rowNames.\r\t\r\tself assert: df transposed equals: expected.\r\t\r',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1021' ],		#self : OmReference [ '1022' ],		#time : DateAndTime [ '2021-01-25T09:51:19.861817-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testVarSizeInstanceCreation,			#protocol : #tests,			#sourceCode : 'testVarSizeInstanceCreation\r\r\t| dataFrame |\r\tdataFrame := DataFrame new: 3@2.\r\t\r\tself assert: dataFrame numberOfRows equals: 3.\r\tself assert: dataFrame numberOfColumns equals: 2.\r\t\r\tself assert: dataFrame rowNames equals: #(1 2 3) asOrderedCollection.\r\tself assert: dataFrame columnNames equals: #(1 2) asOrderedCollection.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1022' ],		#self : OmReference [ '1023' ],		#time : DateAndTime [ '2021-01-25T09:51:19.862004-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testWithColumnsRowNames,			#protocol : #tests,			#sourceCode : 'testWithColumnsRowNames\r\t| dataframe |\r\tdataframe := DataFrame\r\t\twithColumns: #(#(1 2 3) #(4 5 6))\r\t\trowNames: #(\'one\' \'two\' \'three\').\r\tself\r\t\tassert: dataframe rowNames asArray\r\t\tequals: #(\'one\' \'two\' \'three\').\r\tself assert: (dataframe row: \'one\') asArray equals: #(1 4).\r\tself assert: (dataframe row: \'two\') asArray equals: #(2 5).\r\tself assert: (dataframe row: \'three\') asArray equals: #(3 6)',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1023' ],		#self : OmReference [ '1024' ],		#time : DateAndTime [ '2021-01-25T09:51:19.862183-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testWithColumnsRowNamesColumnNames,			#protocol : #tests,			#sourceCode : 'testWithColumnsRowNamesColumnNames\r\t| dataframe |\r\tdataframe := DataFrame\r\t\twithColumns: #(#(1 4) #(2 5) #(3 6))\r\t\trowNames: #(\'1\' \'2\')\r\t\tcolumnNames: #(\'one\' \'two\' \'three\').\r\tself\r\t\tassert: dataframe columnNames asArray\r\t\tequals: #(\'one\' \'two\' \'three\').\r\tself assert: ((dataframe column: \'one\') at: \'1\') equals: 1.\r\tself assert: ((dataframe column: \'two\') at: \'1\') equals: 2.\r\tself assert: ((dataframe column: \'three\') at: \'1\') equals: 3.\r\tself assert: ((dataframe column: \'one\') at: \'2\') equals: 4.\r\tself assert: ((dataframe column: \'two\') at: \'2\') equals: 5.\r\tself assert: ((dataframe column: \'three\') at: \'2\') equals: 6',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1024' ],		#self : OmReference [ '1025' ],		#time : DateAndTime [ '2021-01-25T09:51:19.862438-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testWithColumnsRowNamesColumnNames_emptyColumns,			#protocol : #tests,			#sourceCode : 'testWithColumnsRowNamesColumnNames_emptyColumns\r\t| dataframe |\r\tdataframe := DataFrame\r\t\twithColumns: #()\r\t\trowNames: #(\'1\' \'2\')\r\t\tcolumnNames: #().\r\tself assert: dataframe rowNames asArray equals: #(\'1\' \'2\').\r\tself assert: (dataframe row: \'1\') isEmpty.\r\tself assert: (dataframe row: \'2\') isEmpty',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1025' ],		#self : OmReference [ '1026' ],		#time : DateAndTime [ '2021-01-25T09:51:19.862697-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testWithColumnsRowNames_emptyColumns,			#protocol : #tests,			#sourceCode : 'testWithColumnsRowNames_emptyColumns\r\t| dataframe |\r\tdataframe := DataFrame\r\t\twithColumns: #()\r\t\trowNames: #(\'one\' \'two\' \'three\').\r\tself\r\t\tassert: dataframe rowNames asArray\r\t\tequals: #(\'one\' \'two\' \'three\').\r\tself assert: (dataframe row: \'one\') isEmpty',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1026' ],		#self : OmReference [ '1027' ],		#time : DateAndTime [ '2021-01-25T09:51:19.862972-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testWithIndexCollect,			#protocol : #tests,			#sourceCode : 'testWithIndexCollect\r\t| expectedDf expectedResult actualResult |\r\t\r\texpectedDf := DataFrame withRows: #(\r\t\t(Barcelona 1.609 true)\r   \t\t(Dubai 2.789 true)\r   \t\t(London 8.788 false)).\r\t\t\r\texpectedDf rowNames: #(A B C).\r\texpectedDf columnNames: #(City Population BeenThere).\r\t\r\texpectedResult := DataFrame withRows: #(\r\t\t(\'BARCELONA\' 2)\r   \t\t(\'DUBAI\' 4)\r   \t\t(\'LONDON\' 11)).\r\t\t\r\texpectedResult rowNames: #(A B C).\r\texpectedResult columnNames: #(City Population).\r\t\r\tactualResult := df withIndexCollect: [ :row :index |\r\t\trow at: #City put: (row at: #City) asUppercase.\r\t\trow at: #Population put: (row at: #Population) asInteger + index.\r\t\trow removeAt: #BeenThere.\r\t\trow ].\r\t\r\tself assert: actualResult equals: expectedResult.\r\tself assert: df equals: expectedDf.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1027' ],		#self : OmReference [ '1028' ],		#time : DateAndTime [ '2021-01-25T09:51:19.863244-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testWithIndexDo,			#protocol : #tests,			#sourceCode : 'testWithIndexDo\r\r\t| actual expected |\r\r\texpected := { \r\t\t1 -> (DataSeries withKeys: df columnNames values: #(Barcelona 1.609 true) name: \'A\') .\r\t\t2 -> (DataSeries withKeys: df columnNames values: #(Dubai 2.789 true) name: \'B\') .\r\t\t3 -> (DataSeries withKeys: df columnNames values: #(London 8.788 false) name: \'C\') } asDictionary.\r\t\t\r\tactual := Dictionary new.\r\t\r\tdf withIndexDo: [ :each :index |\r\t\tactual at: index put: each ].\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1028' ],		#self : OmReference [ '1029' ],		#time : DateAndTime [ '2021-01-25T09:51:19.863414-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testWithIndexDoCanModifyRows,			#protocol : #tests,			#sourceCode : 'testWithIndexDoCanModifyRows\r\t| expected |\r\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r\t\t\t(Dubai 4.789 true)\r\t\t\t(London 11.788 false))\r\t\trowNames: df rowNames\r\t\tcolumnNames: df columnNames.\r\t\r\tdf withIndexDo: [ :row :index |\r\t\trow name = \'A\'\r\t\t\tifFalse: [ row at: #Population put: ((row at: #Population) + index) ] ].\r\t\r\tself assert: df equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1029' ],		#self : OmReference [ '1030' ],		#time : DateAndTime [ '2021-01-25T09:51:19.863713-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testWithIndexReject,			#protocol : #tests,			#sourceCode : 'testWithIndexReject\r\t| actual expected |\r\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Barcelona 1.609 true)\r\t\t\t(London 8.788 false))\r\t\trowNames: #(A C)\r\t\tcolumnNames: df columnNames.\r\t\t\r\tactual := df withIndexReject: [ :row :index |\r\t\t((row at: #Population) > 2) and: [ index % 2 = 0 ] ].\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1030' ],		#self : OmReference [ '1031' ],		#time : DateAndTime [ '2021-01-25T09:51:19.864003-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testWithIndexSelect,			#protocol : #tests,			#sourceCode : 'testWithIndexSelect\r\t| actual expected |\r\r\texpected := DataFrame\r\t\twithRows: #(\r\t\t\t(Dubai 2.789 true))\r\t\trowNames: #(B)\r\t\tcolumnNames: df columnNames.\r\t\t\r\tactual := df withIndexSelect: [ :row :index |\r\t\t((row at: #Population) > 2) and: [ index % 2 = 0 ] ].\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1031' ],		#self : OmReference [ '1032' ],		#time : DateAndTime [ '2021-01-25T09:51:19.864237-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testWithRowsColumnNames,			#protocol : #tests,			#sourceCode : 'testWithRowsColumnNames\r\t| dataframe |\r\tdataframe := DataFrame\r\t\twithRows: #(#(1 2 3) #(4 5 6))\r\t\tcolumnNames: #(\'one\' \'two\' \'three\').\r\tself\r\t\tassert: dataframe columnNames asArray\r\t\tequals: #(\'one\' \'two\' \'three\').\r\tself assert: (dataframe column: \'one\') asArray equals: #(1 4).\r\tself assert: (dataframe column: \'two\') asArray equals: #(2 5).\r\tself assert: (dataframe column: \'three\') asArray equals: #(3 6)',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1032' ],		#self : OmReference [ '1033' ],		#time : DateAndTime [ '2021-01-25T09:51:19.864412-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testWithRowsColumnNames_emptyRows,			#protocol : #tests,			#sourceCode : 'testWithRowsColumnNames_emptyRows\r\t| dataframe |\r\tdataframe := DataFrame\r\t\twithRows: #()\r\t\tcolumnNames: #(\'one\' \'two\' \'three\').\r\tself\r\t\tassert: dataframe columnNames asArray\r\t\tequals: #(\'one\' \'two\' \'three\').\r\tself assert: (dataframe column: \'one\') isEmpty',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1033' ],		#self : OmReference [ '1034' ],		#time : DateAndTime [ '2021-01-25T09:51:19.864598-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testWithRowsRowNamesColumnNames,			#protocol : #tests,			#sourceCode : 'testWithRowsRowNamesColumnNames\r\t| dataframe |\r\tdataframe := DataFrame\r\t\twithRows: #(#(1 2 3) #(4 5 6))\r\t\trowNames: #(\'1\' \'2\')\r\t\tcolumnNames: #(\'one\' \'two\' \'three\').\r\tself\r\t\tassert: dataframe columnNames asArray\r\t\tequals: #(\'one\' \'two\' \'three\').\r\tself assert: ((dataframe column: \'one\') at: \'1\') equals: 1.\r\tself assert: ((dataframe column: \'two\') at: \'1\') equals: 2.\r\tself assert: ((dataframe column: \'three\') at: \'1\') equals: 3.\r\tself assert: ((dataframe column: \'one\') at: \'2\') equals: 4.\r\tself assert: ((dataframe column: \'two\') at: \'2\') equals: 5.\r\tself assert: ((dataframe column: \'three\') at: \'2\') equals: 6',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1034' ],		#self : OmReference [ '1035' ],		#time : DateAndTime [ '2021-01-25T09:51:19.864763-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTest,				#isMetaSide : false			},			#name : #testWithRowsRowNamesColumnNames_emptyRows,			#protocol : #tests,			#sourceCode : 'testWithRowsRowNamesColumnNames_emptyRows\r\t| dataframe |\r\tdataframe := DataFrame\r\t\twithRows: #()\r\t\trowNames: #()\r\t\tcolumnNames: #(\'one\' \'two\' \'three\').\r\tself\r\t\tassert: dataframe columnNames asArray\r\t\tequals: #(\'one\' \'two\' \'three\').\r\tself assert: (dataframe column: \'one\') isEmpty',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1035' ],		#self : OmReference [ '1036' ],		#time : DateAndTime [ '2021-01-25T09:51:19.864937-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #initialization,			#sourceCode : 'setUp\r\tkeyArray := #(a b c d e f g h i j k).\r\t\r\tseries := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 6 20 8 9 8 10 15 13 16)\r\t\tname: \'ExampleSeries\'.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1036' ],		#self : OmReference [ '1037' ],		#time : DateAndTime [ '2021-01-25T09:51:19.865108-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsAddArrayToSeries,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsAddArrayToSeries\r\t| series array actual expected |\r\t\r\tseries := DataSeries withKeys: #(a b c) values: #(1 2 3) name: #X.\r\tarray := #(3 4 5).\r\t\r\texpected := DataSeries withKeys: #(a b c) values: #(4 6 8) name: #X.\r\tactual := series + array.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1037' ],		#self : OmReference [ '1038' ],		#time : DateAndTime [ '2021-01-25T09:51:19.865272-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsAddScalarToSeries,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsAddScalarToSeries\r\t| series scalar actual expected |\r\t\r\tseries := DataSeries withKeys: #(a b c) values: #(1 2 3) name: #X.\r\tscalar := 10.\r\t\r\texpected := DataSeries withKeys: #(a b c) values: #(11 12 13) name: #X.\r\tactual := series + scalar.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1038' ],		#self : OmReference [ '1039' ],		#time : DateAndTime [ '2021-01-25T09:51:19.865427-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsAddSeriesToArray,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsAddSeriesToArray\r\t| array series actual expected |\r\t\r\tarray := #(1 2 3).\r\tseries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #X.\r\t\r\texpected := DataSeries withKeys: #(a b c) values: #(4 6 8) name: #X.\r\tactual := array + series.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1039' ],		#self : OmReference [ '1040' ],		#time : DateAndTime [ '2021-01-25T09:51:19.865603-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsAddSeriesToScalar,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsAddSeriesToScalar\r\t| scalar series actual expected |\r\t\r\tscalar := 10.\r\tseries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #X.\r\t\r\texpected := DataSeries withKeys: #(a b c) values: #(13 14 15) name: #X.\r\tactual := scalar + series.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1040' ],		#self : OmReference [ '1041' ],		#time : DateAndTime [ '2021-01-25T09:51:19.865784-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsAddSeriesToSeriesDifferentKeys,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsAddSeriesToSeriesDifferentKeys\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(x y z) values: #(1 2 3) name: #X.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #X.\r\t\r\tself should: [ firstSeries + secondSeries ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1041' ],		#self : OmReference [ '1042' ],		#time : DateAndTime [ '2021-01-25T09:51:19.865963-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsAddSeriesToSeriesSameKeysAndName,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsAddSeriesToSeriesSameKeysAndName\r\t| firstSeries secondSeries actual expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 2 3) name: #X.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #X.\r\t\r\texpected := DataSeries withKeys: #(a b c) values: #(4 6 8) name: #X.\r\tactual := firstSeries + secondSeries.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1042' ],		#self : OmReference [ '1043' ],		#time : DateAndTime [ '2021-01-25T09:51:19.866137-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsAddSeriesToSeriesSameKeysDifferentName,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsAddSeriesToSeriesSameKeysDifferentName\r\t| firstSeries secondSeries actual expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 2 3) name: #X.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #Y.\r\t\r\texpected := DataSeries withKeys: #(a b c) values: #(4 6 8) name: #X.\r\tactual := firstSeries + secondSeries.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1043' ],		#self : OmReference [ '1044' ],		#time : DateAndTime [ '2021-01-25T09:51:19.866283-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsDivideArrayBySeries,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsDivideArrayBySeries\r\r\t| array a b |\r\t\r\tarray := #(2 4 3).\r\ta := #(1 2 3) asDataSeries.\r\tb := { 2 . 2 . 1 } asDataSeries.\r\t\r\tself assert: array / a equals: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1044' ],		#self : OmReference [ '1045' ],		#time : DateAndTime [ '2021-01-25T09:51:19.866438-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsDivideSeriesByArray,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsDivideSeriesByArray\r\r\t| array a b |\r\t\r\tarray := #(2 4 3).\r\ta := #(1 2 3) asDataSeries.\r\tb := { 1/2 . 1/2 . 1 } asDataSeries.\r\t\r\tself assert: a / array equals: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1045' ],		#self : OmReference [ '1046' ],		#time : DateAndTime [ '2021-01-25T09:51:19.866584-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsDivideSeriesByScalar,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsDivideSeriesByScalar\r\r\t| a b |\r\t\r\ta := #(1 2 3) asDataSeries.\r\tb := #(0.5 1 1.5) asDataSeries.\r\t\r\tself assert: a / 2 equals: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1046' ],		#self : OmReference [ '1047' ],		#time : DateAndTime [ '2021-01-25T09:51:19.866728-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsDivideSeriesBySeries,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsDivideSeriesBySeries\r\r\t| a b c |\r\t\r\ta := #(2 4 3) asDataSeries.\r\tb := #(1 2 3) asDataSeries.\r\tc := { 2 . 2 . 1 } asDataSeries.\r\t\r\tself assert: a / b equals: c.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1047' ],		#self : OmReference [ '1048' ],		#time : DateAndTime [ '2021-01-25T09:51:19.866879-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsDivideSeriesBySeriesDifferentKeys,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsDivideSeriesBySeriesDifferentKeys\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(x y z) values: #(1 2 3) name: #X.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #X.\r\t\r\tself should: [ firstSeries / secondSeries ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1048' ],		#self : OmReference [ '1049' ],		#time : DateAndTime [ '2021-01-25T09:51:19.867033-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsDivideSeriesBySeriesSameKeysAndName,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsDivideSeriesBySeriesSameKeysAndName\r\t| firstSeries secondSeries actual expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 2 3) name: #X.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #X.\r\t\r\texpected := DataSeries withKeys: #(a b c) values: { 1/3 . 1/2 . 3/5 } name: #X.\r\tactual := firstSeries / secondSeries.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1049' ],		#self : OmReference [ '1050' ],		#time : DateAndTime [ '2021-01-25T09:51:19.867184-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsDivideSeriesBySeriesSameKeysDifferentName,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsDivideSeriesBySeriesSameKeysDifferentName\r\t| firstSeries secondSeries actual expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 2 3) name: #X.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #Y.\r\t\r\texpected := DataSeries withKeys: #(a b c) values: { 1/3 . 1/2 . 3/5 } name: #X.\r\tactual := firstSeries / secondSeries.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1050' ],		#self : OmReference [ '1051' ],		#time : DateAndTime [ '2021-01-25T09:51:19.867332-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsMultiplyArrayBySeries,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsMultiplyArrayBySeries\r\r\t| array a b |\r\t\r\tarray := #(2 4 3).\r\ta := #(1 2 3) asDataSeries.\r\tb := #(2 8 9) asDataSeries.\r\t\r\tself assert: array * a equals: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1051' ],		#self : OmReference [ '1052' ],		#time : DateAndTime [ '2021-01-25T09:51:19.867472-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsMultiplyScalarBySeries,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsMultiplyScalarBySeries\r\r\t| a b |\r\t\r\ta := #(1 2 3) asDataSeries.\r\tb := #(2 4 6) asDataSeries.\r\t\r\tself assert: 2 * a equals: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1052' ],		#self : OmReference [ '1053' ],		#time : DateAndTime [ '2021-01-25T09:51:19.867613-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsMultiplySeriesByArray,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsMultiplySeriesByArray\r\r\t| array a b |\r\t\r\tarray := #(2 4 3).\r\ta := #(1 2 3) asDataSeries.\r\tb := #(2 8 9) asDataSeries.\r\t\r\tself assert: a * array equals: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1053' ],		#self : OmReference [ '1054' ],		#time : DateAndTime [ '2021-01-25T09:51:19.867899-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsMultiplySeriesByScalar,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsMultiplySeriesByScalar\r\r\t| a b |\r\t\r\ta := #(1 2 3) asDataSeries.\r\tb := #(2 4 6) asDataSeries.\r\t\r\tself assert: a * 2 equals: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1054' ],		#self : OmReference [ '1055' ],		#time : DateAndTime [ '2021-01-25T09:51:19.868165-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsMultiplySeriesBySeries,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsMultiplySeriesBySeries\r\r\t| a b c |\r\t\r\ta := #(2 4 3) asDataSeries.\r\tb := #(1 2 3) asDataSeries.\r\tc := #(2 8 9) asDataSeries.\r\t\r\tself assert: a * b equals: c.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1055' ],		#self : OmReference [ '1056' ],		#time : DateAndTime [ '2021-01-25T09:51:19.868446-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsMultiplySeriesBySeriesDifferentKeys,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsMultiplySeriesBySeriesDifferentKeys\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(x y z) values: #(1 2 3) name: #X.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #X.\r\t\r\tself should: [ firstSeries * secondSeries ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1056' ],		#self : OmReference [ '1057' ],		#time : DateAndTime [ '2021-01-25T09:51:19.868659-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsMultiplySeriesBySeriesSameKeysAndName,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsMultiplySeriesBySeriesSameKeysAndName\r\t| firstSeries secondSeries actual expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 2 3) name: #X.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #X.\r\t\r\texpected := DataSeries withKeys: #(a b c) values: #(3 8 15) name: #X.\r\tactual := firstSeries * secondSeries.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1057' ],		#self : OmReference [ '1058' ],		#time : DateAndTime [ '2021-01-25T09:51:19.868895-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsMultiplySeriesBySeriesSameKeysDifferentName,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsMultiplySeriesBySeriesSameKeysDifferentName\r\t| firstSeries secondSeries actual expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 2 3) name: #X.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #Y.\r\t\r\texpected := DataSeries withKeys: #(a b c) values: #(3 8 15) name: #X.\r\tactual := firstSeries * secondSeries.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1058' ],		#self : OmReference [ '1059' ],		#time : DateAndTime [ '2021-01-25T09:51:19.869048-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsSubtractArrayFromSeries,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsSubtractArrayFromSeries\r\r\t| array a b |\r\t\r\tarray := #(2 4 3).\r\ta := #(1 2 3) asDataSeries.\r\tb := #(-1 -2 0) asDataSeries.\r\t\r\tself assert: a - array equals: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1059' ],		#self : OmReference [ '1060' ],		#time : DateAndTime [ '2021-01-25T09:51:19.869227-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsSubtractScalarFromSeries,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsSubtractScalarFromSeries\r\r\t| a b |\r\t\r\ta := #(1 2 3) asDataSeries.\r\tb := #(-1 0 1) asDataSeries.\r\t\r\tself assert: a - 2 equals: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1060' ],		#self : OmReference [ '1061' ],		#time : DateAndTime [ '2021-01-25T09:51:19.86938-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsSubtractSeriesFromArray,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsSubtractSeriesFromArray\r\r\t| array a b |\r\t\r\tarray := #(2 4 3).\r\ta := #(1 2 3) asDataSeries.\r\tb := #(1 2 0) asDataSeries.\r\t\r\tself assert: array - a equals: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1061' ],		#self : OmReference [ '1062' ],		#time : DateAndTime [ '2021-01-25T09:51:19.869554-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsSubtractSeriesFromScalar,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsSubtractSeriesFromScalar\r\r\t| a b |\r\t\r\ta := #(1 2 3) asDataSeries.\r\tb := #(1 0 -1) asDataSeries.\r\t\r\tself assert: 2 - a equals: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1062' ],		#self : OmReference [ '1063' ],		#time : DateAndTime [ '2021-01-25T09:51:19.869708-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsSubtractSeriesFromSeries,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsSubtractSeriesFromSeries\r\r\t| a b c |\r\t\r\ta := #(2 4 3) asDataSeries.\r\tb := #(1 2 3) asDataSeries.\r\tc := #(1 2 0) asDataSeries.\r\t\r\tself assert: a - b equals: c.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1063' ],		#self : OmReference [ '1064' ],		#time : DateAndTime [ '2021-01-25T09:51:19.869871-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsSubtractSeriesFromSeriesDifferentKeys,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsSubtractSeriesFromSeriesDifferentKeys\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(x y z) values: #(1 2 3) name: #X.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #X.\r\t\r\tself should: [ firstSeries - secondSeries ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1064' ],		#self : OmReference [ '1065' ],		#time : DateAndTime [ '2021-01-25T09:51:19.870052-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsSubtractSeriesFromSeriesSameKeysAndName,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsSubtractSeriesFromSeriesSameKeysAndName\r\t| firstSeries secondSeries actual expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 2 3) name: #X.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #X.\r\t\r\texpected := DataSeries withKeys: #(a b c) values: #(-2 -2 -2) name: #X.\r\tactual := firstSeries - secondSeries.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1065' ],		#self : OmReference [ '1066' ],		#time : DateAndTime [ '2021-01-25T09:51:19.87023-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testArithmeticsSubtractSeriesFromSeriesSameKeysDifferentName,			#protocol : #arithmetic,			#sourceCode : 'testArithmeticsSubtractSeriesFromSeriesSameKeysDifferentName\r\t| firstSeries secondSeries actual expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 2 3) name: #X.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(3 4 5) name: #Y.\r\t\r\texpected := DataSeries withKeys: #(a b c) values: #(-2 -2 -2) name: #X.\r\tactual := firstSeries - secondSeries.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1066' ],		#self : OmReference [ '1067' ],		#time : DateAndTime [ '2021-01-25T09:51:19.870411-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testAsDataFrame,			#protocol : #converting,			#sourceCode : 'testAsDataFrame\r\t| expected actual |\r\t\r\texpected := DataFrame\r\t\twithColumns: #((3 7 6 20 8 9 8 10 15 13 16))\r\t\trowNames: #(a b c d e f g h i j k)\r\t\tcolumnNames: #(ExampleSeries).\r\t\r\tactual := series asDataFrame.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1067' ],		#self : OmReference [ '1068' ],		#time : DateAndTime [ '2021-01-25T09:51:19.870558-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testAsDataSeriesEmpty,			#protocol : #creation,			#sourceCode : 'testAsDataSeriesEmpty\r\r\t| dataseries expected |\r\t\r\tdataseries := #() asDataSeries.\r\texpected := DataSeries new.\r\t\r\tself assert: dataseries equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1068' ],		#self : OmReference [ '1069' ],		#time : DateAndTime [ '2021-01-25T09:51:19.870812-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testAsDictionary,			#protocol : #converting,			#sourceCode : 'testAsDictionary\r\t| expected actual |\r\t\r\texpected := {\r\t\t\'a\' -> 3 . \'b\' -> 7 . \'c\' -> 6 . \'d\' -> 20 .\r\t\t\'e\' -> 8 . \'f\' -> 9 . \'g\' -> 8 . \'h\' -> 10 .\r\t\t\'i\' -> 15 . \'j\' -> 13 . \'k\' -> 16 } asDictionary.\r\t\r\tactual := series asDictionary.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1069' ],		#self : OmReference [ '1070' ],		#time : DateAndTime [ '2021-01-25T09:51:19.871665-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testAt,			#protocol : #accessing,			#sourceCode : 'testAt\r\r\tself assert: (series at: #b) equals: 7.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1070' ],		#self : OmReference [ '1071' ],		#time : DateAndTime [ '2021-01-25T09:51:19.871923-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testAtIndex,			#protocol : #accessing,			#sourceCode : 'testAtIndex\r\r\tself assert: (series atIndex: 2) equals: 7.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1071' ],		#self : OmReference [ '1072' ],		#time : DateAndTime [ '2021-01-25T09:51:19.872155-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testAtIndexPut,			#protocol : #accessing,			#sourceCode : 'testAtIndexPut\r\r\t| expected |\r\t\r\tseries atIndex: 6 put: -2.\r\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 6 20 8 -2 8 10 15 13 16)\r\t\tname: series name.\r\t\r\tself assert: series equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1072' ],		#self : OmReference [ '1073' ],		#time : DateAndTime [ '2021-01-25T09:51:19.872348-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testAtIndexTransform,			#protocol : #accessing,			#sourceCode : 'testAtIndexTransform\r\r\t| expected |\r\t\r\tseries atIndex: 6 transform: [ :x | x + 1 ].\t\r\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 6 20 8 10 8 10 15 13 16)\r\t\tname: series name.\r\t\r\tself assert: series equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1073' ],		#self : OmReference [ '1074' ],		#time : DateAndTime [ '2021-01-25T09:51:19.872516-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testAtPut,			#protocol : #accessing,			#sourceCode : 'testAtPut\r\r\t| expected |\r\t\r\tseries at: #f put: -2.\t\r\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 6 20 8 -2 8 10 15 13 16)\r\t\tname: series name.\r\t\r\tself assert: series equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1074' ],		#self : OmReference [ '1075' ],		#time : DateAndTime [ '2021-01-25T09:51:19.872727-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testAtPutNewElement,			#protocol : #accessing,			#sourceCode : 'testAtPutNewElement\r\r\t| expected |\r\t\r\tseries at: #X put: -2.\t\r\t\r\texpected := DataSeries\r\t\twithKeys: (keyArray copyWith: #X)\r\t\tvalues: #(3 7 6 20 8 9 8 10 15 13 16 -2)\r\t\tname: series name.\r\t\r\tself assert: series equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1075' ],		#self : OmReference [ '1076' ],		#time : DateAndTime [ '2021-01-25T09:51:19.872923-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testAtTransform,			#protocol : #accessing,			#sourceCode : 'testAtTransform\r\r\t| expected |\r\t\r\tseries at: #f transform: [ :x | x + 1 ].\t\r\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 6 20 8 10 8 10 15 13 16)\r\t\tname: series name.\r\t\r\tself assert: series equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1076' ],		#self : OmReference [ '1077' ],		#time : DateAndTime [ '2021-01-25T09:51:19.873232-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testAtTransformIfAbsent,			#protocol : #accessing,			#sourceCode : 'testAtTransformIfAbsent\r\r\t| expected exceptionBlockEvaluated |\r\t\r\texceptionBlockEvaluated := false.\r\tseries\r\t\tat: #NoSuchKey\r\t\ttransform: [ :x | x + 1 ]\r\t\tifAbsent: [ exceptionBlockEvaluated := true ].\t\r\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 6 20 8 9 8 10 15 13 16)\r\t\tname: series name.\r\t\r\tself assert: series equals: expected.\r\tself assert: exceptionBlockEvaluated.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1077' ],		#self : OmReference [ '1078' ],		#time : DateAndTime [ '2021-01-25T09:51:19.873565-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanGreaterThanEqualFromScalar,			#protocol : #comparing,			#sourceCode : 'testBooleanGreaterThanEqualFromScalar\r\r\t| aSeries expected |\r\t\r\taSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 8).\r\texpected := DataSeries withKeys: #(1 2 3) values: #(true true false).\r\t\r\tself assert: 1 >= aSeries equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1078' ],		#self : OmReference [ '1079' ],		#time : DateAndTime [ '2021-01-25T09:51:19.873918-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanGreaterThanEqualWithArray,			#protocol : #comparing,			#sourceCode : 'testBooleanGreaterThanEqualWithArray\r\r\t| aSeries expected |\r\t\r\taSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 \'a\').\r\texpected := DataSeries withKeys: #(1 2 3) values: #(true true false).\r\t\r\tself assert: aSeries >= #(1 0.1 \'b\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1079' ],		#self : OmReference [ '1080' ],		#time : DateAndTime [ '2021-01-25T09:51:19.874243-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanGreaterThanEqualWithScalar,			#protocol : #comparing,			#sourceCode : 'testBooleanGreaterThanEqualWithScalar\r\r\t| firstSeries expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(0.8 0.4 1).\r\texpected := DataSeries withKeys: #(a b c) values: #(true false true).\r\t\r\tself assert: firstSeries >= 0.8 equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1080' ],		#self : OmReference [ '1081' ],		#time : DateAndTime [ '2021-01-25T09:51:19.874559-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanGreaterThanEqualWithSeries,			#protocol : #comparing,			#sourceCode : 'testBooleanGreaterThanEqualWithSeries\r\r\t| firstSeries secondSeries expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 \'a\').\r\tsecondSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.1 \'b\').\r\texpected := DataSeries withKeys: #(1 2 3) values: #(true true false).\r\t\r\tself assert: firstSeries >= secondSeries equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1081' ],		#self : OmReference [ '1082' ],		#time : DateAndTime [ '2021-01-25T09:51:19.874861-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanGreaterThanEqualWithSeriesDifferentKeys,			#protocol : #comparing,			#sourceCode : 'testBooleanGreaterThanEqualWithSeriesDifferentKeys\r\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.4 \'a\').\r\tsecondSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.1 \'b\').\r\t\r\tself should: [ firstSeries >= secondSeries ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1082' ],		#self : OmReference [ '1083' ],		#time : DateAndTime [ '2021-01-25T09:51:19.875051-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanGreaterThanEqualWithSeriesDifferentNames,			#protocol : #comparing,			#sourceCode : 'testBooleanGreaterThanEqualWithSeriesDifferentNames\r\r\t| firstSeries secondSeries expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 \'a\') name: \'firstSeries\'.\r\tsecondSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.1 \'b\') name: \'secondSeries\'.\r\texpected := DataSeries withKeys: #(1 2 3) values: #(true true false) name: \'firstSeries\'.\r\t\r\tself assert: firstSeries >= secondSeries equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1083' ],		#self : OmReference [ '1084' ],		#time : DateAndTime [ '2021-01-25T09:51:19.87522-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanGreaterThanFromScalar,			#protocol : #comparing,			#sourceCode : 'testBooleanGreaterThanFromScalar\r\r\t| aSeries expected |\r\t\r\taSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 8).\r\texpected := DataSeries withKeys: #(1 2 3) values: #(false true false).\r\t\r\tself assert: 1 > aSeries equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1084' ],		#self : OmReference [ '1085' ],		#time : DateAndTime [ '2021-01-25T09:51:19.875408-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanGreaterThanWithArray,			#protocol : #comparing,			#sourceCode : 'testBooleanGreaterThanWithArray\r\r\t| aSeries expected |\r\t\r\taSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 \'a\').\r\texpected := DataSeries withKeys: #(1 2 3) values: #(false true false).\r\t\r\tself assert: aSeries > #(1 0.1 \'b\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1085' ],		#self : OmReference [ '1086' ],		#time : DateAndTime [ '2021-01-25T09:51:19.875592-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanGreaterThanWithScalar,			#protocol : #comparing,			#sourceCode : 'testBooleanGreaterThanWithScalar\r\r\t| firstSeries expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(0.8 0.4 1).\r\texpected := DataSeries withKeys: #(a b c) values: #(true false true).\r\t\r\tself assert: firstSeries >= 0.8 equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1086' ],		#self : OmReference [ '1087' ],		#time : DateAndTime [ '2021-01-25T09:51:19.875759-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanGreaterThanWithSeries,			#protocol : #comparing,			#sourceCode : 'testBooleanGreaterThanWithSeries\r\r\t| firstSeries secondSeries expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 \'a\').\r\tsecondSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.1 \'b\').\r\texpected := DataSeries withKeys: #(1 2 3) values: #(false true false).\r\t\r\tself assert: firstSeries > secondSeries equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1087' ],		#self : OmReference [ '1088' ],		#time : DateAndTime [ '2021-01-25T09:51:19.875947-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanGreaterThanWithSeriesDifferentKeys,			#protocol : #comparing,			#sourceCode : 'testBooleanGreaterThanWithSeriesDifferentKeys\r\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.4 \'a\').\r\tsecondSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.1 \'b\').\r\t\r\tself should: [ firstSeries > secondSeries ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1088' ],		#self : OmReference [ '1089' ],		#time : DateAndTime [ '2021-01-25T09:51:19.876141-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanGreaterThanWithSeriesDifferentNames,			#protocol : #comparing,			#sourceCode : 'testBooleanGreaterThanWithSeriesDifferentNames\r\r\t| firstSeries secondSeries expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 \'a\') name: \'firstSeries\'.\r\tsecondSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.1 \'b\') name: \'secondSeries\'.\r\texpected := DataSeries withKeys: #(1 2 3) values: #(false true false) name: \'firstSeries\'.\r\t\r\tself assert: firstSeries > secondSeries equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1089' ],		#self : OmReference [ '1090' ],		#time : DateAndTime [ '2021-01-25T09:51:19.876319-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanLessThanEqualFromScalar,			#protocol : #comparing,			#sourceCode : 'testBooleanLessThanEqualFromScalar\r\r\t| aSeries expected |\r\t\r\taSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 8).\r\texpected := DataSeries withKeys: #(1 2 3) values: #(true false true).\r\t\r\tself assert: 1 <= aSeries equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1090' ],		#self : OmReference [ '1091' ],		#time : DateAndTime [ '2021-01-25T09:51:19.876472-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanLessThanEqualWithArray,			#protocol : #comparing,			#sourceCode : 'testBooleanLessThanEqualWithArray\r\r\t| aSeries expected |\r\t\r\taSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 \'a\').\r\texpected := DataSeries withKeys: #(1 2 3) values: #(true false true).\r\r\tself assert: aSeries <= #(1 0.1 \'b\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1091' ],		#self : OmReference [ '1092' ],		#time : DateAndTime [ '2021-01-25T09:51:19.876622-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanLessThanEqualWithScalar,			#protocol : #comparing,			#sourceCode : 'testBooleanLessThanEqualWithScalar\r\r\t| firstSeries expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(0.8 0.4 1).\r\texpected := DataSeries withKeys: #(a b c) values: #(true true false).\r\t\r\tself assert: firstSeries <= 0.8 equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1092' ],		#self : OmReference [ '1093' ],		#time : DateAndTime [ '2021-01-25T09:51:19.876782-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanLessThanEqualWithSeries,			#protocol : #comparing,			#sourceCode : 'testBooleanLessThanEqualWithSeries\r\r\t| firstSeries secondSeries expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.4 \'a\').\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(1 0.1 \'b\').\r\texpected := DataSeries withKeys: #(a b c) values: #(true false true).\r\t\r\tself assert: firstSeries <= secondSeries equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1093' ],		#self : OmReference [ '1094' ],		#time : DateAndTime [ '2021-01-25T09:51:19.877019-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanLessThanEqualWithSeriesDifferentKeys,			#protocol : #comparing,			#sourceCode : 'testBooleanLessThanEqualWithSeriesDifferentKeys\r\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.4 \'a\').\r\tsecondSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.1 \'b\').\r\t\r\tself should: [ firstSeries <= secondSeries ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1094' ],		#self : OmReference [ '1095' ],		#time : DateAndTime [ '2021-01-25T09:51:19.877201-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanLessThanEqualWithSeriesDifferentNames,			#protocol : #comparing,			#sourceCode : 'testBooleanLessThanEqualWithSeriesDifferentNames\r\r\t| firstSeries secondSeries expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 \'a\') name: \'firstSeries\'.\r\tsecondSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.1 \'b\') name: \'secondSeries\'.\r\texpected := DataSeries withKeys: #(1 2 3) values: #(true false true) name: \'firstSeries\'.\r\t\r\tself assert: firstSeries <= secondSeries equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1095' ],		#self : OmReference [ '1096' ],		#time : DateAndTime [ '2021-01-25T09:51:19.877358-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanLessThanFromScalar,			#protocol : #comparing,			#sourceCode : 'testBooleanLessThanFromScalar\r\r\t| aSeries expected |\r\t\r\taSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 8).\r\texpected := DataSeries withKeys: #(1 2 3) values: #(false false true).\r\t\r\tself assert: 1 < aSeries equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1096' ],		#self : OmReference [ '1097' ],		#time : DateAndTime [ '2021-01-25T09:51:19.87751-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanLessThanWithArray,			#protocol : #comparing,			#sourceCode : 'testBooleanLessThanWithArray\r\r\t| aSeries expected |\r\t\r\taSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 \'a\').\r\texpected := DataSeries withKeys: #(1 2 3) values: #(false false true).\r\r\tself assert: aSeries < #(1 0.1 \'b\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1097' ],		#self : OmReference [ '1098' ],		#time : DateAndTime [ '2021-01-25T09:51:19.877671-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanLessThanWithScalar,			#protocol : #comparing,			#sourceCode : 'testBooleanLessThanWithScalar\r\r\t| firstSeries expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(0.8 0.4 1).\r\texpected := DataSeries withKeys: #(a b c) values: #(false true false).\r\t\r\tself assert: firstSeries < 0.8 equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1098' ],		#self : OmReference [ '1099' ],		#time : DateAndTime [ '2021-01-25T09:51:19.877833-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanLessThanWithSeries,			#protocol : #comparing,			#sourceCode : 'testBooleanLessThanWithSeries\r\r\t| firstSeries secondSeries expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.4 \'a\').\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(1 0.1 \'b\').\r\texpected := DataSeries withKeys: #(a b c) values: #(false false true).\r\t\r\tself assert: firstSeries < secondSeries equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1099' ],		#self : OmReference [ '1100' ],		#time : DateAndTime [ '2021-01-25T09:51:19.877987-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanLessThanWithSeriesDifferentKeys,			#protocol : #comparing,			#sourceCode : 'testBooleanLessThanWithSeriesDifferentKeys\r\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.4 \'a\').\r\tsecondSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.1 \'b\').\r\t\r\tself should: [ firstSeries < secondSeries ] raise: Error.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1100' ],		#self : OmReference [ '1101' ],		#time : DateAndTime [ '2021-01-25T09:51:19.878149-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testBooleanLessThanWithSeriesDifferentNames,			#protocol : #comparing,			#sourceCode : 'testBooleanLessThanWithSeriesDifferentNames\r\r\t| firstSeries secondSeries expected |\r\t\r\tfirstSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.4 \'a\') name: \'firstSeries\'.\r\tsecondSeries := DataSeries withKeys: #(1 2 3) values: #(1 0.1 \'b\') name: \'secondSeries\'.\r\texpected := DataSeries withKeys: #(1 2 3) values: #(false false true) name: \'firstSeries\'.\r\t\r\tself assert: firstSeries < secondSeries equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1101' ],		#self : OmReference [ '1102' ],		#time : DateAndTime [ '2021-01-25T09:51:19.8783-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCategoricalCanBeMadeCategorical,			#protocol : #arithmetic,			#sourceCode : 'testCategoricalCanBeMadeCategorical\r\r\t| categoricalSeries |\r\tcategoricalSeries := #(small medium large) asDataSeries.\r\tself assert: categoricalSeries makeCategorical isCategorical',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1102' ],		#self : OmReference [ '1103' ],		#time : DateAndTime [ '2021-01-25T09:51:19.878446-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCategoricalCanBeMadeNumerical,			#protocol : #arithmetic,			#sourceCode : 'testCategoricalCanBeMadeNumerical\r\r\t| categoricalSeries |\r\tcategoricalSeries := #(small medium large) asDataSeries.\r\tself assert: categoricalSeries makeNumerical isNumerical',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1103' ],		#self : OmReference [ '1104' ],		#time : DateAndTime [ '2021-01-25T09:51:19.878606-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCategoricalCrossTabulateWith,			#protocol : #categorical,			#sourceCode : 'testCategoricalCrossTabulateWith\r\r\t| series1 series2 expected |\r\tseries1 := #(A B C A A B C A B B) asDataSeries.\r\tseries2 := #(1 2 1 2 1 1 2 1 2 2) asDataSeries.\r\t\r\texpected := DataFrame withRows:\r\t\t#((3 1)(1 3)(1 1)).\r\t\t\r\texpected rowNames: #(A B C).\r\texpected columnNames: #(1 2).\r\t\r\tself assert: (series1 crossTabulateWith: series2) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1104' ],		#self : OmReference [ '1105' ],		#time : DateAndTime [ '2021-01-25T09:51:19.878755-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCategoricalIsCategorical,			#protocol : #arithmetic,			#sourceCode : 'testCategoricalIsCategorical\r\r\t| categoricalSeries |\r\tcategoricalSeries := #(small medium large) asDataSeries.\r\tself assert: categoricalSeries isCategorical',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1105' ],		#self : OmReference [ '1106' ],		#time : DateAndTime [ '2021-01-25T09:51:19.878902-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCategoricalIsNotNumerical,			#protocol : #arithmetic,			#sourceCode : 'testCategoricalIsNotNumerical\r\r\t| categoricalSeries |\r\tcategoricalSeries := #(small medium large) asDataSeries.\r\tself deny: categoricalSeries isNumerical',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1106' ],		#self : OmReference [ '1107' ],		#time : DateAndTime [ '2021-01-25T09:51:19.87909-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCategoricalUniqueValues,			#protocol : #categorical,			#sourceCode : 'testCategoricalUniqueValues\r\t| aSeries expected actual |\r\taSeries := DataSeries withKeys: #(a b c d e) values: #(z y y z x).\r\texpected := #(x y z).\r\tactual := aSeries uniqueValues.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1107' ],		#self : OmReference [ '1108' ],		#time : DateAndTime [ '2021-01-25T09:51:19.879279-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCategoricalValueCounts,			#protocol : #categorical,			#sourceCode : 'testCategoricalValueCounts\r\t| actual expected |\r\t\r\texpected := DataSeries \r\t\twithKeys: #(8 20 16 15 13 10 9 7 6 3)\r\t\tvalues: #(2 1 1 1 1 1 1 1 1 1)\r\t\tname: series name.\r\t\t\r\tactual := series valueCounts.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1108' ],		#self : OmReference [ '1109' ],		#time : DateAndTime [ '2021-01-25T09:51:19.879477-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCategoricalValueFrequencies,			#protocol : #categorical,			#sourceCode : 'testCategoricalValueFrequencies\r\r\t| aSeries expected actual |\r\taSeries := DataSeries \r\t\twithValues: #(A B C A A B C A B B)\r\t\tname: #X.\r\t\r\texpected := DataSeries\r\t\twithKeys: #(B A C)\r\t\tvalues: { 2/5 . 2/5 . 1/5 }\r\t\tname: #X.\r\t\t\r\tactual := aSeries valueFrequencies.\r\t\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1109' ],		#self : OmReference [ '1110' ],		#time : DateAndTime [ '2021-01-25T09:51:19.879655-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCloseTo,			#protocol : #comparing,			#sourceCode : 'testCloseTo\r\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.1 2) name: \'A\'.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(1 0.10000001 2) name: \'A\'.\r\t\r\tself assert: firstSeries closeTo: secondSeries.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1110' ],		#self : OmReference [ '1111' ],		#time : DateAndTime [ '2021-01-25T09:51:19.87982-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCloseToDifferentKeys,			#protocol : #comparing,			#sourceCode : 'testCloseToDifferentKeys\r\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.1 2) name: \'A\'.\r\tsecondSeries := DataSeries withKeys: #(x y z) values: #(1 0.10000001 2) name: \'A\'.\r\t\r\tself deny: (firstSeries closeTo: secondSeries).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1111' ],		#self : OmReference [ '1112' ],		#time : DateAndTime [ '2021-01-25T09:51:19.880069-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCloseToDifferentNames,			#protocol : #comparing,			#sourceCode : 'testCloseToDifferentNames\r\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.1 2) name: \'A\'.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(1 0.10000001 2) name: \'B\'.\r\t\r\tself deny: (firstSeries closeTo: secondSeries).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1112' ],		#self : OmReference [ '1113' ],		#time : DateAndTime [ '2021-01-25T09:51:19.880355-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCloseToDifferentValues,			#protocol : #comparing,			#sourceCode : 'testCloseToDifferentValues\r\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.1 2) name: \'A\'.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(1 3.10000001 2) name: \'A\'.\r\t\r\tself deny: (firstSeries closeTo: secondSeries).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1113' ],		#self : OmReference [ '1114' ],		#time : DateAndTime [ '2021-01-25T09:51:19.880592-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCollect,			#protocol : #enumerating,			#sourceCode : 'testCollect\r\r\t| actual expected |\r\t\r\tactual := series collect: [ :each |\r\t\teach / 10 ].\r\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: { 3/10 . 7/10 . 3/5 . 2 . 4/5 . 9/10 . 4/5 . 1 . 3/2 . 13/10 . 8/5 }\r\t\tname: \'ExampleSeries\'.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1114' ],		#self : OmReference [ '1115' ],		#time : DateAndTime [ '2021-01-25T09:51:19.880795-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCollectWithNotNils,			#protocol : #enumerating,			#sourceCode : 'testCollectWithNotNils\r\r\t| actual expected |\r\r\tseries := DataSeries\r\t\twithKeys: #(a b c d e f g h i j k)\r\t\tvalues: #(nil 7 6 nil 8 9 8 10 nil 13 16)\r\t\tname: \'ExampleSeries\'.\r\t\r\tactual := series collectWithNotNils: [ :each |\r\t\teach / 10 ].\r\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: { nil . 7/10 . 3/5 . nil . 4/5 . 9/10 . 4/5 . 1 . nil . 13/10 . 8/5 }\r\t\tname: \'ExampleSeries\'.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1115' ],		#self : OmReference [ '1116' ],		#time : DateAndTime [ '2021-01-25T09:51:19.881048-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCopyCanBeChanged,			#protocol : #copying,			#sourceCode : 'testCopyCanBeChanged\r\r\t| original seriesCopy expectedCopyAfterChange |\r\t\r\toriginal := DataSeries\r\t\twithKeys: #(a b c d)\r\t\tvalues: #(10 30 20 40)\r\t\tname: #X.\r\t\t\r\texpectedCopyAfterChange := DataSeries\r\t\twithKeys: #(b c d e)\r\t\tvalues: #(100 20 40 200)\r\t\tname: #Y.\r\t\t\r\tseriesCopy := original copy.\r\t\r\tseriesCopy at: #b put: 100.\r\tseriesCopy at: #e put: 200.\r\tseriesCopy removeAt: #a.\r\tseriesCopy name: #Y.\r\t\r\tself assert: seriesCopy equals: expectedCopyAfterChange.\r\t',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1116' ],		#self : OmReference [ '1117' ],		#time : DateAndTime [ '2021-01-25T09:51:19.881467-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCopyChangeDoesNotAffectOriginal,			#protocol : #copying,			#sourceCode : 'testCopyChangeDoesNotAffectOriginal\r\r\t| original seriesCopy expectedOriginalAfterChange |\r\t\r\toriginal := DataSeries\r\t\twithKeys: #(a b c d)\r\t\tvalues: #(10 30 20 40)\r\t\tname: #X.\r\t\t\r\texpectedOriginalAfterChange := DataSeries\r\t\twithKeys: #(a b c d)\r\t\tvalues: #(10 30 20 40)\r\t\tname: #X.\r\t\t\r\tseriesCopy := original copy.\r\t\r\tseriesCopy at: #b put: 100.\r\tseriesCopy at: #e put: 200.\r\tseriesCopy removeAt: #a.\r\tseriesCopy name: #Y.\r\t\r\tself assert: original equals: expectedOriginalAfterChange.\r\t',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1117' ],		#self : OmReference [ '1118' ],		#time : DateAndTime [ '2021-01-25T09:51:19.881808-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCreateDataSeriesAsDataSeries,			#protocol : #creation,			#sourceCode : 'testCreateDataSeriesAsDataSeries\r\r\t| dataSeries |\r\tdataSeries := #(a b c) asDataSeries.\r\t\r\tself assert: dataSeries size equals: 3.\r\tself assert: dataSeries asArray equals: #(a b c).\r\tself assert: dataSeries keys equals: #(1 2 3).\r\tself assert: dataSeries name equals: \'(no name)\'.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1118' ],		#self : OmReference [ '1119' ],		#time : DateAndTime [ '2021-01-25T09:51:19.882139-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCreateDataSeriesWithKeysValues,			#protocol : #creation,			#sourceCode : 'testCreateDataSeriesWithKeysValues\r\r\t| values keys dataSeries |\r\t\r\tvalues := #(a b c).\r\tkeys := #(x y z).\r\t\r\tdataSeries := DataSeries\r\t\twithKeys: keys\r\t\tvalues: values.\r\t\r\tself assert: dataSeries size equals: 3.\r\tself assert: dataSeries asArray equals: values.\r\tself assert: dataSeries keys equals: keys.\r\tself assert: dataSeries name equals: \'(no name)\'.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1119' ],		#self : OmReference [ '1120' ],		#time : DateAndTime [ '2021-01-25T09:51:19.882388-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCreateDataSeriesWithKeysValuesName,			#protocol : #creation,			#sourceCode : 'testCreateDataSeriesWithKeysValuesName\r\r\t| values keys name dataSeries |\r\t\r\tvalues := #(a b c).\r\tkeys := #(x y z).\r\tname := \'Some data\'.\r\t\r\tdataSeries := DataSeries\r\t\twithKeys: keys\r\t\tvalues: values\r\t\tname: name.\r\t\r\tself assert: dataSeries size equals: 3.\r\tself assert: dataSeries asArray equals: values.\r\tself assert: dataSeries keys equals: keys.\r\tself assert: dataSeries name equals: name.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1120' ],		#self : OmReference [ '1121' ],		#time : DateAndTime [ '2021-01-25T09:51:19.882564-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCreateDataSeriesWithValues,			#protocol : #creation,			#sourceCode : 'testCreateDataSeriesWithValues\r\r\t| values dataSeries |\r\t\r\tvalues := #(a b c).\r\tdataSeries := DataSeries withValues: values.\r\t\r\tself assert: dataSeries size equals: 3.\r\tself assert: dataSeries asArray equals: values.\r\tself assert: dataSeries keys equals: #(1 2 3).\r\tself assert: dataSeries name equals: \'(no name)\'.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1121' ],		#self : OmReference [ '1122' ],		#time : DateAndTime [ '2021-01-25T09:51:19.882736-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCreateDataSeriesWithValuesName,			#protocol : #creation,			#sourceCode : 'testCreateDataSeriesWithValuesName\r\r\t| values name dataSeries |\r\t\r\tvalues := #(a b c).\r\tname := \'Some data\'.\r\t\r\tdataSeries := DataSeries\r\t\twithValues: values\r\t\tname: name.\r\t\r\tself assert: dataSeries size equals: 3.\r\tself assert: dataSeries asArray equals: values.\r\tself assert: dataSeries keys equals: #(1 2 3).\r\tself assert: dataSeries name equals: name.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1122' ],		#self : OmReference [ '1123' ],		#time : DateAndTime [ '2021-01-25T09:51:19.882891-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testCreateEmptyDataSeries,			#protocol : #creation,			#sourceCode : 'testCreateEmptyDataSeries\r\r\t| dataSeries |\r\tdataSeries := DataSeries new.\r\t\r\tself assert: dataSeries size equals: 0.\r\tself assert: dataSeries asArray equals: #().\r\tself assert: dataSeries keys equals: #().\r\tself assert: dataSeries name equals: \'(no name)\'.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1123' ],		#self : OmReference [ '1124' ],		#time : DateAndTime [ '2021-01-25T09:51:19.883045-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testDetect,			#protocol : #enumerating,			#sourceCode : 'testDetect\r\r\t| expected actual |\r\t\r\texpected := 7.\r\tactual := series detect: [ :x | x > 5 ].\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1124' ],		#self : OmReference [ '1125' ],		#time : DateAndTime [ '2021-01-25T09:51:19.883202-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testDetectIfNone,			#protocol : #enumerating,			#sourceCode : 'testDetectIfNone\r\r\t| expected actual |\r\t\r\texpected := \'not found\'.\r\tactual := series detect: [ :x | x > 100 ] ifNone: [ \'not found\' ].\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1125' ],		#self : OmReference [ '1126' ],		#time : DateAndTime [ '2021-01-25T09:51:19.883363-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testDetectNotFound,			#protocol : #enumerating,			#sourceCode : 'testDetectNotFound\r\r\tself\r\t\tshould: [ series detect: [ :x | x > 100 ] ]\r\t\traise: NotFound.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1126' ],		#self : OmReference [ '1127' ],		#time : DateAndTime [ '2021-01-25T09:51:19.883622-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testDo,			#protocol : #enumerating,			#sourceCode : 'testDo\r\r\t| sum |\r\tsum := 0.\r\t\r\tseries do: [ :each |\r\t\tsum := sum + each ].\r\t\r\tself assert: sum equals: 115.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1127' ],		#self : OmReference [ '1128' ],		#time : DateAndTime [ '2021-01-25T09:51:19.883788-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testEighth,			#protocol : #accessing,			#sourceCode : 'testEighth\r\r\tself assert: series eighth equals: 10.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1128' ],		#self : OmReference [ '1129' ],		#time : DateAndTime [ '2021-01-25T09:51:19.883947-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testEquality,			#protocol : #comparing,			#sourceCode : 'testEquality\r\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.1 \'a\') name: \'A\'.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(1 0.1 \'a\') name: \'A\'.\r\t\r\tself assert: firstSeries equals: secondSeries.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1129' ],		#self : OmReference [ '1130' ],		#time : DateAndTime [ '2021-01-25T09:51:19.8841-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testFifth,			#protocol : #accessing,			#sourceCode : 'testFifth\r\r\tself assert: series fifth equals: 8.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1130' ],		#self : OmReference [ '1131' ],		#time : DateAndTime [ '2021-01-25T09:51:19.884243-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testFirst,			#protocol : #accessing,			#sourceCode : 'testFirst\r\r\tself assert: series first equals: 3.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1131' ],		#self : OmReference [ '1132' ],		#time : DateAndTime [ '2021-01-25T09:51:19.884387-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testFourth,			#protocol : #accessing,			#sourceCode : 'testFourth\r\r\tself assert: series fourth equals: 20.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1132' ],		#self : OmReference [ '1133' ],		#time : DateAndTime [ '2021-01-25T09:51:19.884655-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsing,			#protocol : #grouping,			#sourceCode : 'testGroupByAggregateUsing\r\t| firstSeries secondSeries expected actual |\r\t\r\tfirstSeries := DataSeries withValues: #(1 10 2 1 5) name: #salary.\r\tsecondSeries := DataSeries withValues: #(Male Female Male Male Female) name: #sex.\r\t\r\texpected := DataSeries\r\t\twithKeys: #(Female Male)\r\t\tvalues: #(15 4)\r\t\tname: #salary.\r\t\t\r\tactual := firstSeries groupBy: secondSeries aggregateUsing: #sum.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1133' ],		#self : OmReference [ '1134' ],		#time : DateAndTime [ '2021-01-25T09:51:19.884853-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsingAs,			#protocol : #grouping,			#sourceCode : 'testGroupByAggregateUsingAs\r\t| firstSeries secondSeries expected actual |\r\t\r\tfirstSeries := DataSeries withValues: #(1 10 2 1 5) name: #salary.\r\tsecondSeries := DataSeries withValues: #(Male Female Male Male Female) name: #sex.\r\t\r\texpected := DataSeries\r\t\twithKeys: #(Female Male)\r\t\tvalues: #(15 4)\r\t\tname: #totalSalary.\r\t\t\r\tactual := firstSeries groupBy: secondSeries aggregateUsing: #sum as: #totalSalary.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1134' ],		#self : OmReference [ '1135' ],		#time : DateAndTime [ '2021-01-25T09:51:19.885485-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsingAsSizeMismatch,			#protocol : #grouping,			#sourceCode : 'testGroupByAggregateUsingAsSizeMismatch\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withValues: #(1 10 2 1) name: #salary.\r\tsecondSeries := DataSeries withValues: #(Male Female Male Male Female) name: #sex.\r\t\t\r\tself\r\t\tshould: [ firstSeries groupBy: secondSeries aggregateUsing: #sum as: #totalSalary ]\r\t\traise: SizeMismatch.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1135' ],		#self : OmReference [ '1136' ],		#time : DateAndTime [ '2021-01-25T09:51:19.885805-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testGroupByAggregateUsingSizeMismatch,			#protocol : #grouping,			#sourceCode : 'testGroupByAggregateUsingSizeMismatch\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withValues: #(1 10 2 1 5 100) name: #salary.\r\tsecondSeries := DataSeries withValues: #(Male Female Male Male Female) name: #sex.\r\t\t\r\tself\r\t\tshould: [ firstSeries groupBy: secondSeries aggregateUsing: #sum ]\r\t\traise: SizeMismatch.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1136' ],		#self : OmReference [ '1137' ],		#time : DateAndTime [ '2021-01-25T09:51:19.886049-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testHasNil,			#protocol : #'missing values',			#sourceCode : 'testHasNil\r\t| numbers |\r\tnumbers := #(1 2 nil 3 4) asDataSeries.\r\tself assert: numbers hasNil.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1137' ],		#self : OmReference [ '1138' ],		#time : DateAndTime [ '2021-01-25T09:51:19.886226-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testHasNilFalse,			#protocol : #'missing values',			#sourceCode : 'testHasNilFalse\r\t| numbers |\r\tnumbers := #(1 2 3 4) asDataSeries.\r\tself deny: numbers hasNil.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1138' ],		#self : OmReference [ '1139' ],		#time : DateAndTime [ '2021-01-25T09:51:19.886389-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testHead,			#protocol : #head/tail,			#sourceCode : 'testHead\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(a b c d e)\r\t\tvalues: #(3 7 6 20 8)\r\t\tname: series name.\r\t\t\r\tactual := series head.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1139' ],		#self : OmReference [ '1140' ],		#time : DateAndTime [ '2021-01-25T09:51:19.886552-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testHeadN,			#protocol : #head/tail,			#sourceCode : 'testHeadN\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(a b)\r\t\tvalues: #(3 7)\r\t\tname: series name.\r\t\t\r\tactual := series head: 2.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1140' ],		#self : OmReference [ '1141' ],		#time : DateAndTime [ '2021-01-25T09:51:19.886716-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testInequality,			#protocol : #comparing,			#sourceCode : 'testInequality\r\r\t| a b |\r\t\r\ta := #(1 0.1 \'a\') asDataSeries.\r\tb := #(2 0.2 \'b\') asDataSeries.\r\t\r\ta name: \'A\'.\r\tb name: \'B\'.\r\t\r\tself assert: (a ~= b).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1141' ],		#self : OmReference [ '1142' ],		#time : DateAndTime [ '2021-01-25T09:51:19.886879-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testInequalityDifferentKeys,			#protocol : #comparing,			#sourceCode : 'testInequalityDifferentKeys\r\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.1 \'a\') name: \'A\'.\r\tsecondSeries := DataSeries withKeys: #(x y z) values: #(1 0.1 \'a\') name: \'A\'.\r\t\r\tself assert: (firstSeries ~= secondSeries).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1142' ],		#self : OmReference [ '1143' ],		#time : DateAndTime [ '2021-01-25T09:51:19.887188-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testInequalityDifferentNames,			#protocol : #comparing,			#sourceCode : 'testInequalityDifferentNames\r\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.1 \'a\') name: \'A\'.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(1 0.1 \'a\') name: \'B\'.\r\t\r\tself assert: (firstSeries ~= secondSeries).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1143' ],		#self : OmReference [ '1144' ],		#time : DateAndTime [ '2021-01-25T09:51:19.887528-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testInequalityDifferentValues,			#protocol : #comparing,			#sourceCode : 'testInequalityDifferentValues\r\r\t| firstSeries secondSeries |\r\t\r\tfirstSeries := DataSeries withKeys: #(a b c) values: #(1 0.1 \'a\') name: \'A\'.\r\tsecondSeries := DataSeries withKeys: #(a b c) values: #(1 0.2 \'a\') name: \'A\'.\r\t\r\tself assert: (firstSeries ~= secondSeries).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1144' ],		#self : OmReference [ '1145' ],		#time : DateAndTime [ '2021-01-25T09:51:19.88775-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testInjectInto,			#protocol : #enumerating,			#sourceCode : 'testInjectInto\r\r\t| expected actual |\r\t\r\texpected := 115.\r\tactual := series inject: 0 into: [ :sum :x | sum + x ].\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1145' ],		#self : OmReference [ '1146' ],		#time : DateAndTime [ '2021-01-25T09:51:19.887954-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testLast,			#protocol : #accessing,			#sourceCode : 'testLast\r\r\tself assert: series last equals: 16.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1146' ],		#self : OmReference [ '1147' ],		#time : DateAndTime [ '2021-01-25T09:51:19.888189-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testMathAbs,			#protocol : #'math functions',			#sourceCode : 'testMathAbs\r\r\t| a b |\r\t\r\ta := { 1 . -2 . 3 . -4 } asDataSeries.\r\tb := { 1 . 2 . 3 . 4 } asDataSeries.\r\t\r\tself assert: a abs closeTo: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1147' ],		#self : OmReference [ '1148' ],		#time : DateAndTime [ '2021-01-25T09:51:19.88846-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testMathCos,			#protocol : #'math functions',			#sourceCode : 'testMathCos\r\r\t| a b pi |\r\t\r\tpi := Float pi.\r\ta := { 0 . pi . pi/2 . pi/4 . pi/3 } asDataSeries.\r\tb := { 1.0 . -1.0 . 0.0 . 1/2 sqrt . 0.5 } asDataSeries.\r\t\r\tself assert: a cos closeTo: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1148' ],		#self : OmReference [ '1149' ],		#time : DateAndTime [ '2021-01-25T09:51:19.88863-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testMathExp,			#protocol : #'math functions',			#sourceCode : 'testMathExp\r\r\t| a b |\r\t\r\ta := { 1 . 2 . 3 . 4 } asDataSeries.\r\tb := { 2.71828 . 7.38906 . 20.08554 . 54.59815 } asDataSeries.\r\t\r\tself assert: a exp closeTo: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1149' ],		#self : OmReference [ '1150' ],		#time : DateAndTime [ '2021-01-25T09:51:19.888794-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testMathLn,			#protocol : #'math functions',			#sourceCode : 'testMathLn\r\r\t| a b |\r\t\r\ta := { 1 . 2 . 3 . 4 } asDataSeries.\r\tb := { 0 . 0.69315 . 1.09861 . 1.38629 } asDataSeries.\r\t\r\tself assert: a ln closeTo: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1150' ],		#self : OmReference [ '1151' ],		#time : DateAndTime [ '2021-01-25T09:51:19.888954-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testMathLog,			#protocol : #'math functions',			#sourceCode : 'testMathLog\r\r\t| a b |\r\t\r\ta := { 1 . 2 . 3 . 4 } asDataSeries.\r\tb := { 0.0 . 0.30103 . 0.47712 . 0.60205 } asDataSeries.\r\t\r\tself assert: a log closeTo: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1151' ],		#self : OmReference [ '1152' ],		#time : DateAndTime [ '2021-01-25T09:51:19.889111-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testMathLog2,			#protocol : #'math functions',			#sourceCode : 'testMathLog2\r\r\t| a b |\r\t\r\ta := { 1 . 2 . 3 . 4 } asDataSeries.\r\tb := { 0 . 1 . 1.58496 . 2 } asDataSeries.\r\t\r\tself assert: (a log: 2) closeTo: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1152' ],		#self : OmReference [ '1153' ],		#time : DateAndTime [ '2021-01-25T09:51:19.889272-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testMathPowerScalar,			#protocol : #'math functions',			#sourceCode : 'testMathPowerScalar\r\r\t| a b |\r\t\r\ta := #(1 2 3) asDataSeries.\r\tb := #(1 4 9) asDataSeries.\r\t\r\tself assert: a ** 2 equals: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1153' ],		#self : OmReference [ '1154' ],		#time : DateAndTime [ '2021-01-25T09:51:19.889426-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testMathSin,			#protocol : #'math functions',			#sourceCode : 'testMathSin\r\r\t| a b pi |\r\t\r\tpi := Float pi.\r\ta := { 0 . pi . pi/2 . pi/4 . pi/6 } asDataSeries.\r\tb := { 0.0 . 0.0 . 1.0 . 1/2 sqrt . 0.5 } asDataSeries.\r\t\r\tself assert: a sin closeTo: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1154' ],		#self : OmReference [ '1155' ],		#time : DateAndTime [ '2021-01-25T09:51:19.889583-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testMathSqrt,			#protocol : #'math functions',			#sourceCode : 'testMathSqrt\r\r\t| a b |\r\t\r\ta := { 1 . 2 . 3 . 4 } asDataSeries.\r\tb := { 1 . 1.41421 . 1.73205 . 2 } asDataSeries.\r\t\r\tself assert: a sqrt closeTo: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1155' ],		#self : OmReference [ '1156' ],		#time : DateAndTime [ '2021-01-25T09:51:19.889771-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testMathTan,			#protocol : #'math functions',			#sourceCode : 'testMathTan\r\r\t| a b |\r\t\r\ta := { 1 . 2 . 3 . 4 } asDataSeries.\r\tb := { 1.55741 . -2.18504 . -0.14255 . 1.15782 } asDataSeries.\r\t\r\tself assert: a tan closeTo: b.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1156' ],		#self : OmReference [ '1157' ],		#time : DateAndTime [ '2021-01-25T09:51:19.889979-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testNewFrom,			#protocol : #creation,			#sourceCode : 'testNewFrom\r\r\t| dataseries |\r\t\r\tdataseries := DataSeries newFrom: (series associations).\r\tdataseries name: \'ExampleSeries\'.\r\t\r\tself assert: dataseries equals: series.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1157' ],		#self : OmReference [ '1158' ],		#time : DateAndTime [ '2021-01-25T09:51:19.890245-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testNinth,			#protocol : #accessing,			#sourceCode : 'testNinth\r\r\tself assert: series ninth equals: 15.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1158' ],		#self : OmReference [ '1159' ],		#time : DateAndTime [ '2021-01-25T09:51:19.89046-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testNumericalCanBeMadeCategorical,			#protocol : #arithmetic,			#sourceCode : 'testNumericalCanBeMadeCategorical\r\r\t| numericalSeries |\r\tnumericalSeries := {42 . -1.0 . 4/3} asDataSeries.\r\tself assert: numericalSeries makeCategorical isCategorical',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1159' ],		#self : OmReference [ '1160' ],		#time : DateAndTime [ '2021-01-25T09:51:19.890624-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testNumericalCanBeMadeNumerical,			#protocol : #arithmetic,			#sourceCode : 'testNumericalCanBeMadeNumerical\r\r\t| numericalSeries |\r\tnumericalSeries := {42 . -1.0 . 4/3} asDataSeries.\r\tself assert: numericalSeries makeNumerical isNumerical',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1160' ],		#self : OmReference [ '1161' ],		#time : DateAndTime [ '2021-01-25T09:51:19.890791-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testNumericalIsNotCategorical,			#protocol : #arithmetic,			#sourceCode : 'testNumericalIsNotCategorical\r\r\t| numericalSeries |\r\tnumericalSeries := {42 . -1.0 . 4/3} asDataSeries.\r\tself deny: numericalSeries isCategorical',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1161' ],		#self : OmReference [ '1162' ],		#time : DateAndTime [ '2021-01-25T09:51:19.890945-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testNumericalIsNumerical,			#protocol : #arithmetic,			#sourceCode : 'testNumericalIsNumerical\r\r\t| numericalSeries |\r\tnumericalSeries := {42 . -1.0 . 4/3} asDataSeries.\r\tself assert: numericalSeries isNumerical',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1162' ],		#self : OmReference [ '1163' ],		#time : DateAndTime [ '2021-01-25T09:51:19.891105-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testReject,			#protocol : #enumerating,			#sourceCode : 'testReject\r\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(a b c e f g)\r\t\tvalues: #(3 7 6 8 9 8)\r\t\tname: \'ExampleSeries\'.\r\t\t\r\tactual := series reject: [ :x | x >= 10 ].\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1163' ],		#self : OmReference [ '1164' ],		#time : DateAndTime [ '2021-01-25T09:51:19.891266-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testRemoveAt,			#protocol : #removing,			#sourceCode : 'testRemoveAt\r\r\t| expected |\r\t\r\texpected := DataSeries\r\t\twithKeys: (keyArray copyWithout: #c)\r\t\tvalues: #(3 7 20 8 9 8 10 15 13 16)\r\t\tname: \'ExampleSeries\'.\r\t\r\tseries removeAt: #c.\r\t\r\tself assert: series equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1164' ],		#self : OmReference [ '1165' ],		#time : DateAndTime [ '2021-01-25T09:51:19.891427-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testRemoveAtIndex,			#protocol : #removing,			#sourceCode : 'testRemoveAtIndex\r\r\t| expected |\r\t\r\texpected := DataSeries\r\t\twithKeys: (keyArray copyWithout: #c)\r\t\tvalues: #(3 7 20 8 9 8 10 15 13 16)\r\t\tname: \'ExampleSeries\'.\r\t\r\tseries removeAtIndex: 3.\r\t\r\tself assert: series equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1165' ],		#self : OmReference [ '1166' ],		#time : DateAndTime [ '2021-01-25T09:51:19.891587-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testRemoveNils,			#protocol : #removing,			#sourceCode : 'testRemoveNils\r\r\t| expected |\r\t\r\tseries := DataSeries withKeys: #(1 2 \'a\' 3) values: #(nil 4.2 \'b\' nil).\r\texpected := DataSeries withKeys: #(2 \'a\') values: #(4.2 \'b\').\r\t\r\tself assert: series removeNils equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1166' ],		#self : OmReference [ '1167' ],		#time : DateAndTime [ '2021-01-25T09:51:19.891746-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testRemoveNilsOnNamedSeries,			#protocol : #removing,			#sourceCode : 'testRemoveNilsOnNamedSeries\r\r\t| expected |\r\t\r\tseries := DataSeries withKeys: #(1 2 \'a\' 3) values: #(nil 4.2 \'b\' nil) name: \'A\'.\r\texpected := DataSeries withKeys: #(2 \'a\') values: #(4.2 \'b\') name: \'A\'.\r\t\r\tself assert: series removeNils equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1167' ],		#self : OmReference [ '1168' ],		#time : DateAndTime [ '2021-01-25T09:51:19.891905-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testReplaceNilsWith,			#protocol : #'missing values',			#sourceCode : 'testReplaceNilsWith\r\r\t| expected |\r\tseries := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 nil 20 8 9 8 nil 15 nil 16)\r\t\tname: \'ExampleSeries\'.\r\t\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 0 20 8 9 8 0 15 0 16)\r\t\tname: \'ExampleSeries\'.\r\t\r\tself assert: (series replaceNilsWith: 0.0) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1168' ],		#self : OmReference [ '1169' ],		#time : DateAndTime [ '2021-01-25T09:51:19.892116-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testReplaceNilsWithAverage,			#protocol : #'missing values',			#sourceCode : 'testReplaceNilsWithAverage\r\r\t| expected |\r\tseries := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 nil 20 8 9 8 nil 15 nil 16)\r\t\tname: \'ExampleSeries\'.\r\t\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: {3 . 7 . 43/4 . 20 . 8 . 9 . 8 . 43/4 . 15 . 43/4 . 16}\r\t\tname: \'ExampleSeries\'.\r\t\r\tself assert: series replaceNilsWithAverage equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1169' ],		#self : OmReference [ '1170' ],		#time : DateAndTime [ '2021-01-25T09:51:19.892287-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testReplaceNilsWithFloat,			#protocol : #'missing values',			#sourceCode : 'testReplaceNilsWithFloat\r\r\t| expected |\r\tseries := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 nil 20 8 9 8 nil 15 nil 16)\r\t\tname: \'ExampleSeries\'.\r\t\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 3.14 20 8 9 8 3.14 15 3.14 16)\r\t\tname: \'ExampleSeries\'.\r\t\r\tself assert: (series replaceNilsWith: 3.14) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1170' ],		#self : OmReference [ '1171' ],		#time : DateAndTime [ '2021-01-25T09:51:19.892511-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testReplaceNilsWithMedian,			#protocol : #'missing values',			#sourceCode : 'testReplaceNilsWithMedian\r\r\t| expected |\r\tseries := DataSeries\r\t\twithKeys: #(a b c d e f g h i j k l)\r\t\tvalues: #(1 3 7 nil 20 8 9 8 nil 15 nil 16)\r\t\tname: \'ExampleSeries\'.\r\t\t\r\texpected := DataSeries\r\t\twithKeys: #(a b c d e f g h i j k l)\r\t\tvalues: #(1 3 7 8 20 8 9 8 8 15 8 16)\r\t\tname: \'ExampleSeries\'.\r\t\r\tself assert: series replaceNilsWithMedian equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1171' ],		#self : OmReference [ '1172' ],		#time : DateAndTime [ '2021-01-25T09:51:19.892738-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testReplaceNilsWithMode,			#protocol : #'missing values',			#sourceCode : 'testReplaceNilsWithMode\r\r\t| expected |\r\tseries := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 nil 20 8 9 8 nil 15 nil 16)\r\t\tname: \'ExampleSeries\'.\r\t\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 8 20 8 9 8 8 15 8 16)\r\t\tname: \'ExampleSeries\'.\r\t\r\tself assert: series replaceNilsWithMode equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1172' ],		#self : OmReference [ '1173' ],		#time : DateAndTime [ '2021-01-25T09:51:19.892922-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testReplaceNilsWithString,			#protocol : #'missing values',			#sourceCode : 'testReplaceNilsWithString\r\r\t| expected |\r\tseries := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 nil 20 8 9 8 nil 15 nil 16)\r\t\tname: \'ExampleSeries\'.\r\t\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 \'abc\' 20 8 9 8 \'abc\' 15 \'abc\' 16)\r\t\tname: \'ExampleSeries\'.\r\t\r\tself assert: (series replaceNilsWith: \'abc\') equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1173' ],		#self : OmReference [ '1174' ],		#time : DateAndTime [ '2021-01-25T09:51:19.893102-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testReplaceNilsWithZero,			#protocol : #'missing values',			#sourceCode : 'testReplaceNilsWithZero\r\r\t| expected |\r\tseries := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 nil 20 8 9 8 nil 15 nil 16)\r\t\tname: \'ExampleSeries\'.\r\t\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: #(3 7 0 20 8 9 8 0 15 0 16)\r\t\tname: \'ExampleSeries\'.\r\t\r\tself assert: (series replaceNilsWithZero) equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1174' ],		#self : OmReference [ '1175' ],		#time : DateAndTime [ '2021-01-25T09:51:19.893261-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testSecond,			#protocol : #accessing,			#sourceCode : 'testSecond\r\r\tself assert: series second equals: 7.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1175' ],		#self : OmReference [ '1176' ],		#time : DateAndTime [ '2021-01-25T09:51:19.893432-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testSelect,			#protocol : #enumerating,			#sourceCode : 'testSelect\r\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(a b c e f g)\r\t\tvalues: #(3 7 6 8 9 8)\r\t\tname: \'ExampleSeries\'.\r\t\t\r\tactual := series select: [ :x | x < 10 ].\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1176' ],		#self : OmReference [ '1177' ],		#time : DateAndTime [ '2021-01-25T09:51:19.893598-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testSeventh,			#protocol : #accessing,			#sourceCode : 'testSeventh\r\r\tself assert: series seventh equals: 8.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1177' ],		#self : OmReference [ '1178' ],		#time : DateAndTime [ '2021-01-25T09:51:19.893757-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testSixth,			#protocol : #accessing,			#sourceCode : 'testSixth\r\r\tself assert: series sixth equals: 9.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1178' ],		#self : OmReference [ '1179' ],		#time : DateAndTime [ '2021-01-25T09:51:19.893923-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testSort,			#protocol : #sorting,			#sourceCode : 'testSort\r\t| expected |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(a c b e g f h j i k d)\r\t\tvalues: #(3 6 7 8 8 9 10 13 15 16 20)\r\t\tname: series name.\r\t\t\r\tseries sort.\r\tself assert: series equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1179' ],		#self : OmReference [ '1180' ],		#time : DateAndTime [ '2021-01-25T09:51:19.894094-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testSortBlock,			#protocol : #sorting,			#sourceCode : 'testSortBlock\r\t| expected |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(k j i h d g f e c b a)\r\t\tvalues: #(16 13 15 10 20 8 9 8 6 7 3)\r\t\tname: series name.\r\t\t\r\tseries sort: [ :a :b | a asString size > b asString size ].\r\tself assert: series equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1180' ],		#self : OmReference [ '1181' ],		#time : DateAndTime [ '2021-01-25T09:51:19.894259-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testSortDescending,			#protocol : #sorting,			#sourceCode : 'testSortDescending\r\t| expected |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(d k i j h f g e b c a)\r\t\tvalues: #(20 16 15 13 10 9 8 8 7 6 3)\r\t\tname: series name.\r\t\t\r\tseries sortDescending.\r\tself assert: series equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1181' ],		#self : OmReference [ '1182' ],		#time : DateAndTime [ '2021-01-25T09:51:19.894439-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testSorted,			#protocol : #sorting,			#sourceCode : 'testSorted\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(a c b e g f h j i k d)\r\t\tvalues: #(3 6 7 8 8 9 10 13 15 16 20)\r\t\tname: series name.\r\t\t\r\tactual := series sorted.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1182' ],		#self : OmReference [ '1183' ],		#time : DateAndTime [ '2021-01-25T09:51:19.894616-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testSortedBlock,			#protocol : #sorting,			#sourceCode : 'testSortedBlock\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(k j i h d g f e c b a)\r\t\tvalues: #(16 13 15 10 20 8 9 8 6 7 3)\r\t\tname: series name.\r\t\t\r\tactual := series sorted: [ :a :b | a asString size > b asString size ].\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1183' ],		#self : OmReference [ '1184' ],		#time : DateAndTime [ '2021-01-25T09:51:19.894858-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testSortedBlockDoesNotChangeTheReceiver,			#protocol : #sorting,			#sourceCode : 'testSortedBlockDoesNotChangeTheReceiver\r\t| expected |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(a b c d e f g h i j k)\r\t\tvalues: #(3 7 6 20 8 9 8 10 15 13 16)\r\t\tname: series name.\r\t\t\r\tseries sorted: [ :a :b | a asString size > b asString size ].\r\tself assert: series equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1184' ],		#self : OmReference [ '1185' ],		#time : DateAndTime [ '2021-01-25T09:51:19.895063-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testSortedDescending,			#protocol : #sorting,			#sourceCode : 'testSortedDescending\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(d k i j h f g e b c a)\r\t\tvalues: #(20 16 15 13 10 9 8 8 7 6 3)\r\t\tname: series name.\r\t\t\r\tactual := series sortedDescending.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1185' ],		#self : OmReference [ '1186' ],		#time : DateAndTime [ '2021-01-25T09:51:19.895242-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testSortedDescendingDoesNotChangeTheReceiver,			#protocol : #sorting,			#sourceCode : 'testSortedDescendingDoesNotChangeTheReceiver\r\t| expected |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(a b c d e f g h i j k)\r\t\tvalues: #(3 7 6 20 8 9 8 10 15 13 16)\r\t\tname: series name.\r\t\t\r\tseries sortedDescending.\r\tself assert: series equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1186' ],		#self : OmReference [ '1187' ],		#time : DateAndTime [ '2021-01-25T09:51:19.89542-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testSortedDoesNotChangeTheReceiver,			#protocol : #sorting,			#sourceCode : 'testSortedDoesNotChangeTheReceiver\r\t| expected |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(a b c d e f g h i j k)\r\t\tvalues: #(3 7 6 20 8 9 8 10 15 13 16)\r\t\tname: series name.\r\t\t\r\tseries sorted.\r\tself assert: series equals: expected',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1187' ],		#self : OmReference [ '1188' ],		#time : DateAndTime [ '2021-01-25T09:51:19.89559-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsAverage,			#protocol : #statistics,			#sourceCode : 'testStatsAverage\r\r\tself assert: series average equals: (115/11).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1188' ],		#self : OmReference [ '1189' ],		#time : DateAndTime [ '2021-01-25T09:51:19.895804-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsFirstQuartile,			#protocol : #statistics,			#sourceCode : 'testStatsFirstQuartile\r\r\tself assert: series firstQuartile equals: 7.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1189' ],		#self : OmReference [ '1190' ],		#time : DateAndTime [ '2021-01-25T09:51:19.895972-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsFourthQuartile,			#protocol : #statistics,			#sourceCode : 'testStatsFourthQuartile\r\r\tself assert: series fourthQuartile equals: 20.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1190' ],		#self : OmReference [ '1191' ],		#time : DateAndTime [ '2021-01-25T09:51:19.896241-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsFourthQuartileEqualsMax,			#protocol : #statistics,			#sourceCode : 'testStatsFourthQuartileEqualsMax\r\r\tself assert: series fourthQuartile equals: series max.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1191' ],		#self : OmReference [ '1192' ],		#time : DateAndTime [ '2021-01-25T09:51:19.896514-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsInterquartileRange,			#protocol : #statistics,			#sourceCode : 'testStatsInterquartileRange\r\r\tself assert: series interquartileRange equals: 8.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1192' ],		#self : OmReference [ '1193' ],		#time : DateAndTime [ '2021-01-25T09:51:19.896716-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsMax,			#protocol : #statistics,			#sourceCode : 'testStatsMax\r\r\tself assert: series max equals: 20.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1193' ],		#self : OmReference [ '1194' ],		#time : DateAndTime [ '2021-01-25T09:51:19.896885-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsMedian,			#protocol : #statistics,			#sourceCode : 'testStatsMedian\r\r\tself assert: series median equals: 9.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1194' ],		#self : OmReference [ '1195' ],		#time : DateAndTime [ '2021-01-25T09:51:19.897097-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsMin,			#protocol : #statistics,			#sourceCode : 'testStatsMin\r\r\tself assert: series min equals: 3.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1195' ],		#self : OmReference [ '1196' ],		#time : DateAndTime [ '2021-01-25T09:51:19.897264-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsMode,			#protocol : #statistics,			#sourceCode : 'testStatsMode\r\r\tself assert: series mode equals: 8.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1196' ],		#self : OmReference [ '1197' ],		#time : DateAndTime [ '2021-01-25T09:51:19.897439-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsQuantile,			#protocol : #statistics,			#sourceCode : 'testStatsQuantile\r\t\r\tself assert: (series quantile: 0) equals: 3.\r\tself assert: (series quantile: 10) equals: 6.\r\tself assert: (series quantile: 25) equals: 7.\r\tself assert: (series quantile: 50) equals: 9.\r\tself assert: (series quantile: 75) equals: 15.\r\tself assert: (series quantile: 100) equals: 20.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1197' ],		#self : OmReference [ '1198' ],		#time : DateAndTime [ '2021-01-25T09:51:19.898059-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsQuantileDoesNotModifyTheSeries,			#protocol : #statistics,			#sourceCode : 'testStatsQuantileDoesNotModifyTheSeries\r\t\r\t| copy |\r\tcopy := series copy.\r\tseries quantile: 5.\r\tself assert: series equals: copy.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1198' ],		#self : OmReference [ '1199' ],		#time : DateAndTime [ '2021-01-25T09:51:19.898246-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsQuartile,			#protocol : #statistics,			#sourceCode : 'testStatsQuartile\r\t\r\tself assert: (series quartile: 0) equals: 3.\r\tself assert: (series quartile: 1) equals: 7.\r\tself assert: (series quartile: 2) equals: 9.\r\tself assert: (series quartile: 3) equals: 15.\r\tself assert: (series quartile: 4) equals: 20.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1199' ],		#self : OmReference [ '1200' ],		#time : DateAndTime [ '2021-01-25T09:51:19.898414-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsRange,			#protocol : #statistics,			#sourceCode : 'testStatsRange\r\r\tself assert: series range equals: 17.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1200' ],		#self : OmReference [ '1201' ],		#time : DateAndTime [ '2021-01-25T09:51:19.898576-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsSecondQuartile,			#protocol : #statistics,			#sourceCode : 'testStatsSecondQuartile\r\r\tself assert: series secondQuartile equals: 9.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1201' ],		#self : OmReference [ '1202' ],		#time : DateAndTime [ '2021-01-25T09:51:19.898775-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsSecondQuartileEqualsMedian,			#protocol : #statistics,			#sourceCode : 'testStatsSecondQuartileEqualsMedian\r\r\tself assert: series secondQuartile equals: series median.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1202' ],		#self : OmReference [ '1203' ],		#time : DateAndTime [ '2021-01-25T09:51:19.899025-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsStdev,			#protocol : #statistics,			#sourceCode : 'testStatsStdev\r\r\tself assert: series stdev closeTo: 5.00727.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1203' ],		#self : OmReference [ '1204' ],		#time : DateAndTime [ '2021-01-25T09:51:19.899235-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsSummary,			#protocol : #statistics,			#sourceCode : 'testStatsSummary\r\t| expected actual |\r\t\r\texpected := DataSeries \r\t\twithKeys: #(Min \'1st Qu.\' Median Average \'3rd Qu.\' Max)\r\t\tvalues: { 3 . 7 . 9 . (115 / 11) . 15 . 20 }\r\t\tname: series name.\r\t\t\r\tactual := series summary.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1204' ],		#self : OmReference [ '1205' ],		#time : DateAndTime [ '2021-01-25T09:51:19.899405-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsThirdQuartile,			#protocol : #statistics,			#sourceCode : 'testStatsThirdQuartile\r\r\tself assert: series thirdQuartile equals: 15.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1205' ],		#self : OmReference [ '1206' ],		#time : DateAndTime [ '2021-01-25T09:51:19.899576-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsVariance,			#protocol : #statistics,			#sourceCode : 'testStatsVariance\r\r\tself assert: series variance closeTo: 25.07273.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1206' ],		#self : OmReference [ '1207' ],		#time : DateAndTime [ '2021-01-25T09:51:19.899743-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsZerothQuartile,			#protocol : #statistics,			#sourceCode : 'testStatsZerothQuartile\r\r\tself assert: series zerothQuartile equals: 3.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1207' ],		#self : OmReference [ '1208' ],		#time : DateAndTime [ '2021-01-25T09:51:19.899905-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testStatsZerothQuartileEqualsMin,			#protocol : #statistics,			#sourceCode : 'testStatsZerothQuartileEqualsMin\r\r\tself assert: series zerothQuartile equals: series min.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1208' ],		#self : OmReference [ '1209' ],		#time : DateAndTime [ '2021-01-25T09:51:19.900072-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testTail,			#protocol : #head/tail,			#sourceCode : 'testTail\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(g h i j k)\r\t\tvalues: #(8 10 15 13 16)\r\t\tname: series name.\r\t\t\r\tactual := series tail.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1209' ],		#self : OmReference [ '1210' ],		#time : DateAndTime [ '2021-01-25T09:51:19.900242-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testTailN,			#protocol : #head/tail,			#sourceCode : 'testTailN\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(j k)\r\t\tvalues: #(13 16)\r\t\tname: series name.\r\t\t\r\tactual := series tail: 2.\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1210' ],		#self : OmReference [ '1211' ],		#time : DateAndTime [ '2021-01-25T09:51:19.900404-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testThird,			#protocol : #accessing,			#sourceCode : 'testThird\r\r\tself assert: series third equals: 6.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1211' ],		#self : OmReference [ '1212' ],		#time : DateAndTime [ '2021-01-25T09:51:19.900575-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithIndexCollect,			#protocol : #enumerating,			#sourceCode : 'testWithIndexCollect\r\r\t| actual expected |\r\t\r\tactual := series withIndexCollect: [ :each :i |\r\t\teach / 10 + i ].\r\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: {(13/10). (27/10). (18/5). 6. (29/5). (69/10). (39/5). 9. (21/2). (113/10). (63/5)}\r\t\tname: \'ExampleSeries\'.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1212' ],		#self : OmReference [ '1213' ],		#time : DateAndTime [ '2021-01-25T09:51:19.900746-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithIndexDetect,			#protocol : #enumerating,			#sourceCode : 'testWithIndexDetect\r\r\t| expected actual |\r\t\r\texpected := 6.\r\tactual := series withIndexDetect: [ :x :i | (x > 5) and: (i odd) ].\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1213' ],		#self : OmReference [ '1214' ],		#time : DateAndTime [ '2021-01-25T09:51:19.900925-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithIndexDetectIfNone,			#protocol : #enumerating,			#sourceCode : 'testWithIndexDetectIfNone\r\r\t| expected actual |\r\t\r\texpected := \'not found\'.\r\tactual := series withIndexDetect: [ :x :i | i > 100 ] ifNone: [ \'not found\' ].\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1214' ],		#self : OmReference [ '1215' ],		#time : DateAndTime [ '2021-01-25T09:51:19.901097-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithIndexDetectNotFound,			#protocol : #enumerating,			#sourceCode : 'testWithIndexDetectNotFound\r\r\tself\r\t\tshould: [ series withIndexDetect: [ :x :i | i > 100 ] ]\r\t\traise: NotFound.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1215' ],		#self : OmReference [ '1216' ],		#time : DateAndTime [ '2021-01-25T09:51:19.901265-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithIndexDo,			#protocol : #enumerating,			#sourceCode : 'testWithIndexDo\r\r\t| sum |\r\tsum := 0.\r\t\r\tseries withIndexDo: [ :each :i |\r\t\tsum := sum + (each / i) ].\r\t\r\tself assert: sum equals: (108173/4620).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1216' ],		#self : OmReference [ '1217' ],		#time : DateAndTime [ '2021-01-25T09:51:19.901434-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithIndexReject,			#protocol : #enumerating,			#sourceCode : 'testWithIndexReject\r\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(a c e g)\r\t\tvalues: #(3 6 8 8)\r\t\tname: \'ExampleSeries\'.\r\t\t\r\tactual := series withIndexReject: [ :x :i | x >= 10 or: i even ].\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1217' ],		#self : OmReference [ '1218' ],		#time : DateAndTime [ '2021-01-25T09:51:19.901602-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithIndexSelect,			#protocol : #enumerating,			#sourceCode : 'testWithIndexSelect\r\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(a c e g)\r\t\tvalues: #(3 6 8 8)\r\t\tname: \'ExampleSeries\'.\r\t\t\r\tactual := series withIndexSelect: [ :x :i | x < 10 and: i odd ].\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1218' ],		#self : OmReference [ '1219' ],		#time : DateAndTime [ '2021-01-25T09:51:19.901807-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithKeyCollect,			#protocol : #enumerating,			#sourceCode : 'testWithKeyCollect\r\r\t| actual expected |\r\t\r\tactual := series withKeyCollect: [ :each :key |\r\t\teach / 10 + (keyArray indexOf: key) ].\r\t\r\texpected := DataSeries\r\t\twithKeys: keyArray\r\t\tvalues: {(13/10). (27/10). (18/5). 6. (29/5). (69/10). (39/5). 9. (21/2). (113/10). (63/5)}\r\t\tname: \'ExampleSeries\'.\r\t\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1219' ],		#self : OmReference [ '1220' ],		#time : DateAndTime [ '2021-01-25T09:51:19.901977-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithKeyDetect,			#protocol : #enumerating,			#sourceCode : 'testWithKeyDetect\r\r\t| expected actual |\r\t\r\texpected := 6.\r\tactual := series withKeyDetect: [ :x :k | x > 5 and: (k = #c) ].\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1220' ],		#self : OmReference [ '1221' ],		#time : DateAndTime [ '2021-01-25T09:51:19.902151-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithKeyDetectIfNone,			#protocol : #enumerating,			#sourceCode : 'testWithKeyDetectIfNone\r\r\t| expected actual |\r\t\r\texpected := \'not found\'.\r\tactual := series withKeyDetect: [ :x :k | x > 5 and: (k = #NoSuchKey) ] ifNone: [ \'not found\' ].\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1221' ],		#self : OmReference [ '1222' ],		#time : DateAndTime [ '2021-01-25T09:51:19.902311-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithKeyDetectNotFound,			#protocol : #enumerating,			#sourceCode : 'testWithKeyDetectNotFound\r\r\tself\r\t\tshould: [ series withKeyDetect: [ :x :k | x > 5 and: (k = #NoSuchKey) ] ]\r\t\traise: NotFound.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1222' ],		#self : OmReference [ '1223' ],		#time : DateAndTime [ '2021-01-25T09:51:19.902475-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithKeyDo,			#protocol : #enumerating,			#sourceCode : 'testWithKeyDo\r\r\t| sum |\r\tsum := 0.\r\t\r\tseries withKeyDo: [ :each :key |\r\t\tsum := sum + (each / (keyArray indexOf: key)) ].\r\t\r\tself assert: sum equals: (108173/4620).',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1223' ],		#self : OmReference [ '1224' ],		#time : DateAndTime [ '2021-01-25T09:51:19.902649-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithKeyReject,			#protocol : #enumerating,			#sourceCode : 'testWithKeyReject\r\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(a c g)\r\t\tvalues: #(3 6 8)\r\t\tname: \'ExampleSeries\'.\r\t\t\r\tactual := series withKeyReject: [ :x :k | x >= 10 or: (#(a c g) includes: k) not ].\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1224' ],		#self : OmReference [ '1225' ],		#time : DateAndTime [ '2021-01-25T09:51:19.902829-04:00' ],		#trigger : OmReference [ '715' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataSeriesTest,				#isMetaSide : false			},			#name : #testWithKeySelect,			#protocol : #enumerating,			#sourceCode : 'testWithKeySelect\r\r\t| expected actual |\r\t\r\texpected := DataSeries\r\t\twithKeys: #(a c g)\r\t\tvalues: #(3 6 8)\r\t\tname: \'ExampleSeries\'.\r\t\t\r\tactual := series withKeySelect: [ :x :k | x < 10 and: (#(a c g) includes: k) ].\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-01-25T09:51:20.242236-04:00' ],		#prior : OmReference [ '1225' ],		#self : OmReference [ '1226' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'DataFrame-Type-CompatibleUserName.1607699955'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1226' ],		#self : OmReference [ '1227' ],		#time : DateAndTime [ '2021-01-25T09:51:20.258822-04:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #DataFrame-Type,		#affectedPackageName : #DataFrame-Type	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1227' ],		#self : OmReference [ '1228' ],		#time : DateAndTime [ '2021-01-25T09:51:20.260717-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #DataFrameTypeDetector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Type\''			},			#name : #DataFrameTypeDetector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameTypeDetector class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameTypeDetector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameTypeDetector,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Type,			#package : #DataFrame-Type,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1228' ],		#self : OmReference [ '1229' ],		#time : DateAndTime [ '2021-01-25T09:51:20.262002-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #DataFrameTypeDetector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Type\''			},			#name : #DataFrameTypeDetector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameTypeDetector class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameTypeDetector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameTypeDetector,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a smart type detector. I receive a column of string values such as #(\'5\' \'-1\' \'0.1\') or #(\'1:10\' \'2:20\' \'3:30\'), detect the type to which all values in that column can be converted, and convert all values to that type. For example, #(5.0 -1.0 0.1) and #(1:10 am 2:20 am 3:30 am).\r\rMy typical application is to detect data types of data frame columns after that data frame was read from a CSV file.\r\rI support the following types: Integer, Float, Boolean, Time, DateAndTime, String',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Type,			#package : #DataFrame-Type,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a smart type detector. I receive a column of string values such as #(\'5\' \'-1\' \'0.1\') or #(\'1:10\' \'2:20\' \'3:30\'), detect the type to which all values in that column can be converted, and convert all values to that type. For example, #(5.0 -1.0 0.1) and #(1:10 am 2:20 am 3:30 am).\r\rMy typical application is to detect data types of data frame columns after that data frame was read from a CSV file.\r\rI support the following types: Integer, Float, Boolean, Time, DateAndTime, String',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1229' ],		#self : OmReference [ '1230' ],		#time : DateAndTime [ '2021-01-25T09:51:20.292913-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetector,				#isMetaSide : false			},			#name : #'canAllBeBoolean:',			#protocol : #testing,			#sourceCode : 'canAllBeBoolean: aDataSeries\r\t^ aDataSeries\r\t\tdetect: [ :each | (each ~= \'true\') & (each ~= \'false\') & (each isNotNil)]\r\t\tifFound: [ false ]\r\t\tifNone: [ true ].',			#stamp : '',			#package : #DataFrame-Type		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1230' ],		#self : OmReference [ '1231' ],		#time : DateAndTime [ '2021-01-25T09:51:20.293778-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetector,				#isMetaSide : false			},			#name : #'canAllBeDateAndTime:',			#protocol : #testing,			#sourceCode : 'canAllBeDateAndTime: aDataSeries\r\t[ aDataSeries do: [ :ele | ele isNil ifFalse: [ ele asDateAndTime ]] ]\r\t\ton: Error do: [ ^ false ].\r\t^ true',			#stamp : '',			#package : #DataFrame-Type		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1231' ],		#self : OmReference [ '1232' ],		#time : DateAndTime [ '2021-01-25T09:51:20.29431-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetector,				#isMetaSide : false			},			#name : #'canAllBeNumber:',			#protocol : #testing,			#sourceCode : 'canAllBeNumber: aDataSeries\r\t| regex |\r\tregex := \'^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$\' asRegex.\r\t\r\t^ aDataSeries\r\t\tdetect: [ :each | [ each isNil ifTrue: [ false ] ifFalse: [ (regex matches: each) not ]] on: Error do: [ ^ false ] ]\r\t\tifFound: [ false ]\r\t\tifNone: [ true ]',			#stamp : '',			#package : #DataFrame-Type		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1232' ],		#self : OmReference [ '1233' ],		#time : DateAndTime [ '2021-01-25T09:51:20.294613-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetector,				#isMetaSide : false			},			#name : #'canAllBeTime:',			#protocol : #testing,			#sourceCode : 'canAllBeTime: aDataSeries\r\t[ aDataSeries do: [ :ele | ele isNil ifFalse: [ ele asTime ] ] ]\r\t\ton: Error do: [ ^ false ].\r\t^ true',			#stamp : '',			#package : #DataFrame-Type		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1233' ],		#self : OmReference [ '1234' ],		#time : DateAndTime [ '2021-01-25T09:51:20.294787-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetector,				#isMetaSide : false			},			#name : #'canAnyBeFloat:',			#protocol : #testing,			#sourceCode : 'canAnyBeFloat: aDataSeries\r\t^ aDataSeries\r\t\tdetect: [ :each | each isNil ifTrue: [ false ] ifFalse: [ (each asNumber isFloat) ] ]\r\t\tifFound: [ true ]\r\t\tifNone: [ false ].',			#stamp : '',			#package : #DataFrame-Type		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1234' ],		#self : OmReference [ '1235' ],		#time : DateAndTime [ '2021-01-25T09:51:20.294953-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetector,				#isMetaSide : false			},			#name : #'convertToBoolean:',			#protocol : #converting,			#sourceCode : 'convertToBoolean: aDataSeries\r\t^ aDataSeries collect: [ :each |\r\t\teach isNil\r\t\t\tifFalse: [ each = \'true\' ] ]',			#stamp : '',			#package : #DataFrame-Type		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1235' ],		#self : OmReference [ '1236' ],		#time : DateAndTime [ '2021-01-25T09:51:20.295099-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetector,				#isMetaSide : false			},			#name : #'convertToDateAndTime:',			#protocol : #converting,			#sourceCode : 'convertToDateAndTime: aDataSeries\r\t^ aDataSeries collect: [ :ele | ele isNil ifFalse: [ ele asDateAndTime ] ]',			#stamp : '',			#package : #DataFrame-Type		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1236' ],		#self : OmReference [ '1237' ],		#time : DateAndTime [ '2021-01-25T09:51:20.295334-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetector,				#isMetaSide : false			},			#name : #'convertToFloat:',			#protocol : #converting,			#sourceCode : 'convertToFloat: aDataSeries\r\t^ aDataSeries collect: [ :each | each isNil ifFalse: [ each asNumber asFloat ] ]',			#stamp : '',			#package : #DataFrame-Type		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1237' ],		#self : OmReference [ '1238' ],		#time : DateAndTime [ '2021-01-25T09:51:20.295473-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetector,				#isMetaSide : false			},			#name : #'convertToInteger:',			#protocol : #converting,			#sourceCode : 'convertToInteger: aDataSeries\r\t^ aDataSeries collect: [ :each | each isNil ifFalse: [ each asNumber asInteger ] ]',			#stamp : '',			#package : #DataFrame-Type		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1238' ],		#self : OmReference [ '1239' ],		#time : DateAndTime [ '2021-01-25T09:51:20.295633-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetector,				#isMetaSide : false			},			#name : #'convertToTime:',			#protocol : #converting,			#sourceCode : 'convertToTime: aDataSeries\r\t^ aDataSeries collect: [ :ele | ele isNil ifFalse: [ ele asTime ] ]',			#stamp : '',			#package : #DataFrame-Type		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1239' ],		#self : OmReference [ '1240' ],		#time : DateAndTime [ '2021-01-25T09:51:20.295795-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetector,				#isMetaSide : false			},			#name : #'detectColumnTypeAndConvert:',			#protocol : #'public API',			#sourceCode : 'detectColumnTypeAndConvert: aDataSeries\r\t(self canAllBeNumber: aDataSeries) ifTrue: [ \r\t\t(self canAnyBeFloat: aDataSeries)\r\t\t\tifTrue: [ ^ self convertToFloat: aDataSeries ]\r\t\t\tifFalse: [ ^ self convertToInteger: aDataSeries ] ].\r\t\t\r\t(self canAllBeBoolean: aDataSeries) ifTrue: [ \r\t\t^ self convertToBoolean: aDataSeries ].\r\t\r\t(self canAllBeDateAndTime: aDataSeries) ifTrue: [ \r\t\t^ self convertToDateAndTime: aDataSeries ].\r\t\r\t(self canAllBeTime: aDataSeries) ifTrue: [ \r\t\t^ self convertToTime: aDataSeries ].\r\t\r\t^ aDataSeries',			#stamp : '',			#package : #DataFrame-Type		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1240' ],		#self : OmReference [ '1241' ],		#time : DateAndTime [ '2021-01-25T09:51:20.295934-04:00' ],		#trigger : OmReference [ '1226' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetector,				#isMetaSide : false			},			#name : #'detectTypesAndConvert:',			#protocol : #'public API',			#sourceCode : 'detectTypesAndConvert: aDataFrame\r\taDataFrame columnNames do: [ :columnName |\r\t\taDataFrame column: columnName put: (\r\t\t\tself detectColumnTypeAndConvert: (aDataFrame column: columnName)) asArray ].\r\t\t\r\taDataFrame rowNames: (self detectColumnTypeAndConvert: aDataFrame rowNames).',			#stamp : '',			#package : #DataFrame-Type		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-01-25T09:51:20.360757-04:00' ],		#prior : OmReference [ '1241' ],		#self : OmReference [ '1242' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'DataFrame-Type-Tests-CompatibleUserName.1607699955'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1242' ],		#self : OmReference [ '1243' ],		#time : DateAndTime [ '2021-01-25T09:51:20.382648-04:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #DataFrame-Type-Tests,		#affectedPackageName : #DataFrame-Type-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1243' ],		#self : OmReference [ '1244' ],		#time : DateAndTime [ '2021-01-25T09:51:20.386033-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #DataFrameTypeDetectorTest\r\tinstanceVariableNames: \'detector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-Type-Tests\''			},			#name : #DataFrameTypeDetectorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameTypeDetectorTest,						#isMetaSide : false					},					#name : #detector,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameTypeDetectorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameTypeDetectorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameTypeDetectorTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-Type-Tests,			#package : #DataFrame-Type-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1244' ],		#self : OmReference [ '1245' ],		#time : DateAndTime [ '2021-01-25T09:51:20.408294-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\tdetector := DataFrameTypeDetector new.',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1245' ],		#self : OmReference [ '1246' ],		#time : DateAndTime [ '2021-01-25T09:51:20.409088-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testBooleanColumn,			#protocol : #tests,			#sourceCode : 'testBooleanColumn\r\t| column expected actual |\r\tcolumn := #(\'true\' \'false\' \'true\' \'true\') asDataSeries.\r\texpected := #(true false true true) asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1246' ],		#self : OmReference [ '1247' ],		#time : DateAndTime [ '2021-01-25T09:51:20.409662-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testBooleanColumnWithNils,			#protocol : #tests,			#sourceCode : 'testBooleanColumnWithNils\r\t| column expected actual |\r\tcolumn := #(\'true\' \'false\' \'true\' nil) asDataSeries.\r\texpected := #(true false true nil) asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1247' ],		#self : OmReference [ '1248' ],		#time : DateAndTime [ '2021-01-25T09:51:20.409946-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testColumnAllNils,			#protocol : #tests,			#sourceCode : 'testColumnAllNils\r\t| column expected actual |\r\tcolumn := #(nil nil nil nil) asDataSeries.\r\texpected := #(nil nil nil nil) asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1248' ],		#self : OmReference [ '1249' ],		#time : DateAndTime [ '2021-01-25T09:51:20.410154-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testDateAndTimeColumn,			#protocol : #tests,			#sourceCode : 'testDateAndTimeColumn\r\t| column expected actual |\r\tcolumn := #(\'18 March 1996 1:10\' \'6 March 1996 2:30 am\' \'12 March 2019 14:24 am\' \'9 February 2019 00:00 am\') asDataSeries.\r\texpected := (#(\'1996-03-18T01:10:00\' \'1996-03-06T02:30:00\' \'2019-03-12T14:24:00\' \'2019-02-09T00:00:00\') collect: #asDateAndTime) asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1249' ],		#self : OmReference [ '1250' ],		#time : DateAndTime [ '2021-01-25T09:51:20.410324-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testDateAndTimeColumnWithNils,			#protocol : #tests,			#sourceCode : 'testDateAndTimeColumnWithNils\r\t| column expected actual |\r\tcolumn := #(nil \'6 March 1996 2:30 am\' \'12 March 2019 14:24 am\' nil) asDataSeries.\r\texpected := { nil. \'1996-03-06T02:30:00\' asDateAndTime. \'2019-03-12T14:24:00\' asDateAndTime. nil} asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1250' ],		#self : OmReference [ '1251' ],		#time : DateAndTime [ '2021-01-25T09:51:20.410594-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testFloatColumn,			#protocol : #tests,			#sourceCode : 'testFloatColumn\r\t| column expected actual |\r\tcolumn := #(\'1.2\' \'3.3\' \'-10.1\' \'0.0\') asDataSeries.\r\texpected := #(1.2 3.3 -10.1 0.0) asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1251' ],		#self : OmReference [ '1252' ],		#time : DateAndTime [ '2021-01-25T09:51:20.410771-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testFloatColumnWithNils,			#protocol : #tests,			#sourceCode : 'testFloatColumnWithNils\r\t| column expected actual |\r\tcolumn := #(\'1.2\' nil \'-10.1\' \'0.0\') asDataSeries.\r\texpected := #(1.2 nil -10.1 0.0) asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1252' ],		#self : OmReference [ '1253' ],		#time : DateAndTime [ '2021-01-25T09:51:20.410927-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testIntegerColumn,			#protocol : #tests,			#sourceCode : 'testIntegerColumn\r\t| column expected actual |\r\tcolumn := #(\'1\' \'3\' \'-10\' \'0\') asDataSeries.\r\texpected := #(1 3 -10 0) asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1253' ],		#self : OmReference [ '1254' ],		#time : DateAndTime [ '2021-01-25T09:51:20.411139-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testIntegerColumnWithNils,			#protocol : #tests,			#sourceCode : 'testIntegerColumnWithNils\r\t| column expected actual |\r\tcolumn := #(\'1\' \'3\' \'-10\' nil) asDataSeries.\r\texpected := #(1 3 -10 nil) asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1254' ],		#self : OmReference [ '1255' ],		#time : DateAndTime [ '2021-01-25T09:51:20.41131-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testMixedNumberColumn,			#protocol : #tests,			#sourceCode : 'testMixedNumberColumn\r\t| column expected actual |\r\tcolumn := #(\'1\' \'3.3\' \'-10\' \'0\') asDataSeries.\r\texpected := #(1.0 3.3 -10.0 0.0) asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1255' ],		#self : OmReference [ '1256' ],		#time : DateAndTime [ '2021-01-25T09:51:20.411463-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testMixedNumberColumnWithNils,			#protocol : #tests,			#sourceCode : 'testMixedNumberColumnWithNils\r\t| column expected actual |\r\tcolumn := #(nil \'3.3\' nil \'0\') asDataSeries.\r\texpected := #(nil 3.3 nil 0.0) asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1256' ],		#self : OmReference [ '1257' ],		#time : DateAndTime [ '2021-01-25T09:51:20.411616-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testStringColumn,			#protocol : #tests,			#sourceCode : 'testStringColumn\r\t| column actual |\r\tcolumn := #(\'lorem\' \'ipsum\' \'dolor\' \'sit\') asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: column',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1257' ],		#self : OmReference [ '1258' ],		#time : DateAndTime [ '2021-01-25T09:51:20.411759-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testStringColumnWithNils,			#protocol : #tests,			#sourceCode : 'testStringColumnWithNils\r\t| column actual |\r\tcolumn := #(nil \'ipsum\' \'dolor\' \'sit\') asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: column',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1258' ],		#self : OmReference [ '1259' ],		#time : DateAndTime [ '2021-01-25T09:51:20.411907-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testTimeColumn,			#protocol : #tests,			#sourceCode : 'testTimeColumn\r\t| column expected actual |\r\tcolumn := #(\'1:10\' \'2:30\' \'14:24\' \'00:00\') asDataSeries.\r\texpected := (#(\'1:10 am\' \'2:30 am\' \'14:24 am\' \'00:00 am\') collect: #asTime) asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1259' ],		#self : OmReference [ '1260' ],		#time : DateAndTime [ '2021-01-25T09:51:20.412056-04:00' ],		#trigger : OmReference [ '1242' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameTypeDetectorTest,				#isMetaSide : false			},			#name : #testTimeColumnWithNils,			#protocol : #tests,			#sourceCode : 'testTimeColumnWithNils\r\t| column expected actual |\r\tcolumn := #(\'1:10\' nil \'14:24\' nil) asDataSeries.\r\texpected := {\'1:10 am\' asTime. nil. \'14:24 am\' asTime. nil} asDataSeries.\r\tactual := detector detectColumnTypeAndConvert: column.\r\tself assert: actual equals: expected',			#stamp : '',			#package : #DataFrame-Type-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-01-25T09:51:20.476813-04:00' ],		#prior : OmReference [ '1260' ],		#self : OmReference [ '1261' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'DataFrame-IO-CompatibleUserName.1607699955'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1261' ],		#self : OmReference [ '1262' ],		#time : DateAndTime [ '2021-01-25T09:51:20.501945-04:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #DataFrame-IO,		#affectedPackageName : #DataFrame-IO	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1262' ],		#self : OmReference [ '1263' ],		#time : DateAndTime [ '2021-01-25T09:51:20.505061-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #DataFrameReader\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-IO\''			},			#name : #DataFrameReader,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameReader class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameReader class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameReader,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-IO,			#package : #DataFrame-IO,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1263' ],		#self : OmReference [ '1264' ],		#time : DateAndTime [ '2021-01-25T09:51:20.508655-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'DataFrameReader',				#traitCompositionSource : '{}',				#definitionSource : 'DataFrameReader subclass: #DataFrameCsvReader\r\tinstanceVariableNames: \'separator includeRowNames shouldInferTypes rowNames rows columnNames\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-IO\''			},			#name : #DataFrameCsvReader,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvReader,						#isMetaSide : false					},					#name : #separator,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvReader,						#isMetaSide : false					},					#name : #includeRowNames,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvReader,						#isMetaSide : false					},					#name : #shouldInferTypes,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvReader,						#isMetaSide : false					},					#name : #rowNames,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvReader,						#isMetaSide : false					},					#name : #rows,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvReader,						#isMetaSide : false					},					#name : #columnNames,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameCsvReader class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameCsvReader class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameCsvReader,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-IO,			#package : #DataFrame-IO,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1264' ],		#self : OmReference [ '1265' ],		#time : DateAndTime [ '2021-01-25T09:51:20.510805-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'DataFrameReader',				#traitCompositionSource : '{}',				#definitionSource : 'DataFrameReader subclass: #DataFrameJsonReader\r\tinstanceVariableNames: \'rowNames rows columnNames orient uniform parseMap\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-IO\''			},			#name : #DataFrameJsonReader,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonReader,						#isMetaSide : false					},					#name : #rowNames,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonReader,						#isMetaSide : false					},					#name : #rows,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonReader,						#isMetaSide : false					},					#name : #columnNames,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonReader,						#isMetaSide : false					},					#name : #orient,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonReader,						#isMetaSide : false					},					#name : #uniform,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonReader,						#isMetaSide : false					},					#name : #parseMap,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameJsonReader class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameJsonReader class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameJsonReader,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-IO,			#package : #DataFrame-IO,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1265' ],		#self : OmReference [ '1266' ],		#time : DateAndTime [ '2021-01-25T09:51:20.513797-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #DataFrameWriter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-IO\''			},			#name : #DataFrameWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameWriter,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-IO,			#package : #DataFrame-IO,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1266' ],		#self : OmReference [ '1267' ],		#time : DateAndTime [ '2021-01-25T09:51:20.51585-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'DataFrameWriter',				#traitCompositionSource : '{}',				#definitionSource : 'DataFrameWriter subclass: #DataFrameCsvWriter\r\tinstanceVariableNames: \'separator lineEndConvention\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-IO\''			},			#name : #DataFrameCsvWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvWriter,						#isMetaSide : false					},					#name : #separator,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvWriter,						#isMetaSide : false					},					#name : #lineEndConvention,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameCsvWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameCsvWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameCsvWriter,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-IO,			#package : #DataFrame-IO,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1267' ],		#self : OmReference [ '1268' ],		#time : DateAndTime [ '2021-01-25T09:51:20.517649-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'DataFrameWriter',				#traitCompositionSource : '{}',				#definitionSource : 'DataFrameWriter subclass: #DataFrameJsonWriter\r\tinstanceVariableNames: \'orient pretty writeMap\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-IO\''			},			#name : #DataFrameJsonWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonWriter,						#isMetaSide : false					},					#name : #orient,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonWriter,						#isMetaSide : false					},					#name : #pretty,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonWriter,						#isMetaSide : false					},					#name : #writeMap,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameJsonWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameJsonWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameJsonWriter,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-IO,			#package : #DataFrame-IO,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1268' ],		#self : OmReference [ '1269' ],		#time : DateAndTime [ '2021-01-25T09:51:20.565103-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #createDataFrame,			#protocol : #reading,			#sourceCode : 'createDataFrame\r\t| df |\r\tdf := DataFrame\r\t\twithRows: rows\r\t\tcolumnNames: columnNames.\r\t\t\r\tself includeRowNames ifTrue: [ \r\t\tdf rowNames: rowNames ].\r\t\r\t^ df',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1269' ],		#self : OmReference [ '1270' ],		#time : DateAndTime [ '2021-01-25T09:51:20.565877-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #defaultIncludeRowNames,			#protocol : #accessing,			#sourceCode : 'defaultIncludeRowNames\r\t^ false',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1270' ],		#self : OmReference [ '1271' ],		#time : DateAndTime [ '2021-01-25T09:51:20.566575-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #defaultSeparator,			#protocol : #accessing,			#sourceCode : 'defaultSeparator\r\t^ $,',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1271' ],		#self : OmReference [ '1272' ],		#time : DateAndTime [ '2021-01-25T09:51:20.566929-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #defaultShouldInferTypes,			#protocol : #accessing,			#sourceCode : 'defaultShouldInferTypes\r\t^ true',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1272' ],		#self : OmReference [ '1273' ],		#time : DateAndTime [ '2021-01-25T09:51:20.567144-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #includeRowNames,			#protocol : #accessing,			#sourceCode : 'includeRowNames\r\t^ includeRowNames',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1273' ],		#self : OmReference [ '1274' ],		#time : DateAndTime [ '2021-01-25T09:51:20.567315-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #'includeRowNames:',			#protocol : #accessing,			#sourceCode : 'includeRowNames: anObject\r\tincludeRowNames := anObject',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1274' ],		#self : OmReference [ '1275' ],		#time : DateAndTime [ '2021-01-25T09:51:20.567463-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize \r\tsuper initialize.\r\tseparator := self defaultSeparator.\r\tincludeRowNames := self defaultIncludeRowNames.\r\tshouldInferTypes := self defaultShouldInferTypes.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1275' ],		#self : OmReference [ '1276' ],		#time : DateAndTime [ '2021-01-25T09:51:20.567712-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #'readColumnNamesWith:',			#protocol : #reading,			#sourceCode : 'readColumnNamesWith: aReader\r\tcolumnNames := aReader readHeader.\r\t\r\tself includeRowNames ifTrue: [\r\t\tcolumnNames := columnNames copyWithoutFirst ].',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1276' ],		#self : OmReference [ '1277' ],		#time : DateAndTime [ '2021-01-25T09:51:20.567904-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #'readFrom:',			#protocol : #reading,			#sourceCode : 'readFrom: aFileReference\r\t"Read data frame from a CSV file"\r\t| stream reader df |\r\tstream := aFileReference readStream.\r\treader := NeoCSVReader on: stream.\r\treader separator: self separator.\r\t\r\tself readColumnNamesWith: reader.\r\tself readRowsWith: reader.\r\t\r\treader close.\r\t\r\tdf := self createDataFrame.\r\tshouldInferTypes ifTrue: [\r\t\tDataFrameTypeDetector new detectTypesAndConvert: df ].\r\t^ df\r\t',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1277' ],		#self : OmReference [ '1278' ],		#time : DateAndTime [ '2021-01-25T09:51:20.568108-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #'readOnlyRowsWith:',			#protocol : #reading,			#sourceCode : 'readOnlyRowsWith: aReader\r\trows := OrderedCollection new.\r\t\r\t[ aReader atEnd ] whileFalse: [ \r\t\trows add: aReader next ].',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1278' ],		#self : OmReference [ '1279' ],		#time : DateAndTime [ '2021-01-25T09:51:20.568314-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #'readRowsAndRowNamesWith:',			#protocol : #reading,			#sourceCode : 'readRowsAndRowNamesWith: aReader\r\t| line |\r\trowNames := OrderedCollection new.\r\trows := OrderedCollection new.\r\t\r\t[ aReader atEnd ] whileFalse: [ \r\t\tline := aReader next.\r\t\trowNames add: line first.\r\t\trows add: line copyWithoutFirst ].',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1279' ],		#self : OmReference [ '1280' ],		#time : DateAndTime [ '2021-01-25T09:51:20.568486-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #'readRowsWith:',			#protocol : #reading,			#sourceCode : 'readRowsWith: aReader\r\t^ self includeRowNames\r\t\tifTrue: [ self readRowsAndRowNamesWith: aReader ]\r\t\tifFalse: [ self readOnlyRowsWith: aReader ].',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1280' ],		#self : OmReference [ '1281' ],		#time : DateAndTime [ '2021-01-25T09:51:20.568652-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #separator,			#protocol : #accessing,			#sourceCode : 'separator\r\t^ separator',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1281' ],		#self : OmReference [ '1282' ],		#time : DateAndTime [ '2021-01-25T09:51:20.568832-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #'separator:',			#protocol : #accessing,			#sourceCode : 'separator: anObject\r\tseparator := anObject',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1282' ],		#self : OmReference [ '1283' ],		#time : DateAndTime [ '2021-01-25T09:51:20.569017-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #shouldInferTypes,			#protocol : #accessing,			#sourceCode : 'shouldInferTypes\r\t^ shouldInferTypes',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1283' ],		#self : OmReference [ '1284' ],		#time : DateAndTime [ '2021-01-25T09:51:20.56919-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReader,				#isMetaSide : false			},			#name : #'shouldInferTypes:',			#protocol : #accessing,			#sourceCode : 'shouldInferTypes: anObject\r\tshouldInferTypes := anObject',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1284' ],		#self : OmReference [ '1285' ],		#time : DateAndTime [ '2021-01-25T09:51:20.569402-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #'addDict:',			#protocol : #adding,			#sourceCode : 'addDict: aDict\r\t"Adds aDict while respecting columnNames positions"\r\t\r\t| newCols |\r\t\r\tnewCols := aDict keys difference: columnNames.\r\tcolumnNames addAll: newCols.\r\t\r\trows add: (columnNames collect: [ :col | aDict at: col ifAbsent: nil ]).',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1285' ],		#self : OmReference [ '1286' ],		#time : DateAndTime [ '2021-01-25T09:51:20.569591-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #createDataFrame,			#protocol : #reading,			#sourceCode : 'createDataFrame\r\t| df |\r\t\r\tdf := DataFrame withRows: rows.\r\trowNames ifNotNil: [ df rowNames: rowNames ].\r\tcolumnNames ifNotNil: [ df columnNames: columnNames  ].\r\t\r\tDataFrameTypeDetector new detectTypesAndConvert: df.\r\t\r\t^ df',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1286' ],		#self : OmReference [ '1287' ],		#time : DateAndTime [ '2021-01-25T09:51:20.569789-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #'inferOrientFromJson:',			#protocol : #'initialization - private',			#sourceCode : 'inferOrientFromJson: json\r\t"Inferes the json type (orient parameter). Runs when orient=\'auto\'"\r\r\t(json isKindOf: SequenceableCollection)\r\t\tifTrue: [\r\t\t\t((json first) isKindOf: SequenceableCollection)\r\t\t\t\tifTrue: [ self orient: \'values\' ]\r\t\t\t\tifFalse: [ self orient: \'records\' ]\r\t\t\t]\r\t\tifFalse: [\r\t\t\t((json at: (json keys first)) isKindOf: SequenceableCollection)\r\t\t\t\tifTrue: [ self orient: \'split\' ]\r\t\t\t\tifFalse: [ self orient: \'columns\' ].\r\t\t\t].',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1287' ],		#self : OmReference [ '1288' ],		#time : DateAndTime [ '2021-01-25T09:51:20.56998-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\torient := self orientDefaultValue.\r\tuniform := self uniformDefaultValue.\r\tparseMap := Dictionary newFrom: {\r\t\t\'records\'->[ :json | self parseFromRecords: json ].\r\t\t\'columns\'->[ :json | self parseFromColumns: json ].\r\t\t\'index\'->[ :json | self parseFromRowNames: json ].\r\t\t\'values\'->[ :json | self parseFromValues: json ].\r\t\t\'split\'->[ :json | self parseFromSplit: json ].\r\t\t}.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1288' ],		#self : OmReference [ '1289' ],		#time : DateAndTime [ '2021-01-25T09:51:20.570176-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #orient,			#protocol : #accessing,			#sourceCode : 'orient\r\t^ orient',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1289' ],		#self : OmReference [ '1290' ],		#time : DateAndTime [ '2021-01-25T09:51:20.570344-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #'orient:',			#protocol : #accessing,			#sourceCode : 'orient: aString\r\torient := aString',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1290' ],		#self : OmReference [ '1291' ],		#time : DateAndTime [ '2021-01-25T09:51:20.570528-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #orientDefaultValue,			#protocol : #accessing,			#sourceCode : 'orientDefaultValue\r\t^ \'auto\'',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1291' ],		#self : OmReference [ '1292' ],		#time : DateAndTime [ '2021-01-25T09:51:20.570697-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #'parseFromColumns:',			#protocol : #parsing,			#sourceCode : 'parseFromColumns: aDict\r\t"Private. Accessed when orient = \'columns\'.\r\t Slower if uniform is set to false.\r\t Incoming json format is:\r\t\t\r\t\t{\r\t\t column->{\r\t\t\t\t\t rowName->data\r\t\t\t\t\t}\r\t\t}\r\t\t\r\t"\r\t| colIndex rowIndex |\r\r\tcolumnNames := OrderedCollection newFrom: aDict keys.\r\trowNames := OrderedCollection new.\r\trows := OrderedCollection new.\r\t\r\taDict keysAndValuesDo: [ :col :rowNamesDict |\r\t\tcolIndex := columnNames indexOf: col.\r\t\trowNamesDict keysAndValuesDo: [ :rowName :val |\r\t\t\trowIndex := rowNames indexOf: rowName ifAbsent: [\r\t\t\t\trowNames add: rowName. rowNames size ].\r\t\t\t"Basically `row at:rowIndex at:colIndex put:val`"\r\t\t\t(rows at: rowIndex\r\t\t\t\t\tifAbsentPut: (OrderedCollection ofSize: columnNames size)\r\t\t\t\t\t)\tat: colIndex\r\t\t\t\t\t\tifAbsentPut: val.\r\t\t\t].\r\t\t].',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1292' ],		#self : OmReference [ '1293' ],		#time : DateAndTime [ '2021-01-25T09:51:20.570846-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #'parseFromRecords:',			#protocol : #parsing,			#sourceCode : 'parseFromRecords: anArray\r\t"Private. Accessed when orient = \'records\'.\r\t Incoming json format is:\r\t\t[\r\t\t\t{column->data},\r\t\t]\r\t"\r\t\r\trows := OrderedCollection new: anArray size.\r\tcolumnNames := OrderedCollection new.\r\trowNames := nil.\r\t\r\tanArray do: [ :record |\r\t\tself addDict: record\r\t\t].',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1293' ],		#self : OmReference [ '1294' ],		#time : DateAndTime [ '2021-01-25T09:51:20.571004-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #'parseFromRowNames:',			#protocol : #parsing,			#sourceCode : 'parseFromRowNames: aDict\r\t"Private. Accessed when orient = \'rowNames\'.\r\t Slower if uniform is set to false.\r\t Incoming json format is:\r\t\t{\r\t\t rowName->{\r\t\t\t\t\t column->data\r\t\t\t\t\t}\r\t\t}\r\t"\r\r\tcolumnNames := OrderedCollection new.\r\trowNames := OrderedCollection new: (aDict keys) size.\r\trows := OrderedCollection new: (aDict keys) size.\r\t\r\taDict keysAndValuesDo: [ :rowName :rowNamesDict |\r\t\trowNames add: rowName.\r\t\tself addDict: rowNamesDict.\r\t\t].',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1294' ],		#self : OmReference [ '1295' ],		#time : DateAndTime [ '2021-01-25T09:51:20.57115-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #'parseFromSplit:',			#protocol : #parsing,			#sourceCode : 'parseFromSplit: aDict\r\t"Private. Accessed when orient = \'split\'.\r\t Incoming json format is:\r\t\t{\r\t\t\tindex->[rowNames],\r\t\t\tcolumns->[columnNames],\r\t\t\tdata->[data]\r\t\t}\r\t"\r\t\r\trows := aDict at: \'data\'.\r\trowNames := aDict at: \'index\'.\r\tcolumnNames := aDict at: \'columns\'.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1295' ],		#self : OmReference [ '1296' ],		#time : DateAndTime [ '2021-01-25T09:51:20.57132-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #'parseFromValues:',			#protocol : #parsing,			#sourceCode : 'parseFromValues: anArrayOfArrays\r\t"Private. Accessed when orient = \'values\'"\r\t\r\trows := anArrayOfArrays.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1296' ],		#self : OmReference [ '1297' ],		#time : DateAndTime [ '2021-01-25T09:51:20.571485-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #'read:',			#protocol : #reading,			#sourceCode : 'read: json\r\t"Loads parsed json"\r\t\r\tjson isEmpty\r\t\tifTrue: [ rows := #() ]\r\t\tifFalse: [\r\t\t\torient = \'auto\' ifTrue: [ self inferOrientFromJson: json ].\r\t\t\t(parseMap at: orient) value: json.\r\t\t\t].',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1297' ],		#self : OmReference [ '1298' ],		#time : DateAndTime [ '2021-01-25T09:51:20.571738-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #'readFrom:',			#protocol : #reading,			#sourceCode : 'readFrom: aFileReference\r\t| reader |\r\t\r\treader := NeoJSONReader on: aFileReference readStream.\r\tself read: reader next.\r\treader close.\r\t\r\t^ self createDataFrame\r\t',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1298' ],		#self : OmReference [ '1299' ],		#time : DateAndTime [ '2021-01-25T09:51:20.571947-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #'readFromString:',			#protocol : #reading,			#sourceCode : 'readFromString: aString\r\t"Read dataframe from a string"\r\t| json |\r\t\r\tjson := NeoJSONReader fromString: aString.\r\tself read: json.\r\t\r\t^ self createDataFrame',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1299' ],		#self : OmReference [ '1300' ],		#time : DateAndTime [ '2021-01-25T09:51:20.572151-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #uniform,			#protocol : #accessing,			#sourceCode : 'uniform\r\t^ uniform',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1300' ],		#self : OmReference [ '1301' ],		#time : DateAndTime [ '2021-01-25T09:51:20.5723-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #'uniform:',			#protocol : #accessing,			#sourceCode : 'uniform: aBoolean\r\tuniform := aBoolean',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1301' ],		#self : OmReference [ '1302' ],		#time : DateAndTime [ '2021-01-25T09:51:20.572439-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReader,				#isMetaSide : false			},			#name : #uniformDefaultValue,			#protocol : #accessing,			#sourceCode : 'uniformDefaultValue\r\t^ false',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1302' ],		#self : OmReference [ '1303' ],		#time : DateAndTime [ '2021-01-25T09:51:20.572603-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameReader,				#isMetaSide : false			},			#name : #'readFrom:',			#protocol : #reading,			#sourceCode : 'readFrom: aLocation\r\t"Read data frame from a given location which can be a file reference, a database connection, or something else (depending on the implementation of subclass)"\r\tself subclassResponsibility',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1303' ],		#self : OmReference [ '1304' ],		#time : DateAndTime [ '2021-01-25T09:51:20.572788-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvWriter,				#isMetaSide : false			},			#name : #defaultLineEndConvention,			#protocol : #accessing,			#sourceCode : 'defaultLineEndConvention\r\t^ { \r\t\tString cr -> #cr.\r\t\tString lf -> #lf.\r\t\tString crlf -> #crlf\r\t} asDictionary at: Smalltalk os lineEnding.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1304' ],		#self : OmReference [ '1305' ],		#time : DateAndTime [ '2021-01-25T09:51:20.572936-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvWriter,				#isMetaSide : false			},			#name : #defaultSeparator,			#protocol : #accessing,			#sourceCode : 'defaultSeparator\r\t^ $,',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1305' ],		#self : OmReference [ '1306' ],		#time : DateAndTime [ '2021-01-25T09:51:20.57308-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvWriter,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize \r\tsuper initialize.\r\tseparator := self defaultSeparator.\r\tlineEndConvention := self defaultLineEndConvention.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1306' ],		#self : OmReference [ '1307' ],		#time : DateAndTime [ '2021-01-25T09:51:20.573238-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvWriter,				#isMetaSide : false			},			#name : #lineEndConvention,			#protocol : #accessing,			#sourceCode : 'lineEndConvention\r\t^ lineEndConvention ',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1307' ],		#self : OmReference [ '1308' ],		#time : DateAndTime [ '2021-01-25T09:51:20.573385-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvWriter,				#isMetaSide : false			},			#name : #'lineEndConvention:',			#protocol : #accessing,			#sourceCode : 'lineEndConvention: aSymbol\r\t"Set the end of line convention to be used.\r\tEither #cr, #lf or #crlf (os convention by default)."\r\t\r\tself assert: (#(cr lf crlf) includes: aSymbol).\r\tlineEndConvention := aSymbol',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1308' ],		#self : OmReference [ '1309' ],		#time : DateAndTime [ '2021-01-25T09:51:20.573547-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvWriter,				#isMetaSide : false			},			#name : #separator,			#protocol : #accessing,			#sourceCode : 'separator\r\t^ separator',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1309' ],		#self : OmReference [ '1310' ],		#time : DateAndTime [ '2021-01-25T09:51:20.573687-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvWriter,				#isMetaSide : false			},			#name : #'separator:',			#protocol : #accessing,			#sourceCode : 'separator: anObject\r\tseparator := anObject',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1310' ],		#self : OmReference [ '1311' ],		#time : DateAndTime [ '2021-01-25T09:51:20.573841-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvWriter,				#isMetaSide : false			},			#name : #'write:to:',			#protocol : #writing,			#sourceCode : 'write: aDataFrame to: aFileReference\r\t| stream writer |\r\tstream := aFileReference writeStream.\r\t\r\twriter := NeoCSVWriter on: stream.\r\twriter separator: self separator.\r\twriter lineEndConvention: self lineEndConvention.\r\t\r\twriter\r\t\twriteField: \'\';\r\t\twriteSeparator;\r\t\twriteHeader: aDataFrame columnNames.\r\t\r\taDataFrame do: [ :row |\r\t\twriter\r\t\t\twriteField: row name;\r\t\t\twriteSeparator;\r\t\t\tnextPut: row ].\r\t\r\twriter close.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1311' ],		#self : OmReference [ '1312' ],		#time : DateAndTime [ '2021-01-25T09:51:20.575074-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrameJsonWriter class',				#isMetaSide : true			},			#name : #'convertToColumns:',			#protocol : #converting,			#sourceCode : 'convertToColumns: aDataFrame\r\t"Converts aDataFrame into following format:\t\r\t\t{\r\t\t column->{\r\t\t\t\t\t rowName->data\r\t\t\t\t\t}\r\t\t}\r\t\tNo need to actually convert, since dataframe gets iterated\r\t\tin the above format itself.\r\t\tNote: column is converted to string.\r\t"\r\t| output |\r\t\r\toutput := Dictionary new.\r\taDataFrame asArrayOfColumns withIndexDo: [ :col :index |\r\t\toutput add: (aDataFrame columnNames at: index) asString -> col\r\t\t].\r\t^ output',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1312' ],		#self : OmReference [ '1313' ],		#time : DateAndTime [ '2021-01-25T09:51:20.575279-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrameJsonWriter class',				#isMetaSide : true			},			#name : #'convertToRecords:',			#protocol : #converting,			#sourceCode : 'convertToRecords: aDataFrame\r\t"Converts aDataFrame into following format:\r\t\t[\r\t\t\t{column->data},\r\t\t]\r\t\tNote: It ignores rowNames\r\t\tNo need to actually convert, since dataframe gets iterated\r\t\tin the above format itself.\r\t"\r\t\r\t^ aDataFrame',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1313' ],		#self : OmReference [ '1314' ],		#time : DateAndTime [ '2021-01-25T09:51:20.575461-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrameJsonWriter class',				#isMetaSide : true			},			#name : #'convertToRowNames:',			#protocol : #converting,			#sourceCode : 'convertToRowNames: aDataFrame\r\t"Converts aDataFrame into following format:\t\r\t\t{\r\t\t rowName->{\r\t\t\t\t\t column->data\r\t\t\t\t\t}\r\t\t}\r\t\tNo need to actually convert, since dataframe gets iterated\r\t\tin the above format itself.\r\t\tNote: rowName is converted to string.\r\t"\r\t| output |\r\t\r\toutput := Dictionary new.\r\taDataFrame asArrayOfRows withIndexDo: [ :row :index |\r\t\toutput add: (aDataFrame rowNames at: index) asString -> row\r\t\t].\r\t^ output',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1314' ],		#self : OmReference [ '1315' ],		#time : DateAndTime [ '2021-01-25T09:51:20.575634-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrameJsonWriter class',				#isMetaSide : true			},			#name : #'convertToSplit:',			#protocol : #converting,			#sourceCode : 'convertToSplit: aDataFrame\r\t"Converts aDataFrame into following format:\r\t\t{\r\t\t\tindex->[rowNames],\r\t\t\tcolumns->[columnNames],\r\t\t\tdata->[data]\r\t\t}\r\t\tNote: It ignores rowNames\r\t\tNo need to actually convert, since dataframe gets iterated\r\t\tin the above format itself.\r\t"\r\t| output rows |\r\t\r\toutput := Dictionary new.\r\toutput add: \'index\'->(aDataFrame rowNames).\r\toutput add: \'columns\'->(aDataFrame columnNames).\r\t\r\trows := OrderedCollection new: aDataFrame size.\r\taDataFrame do: [ :row | rows add: row asArray ].\r\t\r\toutput add: \'data\'->rows.\r\t^ output',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1315' ],		#self : OmReference [ '1316' ],		#time : DateAndTime [ '2021-01-25T09:51:20.57581-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrameJsonWriter class',				#isMetaSide : true			},			#name : #'convertToValues:',			#protocol : #converting,			#sourceCode : 'convertToValues: aDataFrame\r\t"Converts aDataFrame into an array of arrays\r\t\tNote: It ignores rowNames and columnNames\r\t\tNo need to actually convert, since dataframe gets iterated\r\t\tin the above format itself.\r\t"\r\t| rows |\r\t\r\trows := OrderedCollection new: aDataFrame size.\r\taDataFrame do: [ :row | rows add: row asArray ].\r\t^ rows',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1316' ],		#self : OmReference [ '1317' ],		#time : DateAndTime [ '2021-01-25T09:51:20.575961-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriter,				#isMetaSide : false			},			#name : #defaultOrient,			#protocol : #accessing,			#sourceCode : 'defaultOrient\r\t^ \'records\'',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1317' ],		#self : OmReference [ '1318' ],		#time : DateAndTime [ '2021-01-25T09:51:20.576104-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriter,				#isMetaSide : false			},			#name : #defaultPretty,			#protocol : #accessing,			#sourceCode : 'defaultPretty\r\t^ false',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1318' ],		#self : OmReference [ '1319' ],		#time : DateAndTime [ '2021-01-25T09:51:20.576261-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriter,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\torient := self defaultOrient.\r\tpretty := self defaultPretty.\r\twriteMap := Dictionary newFrom: {\r\t\t\'records\'->[ :aDataFrame :writeStream  | self class convertToRecords: aDataFrame].\r\t\t\'split\'->[ :aDataFrame :writeStream    | self class convertToSplit: aDataFrame].\r\t\t\'columns\'->[ :aDataFrame :writeStream  | self class convertToColumns: aDataFrame].\r\t\t\'rowNames\'->[ :aDataFrame :writeStream | self class convertToRowNames: aDataFrame].\r\t\t\'values\'->[ :aDataFrame :writeStream   | self class convertToValues: aDataFrame].\r\t\t}.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1319' ],		#self : OmReference [ '1320' ],		#time : DateAndTime [ '2021-01-25T09:51:20.576416-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriter,				#isMetaSide : false			},			#name : #orient,			#protocol : #accessing,			#sourceCode : 'orient\r\t^ orient',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1320' ],		#self : OmReference [ '1321' ],		#time : DateAndTime [ '2021-01-25T09:51:20.576555-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriter,				#isMetaSide : false			},			#name : #'orient:',			#protocol : #accessing,			#sourceCode : 'orient: aString\r\torient := aString',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1321' ],		#self : OmReference [ '1322' ],		#time : DateAndTime [ '2021-01-25T09:51:20.576686-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriter,				#isMetaSide : false			},			#name : #pretty,			#protocol : #accessing,			#sourceCode : 'pretty\r\t^ pretty',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1322' ],		#self : OmReference [ '1323' ],		#time : DateAndTime [ '2021-01-25T09:51:20.576819-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriter,				#isMetaSide : false			},			#name : #'pretty:',			#protocol : #accessing,			#sourceCode : 'pretty: aBoolean\r\tpretty := aBoolean',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1323' ],		#self : OmReference [ '1324' ],		#time : DateAndTime [ '2021-01-25T09:51:20.576963-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriter,				#isMetaSide : false			},			#name : #'write:to:',			#protocol : #writing,			#sourceCode : 'write: aDataFrame to: aFileReference\r\t| writeStream writer jsonObj |\r\t\r\twriteStream := aFileReference writeStream.\r\twriter := NeoJSONWriter new on: writeStream.\r\twriter prettyPrint: pretty.\r\tjsonObj := (writeMap at: orient) value: aDataFrame value: writeStream.\r\twriter nextPut: jsonObj.\r\twriter close.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1324' ],		#self : OmReference [ '1325' ],		#time : DateAndTime [ '2021-01-25T09:51:20.577118-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriter,				#isMetaSide : false			},			#name : #'writeAsString:',			#protocol : #writing,			#sourceCode : 'writeAsString: aDataFrame\r\t"Returns JSON representation of aDataFrame according to orient"\r\t| writeStream writer jsonObj |\r\t\r\twriteStream := WriteStream on: (String new: 100).\r\twriter := NeoJSONWriter new on: writeStream.\r\twriter prettyPrint: pretty.\r\tjsonObj := (writeMap at: orient) value: aDataFrame value: writeStream.\r\twriter nextPut: jsonObj.\r\twriter close.\r\t^ writeStream contents',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1325' ],		#self : OmReference [ '1326' ],		#time : DateAndTime [ '2021-01-25T09:51:20.577298-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameWriter,				#isMetaSide : false			},			#name : #'write:to:',			#protocol : #writing,			#sourceCode : 'write: aDataFrame to: aLocation\r\t"Write data frame to a given location which can be a file reference, a database connection, or something else (depending on the implementation of subclass)"\r\tself subclassResponsibility',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1326' ],		#self : OmReference [ '1327' ],		#time : DateAndTime [ '2021-01-25T09:51:20.577622-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'readFrom:using:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'readFrom: aLocation using: aDataFrameReader\r\t"Read data frame from a given location using a given DataFrameReader. Location can be a file reference, a database connection, or something else (depending on the implementation of the reader)"\r\t^ aDataFrameReader readFrom: aLocation',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1327' ],		#self : OmReference [ '1328' ],		#time : DateAndTime [ '2021-01-25T09:51:20.577901-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'readFrom:using:missingValuesString:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'readFrom: aLocation using: aDataFrameReader missingValuesString: aSet\r\t"Read data frame from a given location using a given DataFrameReader. Location can be a file reference, a database connection, or something else (depending on the implementation of the reader).\r\t Replaces the elements of aSet present in dataframe with nil"\r\t\r\t| df |\r\tdf := aDataFrameReader readFrom: aLocation.\r\tdf contents replaceMissingValuesStrings: aSet.\r\t^ df',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1328' ],		#self : OmReference [ '1329' ],		#time : DateAndTime [ '2021-01-25T09:51:20.578114-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'readFromCsv:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'readFromCsv: aFileReference \r\t| reader |\r\treader := DataFrameCsvReader new.\r\t^ self readFrom: aFileReference using: reader.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1329' ],		#self : OmReference [ '1330' ],		#time : DateAndTime [ '2021-01-25T09:51:20.578295-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'readFromCsv:withSeparator:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'readFromCsv: aFileReference withSeparator: aSeparator \r\t| reader |\r\treader := DataFrameCsvReader new.\r\treader separator: aSeparator.\r\t^ self readFrom: aFileReference using: reader',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1330' ],		#self : OmReference [ '1331' ],		#time : DateAndTime [ '2021-01-25T09:51:20.578481-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'readFromCsvWithRowNames:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'readFromCsvWithRowNames: aFileReference \r\t| reader |\r\treader := DataFrameCsvReader new.\r\treader includeRowNames: true.\r\t^ self readFrom: aFileReference using: reader',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1331' ],		#self : OmReference [ '1332' ],		#time : DateAndTime [ '2021-01-25T09:51:20.578674-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'readFromCsvWithRowNames:separator:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'readFromCsvWithRowNames: aFileReference separator: aSeparator\r\t| reader |\r\treader := DataFrameCsvReader new.\r\treader includeRowNames: true.\r\treader separator: aSeparator.\r\t^ self readFrom: aFileReference using: reader',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1332' ],		#self : OmReference [ '1333' ],		#time : DateAndTime [ '2021-01-25T09:51:20.578855-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'readFromJson:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'readFromJson: aFileReference \r\t| reader |\r\treader := DataFrameJsonReader new.\r\t^ self readFrom: aFileReference using: reader.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1333' ],		#self : OmReference [ '1334' ],		#time : DateAndTime [ '2021-01-25T09:51:20.579019-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DataFrame class',				#isMetaSide : true			},			#name : #'readFromJson:orient:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'readFromJson: aFileReference orient: orient\r\t| reader |\r\treader := DataFrameJsonReader new.\r\treader orient: orient.\r\t^ self readFrom: aFileReference using: reader.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1334' ],		#self : OmReference [ '1335' ],		#time : DateAndTime [ '2021-01-25T09:51:20.579235-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'writeTo:using:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'writeTo: aLocation using: aDataFrameWriter\r\t"Write data frame to a given location using a given DataFrameWriter. Location can be a file reference, a database connection, or something else (depending on the implementation of the writer)"\r\taDataFrameWriter write: self to: aLocation',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1335' ],		#self : OmReference [ '1336' ],		#time : DateAndTime [ '2021-01-25T09:51:20.579421-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'writeToCsv:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'writeToCsv: aFileReference\r\t| writer |\r\twriter := DataFrameCsvWriter new.\r\tself writeTo: aFileReference using: writer.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1336' ],		#self : OmReference [ '1337' ],		#time : DateAndTime [ '2021-01-25T09:51:20.579604-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'writeToCsv:withSeparator:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'writeToCsv: aFileReference withSeparator: aSeparator\r\t| writer |\r\twriter := DataFrameCsvWriter new.\r\twriter separator: aSeparator.\r\tself writeTo: aFileReference using: writer.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1337' ],		#self : OmReference [ '1338' ],		#time : DateAndTime [ '2021-01-25T09:51:20.579788-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'writeToJson:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'writeToJson: aFileReference\r\t| writer |\r\twriter := DataFrameJsonWriter new.\r\tself writeTo: aFileReference using: writer.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1338' ],		#self : OmReference [ '1339' ],		#time : DateAndTime [ '2021-01-25T09:51:20.579974-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'writeToJson:orient:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'writeToJson: aFileReference orient: orient\r\t| writer |\r\twriter := DataFrameJsonWriter new.\r\twriter orient: orient.\r\tself writeTo: aFileReference using: writer.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1339' ],		#self : OmReference [ '1340' ],		#time : DateAndTime [ '2021-01-25T09:51:20.580154-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'writeToPrettyJson:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'writeToPrettyJson: aFileReference\r\t| writer |\r\twriter := DataFrameJsonWriter new.\r\twriter pretty: true.\r\tself writeTo: aFileReference using: writer.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1340' ],		#self : OmReference [ '1341' ],		#time : DateAndTime [ '2021-01-25T09:51:20.580359-04:00' ],		#trigger : OmReference [ '1261' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrame,				#isMetaSide : false			},			#name : #'writeToPrettyJson:orient:',			#protocol : #'*DataFrame-IO',			#sourceCode : 'writeToPrettyJson: aFileReference orient: orient\r\t| writer |\r\twriter := DataFrameJsonWriter new.\r\twriter orient: orient.\r\twriter pretty: true.\r\tself writeTo: aFileReference using: writer.',			#stamp : '',			#package : #DataFrame-IO		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-01-25T09:51:20.665962-04:00' ],		#prior : OmReference [ '1341' ],		#self : OmReference [ '1342' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'DataFrame-IO-Tests-CompatibleUserName.1607699955'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1342' ],		#self : OmReference [ '1343' ],		#time : DateAndTime [ '2021-01-25T09:51:20.689583-04:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #DataFrame-IO-Tests,		#affectedPackageName : #DataFrame-IO-Tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1343' ],		#self : OmReference [ '1344' ],		#time : DateAndTime [ '2021-01-25T09:51:20.693242-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #DataFrameCsvReaderTest\r\tinstanceVariableNames: \'directory commaCsvFile tabCsvFile emptyCsvFile expectedDataFrame dataFrameWithoutRowNames dataFrameWithRowNames\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-IO-Tests\''			},			#name : #DataFrameCsvReaderTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvReaderTest,						#isMetaSide : false					},					#name : #directory,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvReaderTest,						#isMetaSide : false					},					#name : #commaCsvFile,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvReaderTest,						#isMetaSide : false					},					#name : #tabCsvFile,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvReaderTest,						#isMetaSide : false					},					#name : #emptyCsvFile,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvReaderTest,						#isMetaSide : false					},					#name : #expectedDataFrame,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvReaderTest,						#isMetaSide : false					},					#name : #dataFrameWithoutRowNames,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvReaderTest,						#isMetaSide : false					},					#name : #dataFrameWithRowNames,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameCsvReaderTest class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameCsvReaderTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameCsvReaderTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-IO-Tests,			#package : #DataFrame-IO-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1344' ],		#self : OmReference [ '1345' ],		#time : DateAndTime [ '2021-01-25T09:51:20.695853-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #DataFrameCsvWriterTest\r\tinstanceVariableNames: \'directory dataFrame commaQuoteCsvFile tabQuoteCsvFile\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-IO-Tests\''			},			#name : #DataFrameCsvWriterTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvWriterTest,						#isMetaSide : false					},					#name : #directory,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvWriterTest,						#isMetaSide : false					},					#name : #dataFrame,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvWriterTest,						#isMetaSide : false					},					#name : #commaQuoteCsvFile,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameCsvWriterTest,						#isMetaSide : false					},					#name : #tabQuoteCsvFile,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameCsvWriterTest class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameCsvWriterTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameCsvWriterTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-IO-Tests,			#package : #DataFrame-IO-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1345' ],		#self : OmReference [ '1346' ],		#time : DateAndTime [ '2021-01-25T09:51:20.699841-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #DataFrameJsonReaderTest\r\tinstanceVariableNames: \'directory df dfWithColNames dfWithRowNames dfWithRowColNames\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-IO-Tests\''			},			#name : #DataFrameJsonReaderTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonReaderTest,						#isMetaSide : false					},					#name : #directory,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonReaderTest,						#isMetaSide : false					},					#name : #df,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonReaderTest,						#isMetaSide : false					},					#name : #dfWithColNames,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonReaderTest,						#isMetaSide : false					},					#name : #dfWithRowNames,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonReaderTest,						#isMetaSide : false					},					#name : #dfWithRowColNames,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameJsonReaderTest class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameJsonReaderTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameJsonReaderTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-IO-Tests,			#package : #DataFrame-IO-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1346' ],		#self : OmReference [ '1347' ],		#time : DateAndTime [ '2021-01-25T09:51:20.702861-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #DataFrameJsonWriterTest\r\tinstanceVariableNames: \'directory df\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-IO-Tests\''			},			#name : #DataFrameJsonWriterTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonWriterTest,						#isMetaSide : false					},					#name : #directory,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #DataFrameJsonWriterTest,						#isMetaSide : false					},					#name : #df,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'DataFrameJsonWriterTest class\r\tinstanceVariableNames: \'\''				},				#name : #'DataFrameJsonWriterTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #DataFrameJsonWriterTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-IO-Tests,			#package : #DataFrame-IO-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1347' ],		#self : OmReference [ '1348' ],		#time : DateAndTime [ '2021-01-25T09:51:20.70597-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TestCsvStrings\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-IO-Tests\''			},			#name : #TestCsvStrings,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TestCsvStrings class\r\tinstanceVariableNames: \'\''				},				#name : #'TestCsvStrings class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TestCsvStrings,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-IO-Tests,			#package : #DataFrame-IO-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1348' ],		#self : OmReference [ '1349' ],		#time : DateAndTime [ '2021-01-25T09:51:20.70837-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TestJsonStrings\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'DataFrame-IO-Tests\''			},			#name : #TestJsonStrings,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TestJsonStrings class\r\tinstanceVariableNames: \'\''				},				#name : #'TestJsonStrings class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TestJsonStrings,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #DataFrame-IO-Tests,			#package : #DataFrame-IO-Tests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1349' ],		#self : OmReference [ '1350' ],		#time : DateAndTime [ '2021-01-25T09:51:20.747044-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReaderTest,				#isMetaSide : false			},			#name : #'createFile:withContents:',			#protocol : #running,			#sourceCode : 'createFile: aFileReference withContents: aString\r\t| stream |\r\tstream := aFileReference writeStream.\r\tstream nextPutAll: aString.\r\tstream close.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1350' ],		#self : OmReference [ '1351' ],		#time : DateAndTime [ '2021-01-25T09:51:20.747965-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReaderTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tdirectory := FileSystem memory workingDirectory / \'testData\'.\r\tdirectory createDirectory.\r\t\r\tcommaCsvFile := directory / \'comma.csv\'.\r\ttabCsvFile :=  directory / \'tab.csv\'.\r\temptyCsvFile :=  directory / \'empty.csv\'.\r\t\r\tself createFile: commaCsvFile withContents: TestCsvStrings commaCsvString.\r\tself createFile: tabCsvFile withContents: TestCsvStrings tabCsvString.\r\tself createFile: emptyCsvFile withContents: TestCsvStrings emptyCsvString.\r\t\r\tdataFrameWithRowNames := DataFrame withRows: #(\r\t\t(2.4 true \'rain\')\r\t\t(0.5 true \'rain\')\r\t\t(-1.2 true \'snow\')\r\t\t(-2.3 false \'-\')\r\t\t(3.2 true \'rain\')).\r\t\t\r\tdataFrameWithRowNames columnNames: #(temperature precipitation type).\r\tdataFrameWithRowNames rowNames: (#(\'01:10\' \'01:30\' \'01:50\' \'02:10\' \'02:30\')\r\t\tcollect: #asTime).\r\t\t\r\tdataFrameWithoutRowNames := DataFrame withRows: {\r\t\t{ \'01:10\' asTime . 2.4 . true . \'rain\' } .\r\t\t{ \'01:30\' asTime . 0.5 . true . \'rain\' } .\r\t\t{ \'01:50\' asTime . -1.2 . true . \'snow\' } .\r\t\t{ \'02:10\' asTime . -2.3 . false . \'-\' } . \r\t\t{ \'02:30\' asTime . 3.2 . true . \'rain\' }}.\r\t\t\r\tdataFrameWithoutRowNames columnNames: #(nil temperature precipitation type).',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1351' ],		#self : OmReference [ '1352' ],		#time : DateAndTime [ '2021-01-25T09:51:20.748696-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReaderTest,				#isMetaSide : false			},			#name : #testReadCsv,			#protocol : #tests,			#sourceCode : 'testReadCsv\r\t| actualDataFrame |\r\tactualDataFrame := DataFrame readFromCsv: commaCsvFile.\r\tself assert: actualDataFrame equals: dataFrameWithoutRowNames.\r\t',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1352' ],		#self : OmReference [ '1353' ],		#time : DateAndTime [ '2021-01-25T09:51:20.749021-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReaderTest,				#isMetaSide : false			},			#name : #testReadCsvWithRowNames,			#protocol : #tests,			#sourceCode : 'testReadCsvWithRowNames\r\t| actualDataFrame |\r\tactualDataFrame := DataFrame readFromCsvWithRowNames: commaCsvFile.\r\tself assert: actualDataFrame equals: dataFrameWithRowNames.\r\t',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1353' ],		#self : OmReference [ '1354' ],		#time : DateAndTime [ '2021-01-25T09:51:20.749254-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReaderTest,				#isMetaSide : false			},			#name : #testReadCsvWithRowNamesWithSeparatorTab,			#protocol : #tests,			#sourceCode : 'testReadCsvWithRowNamesWithSeparatorTab\r\t| actualDataFrame |\r\tactualDataFrame := DataFrame readFromCsvWithRowNames: tabCsvFile separator: Character tab.\r\tself assert: actualDataFrame equals: dataFrameWithRowNames.\r\t',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1354' ],		#self : OmReference [ '1355' ],		#time : DateAndTime [ '2021-01-25T09:51:20.749443-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvReaderTest,				#isMetaSide : false			},			#name : #testReadCsvWithSeparatorTab,			#protocol : #tests,			#sourceCode : 'testReadCsvWithSeparatorTab\r\t| actualDataFrame |\r\tactualDataFrame := DataFrame readFromCsv: tabCsvFile withSeparator: Character tab.\r\tself assert: actualDataFrame equals: dataFrameWithoutRowNames.\r\t',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1355' ],		#self : OmReference [ '1356' ],		#time : DateAndTime [ '2021-01-25T09:51:20.749623-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvWriterTest,				#isMetaSide : false			},			#name : #'readFile:',			#protocol : #'as yet unclassified',			#sourceCode : 'readFile: aFileReference\r\t| stream contents |\r\tstream := aFileReference readStream.\r\tcontents := stream upToEnd.\r\tstream close.\r\t^ contents',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1356' ],		#self : OmReference [ '1357' ],		#time : DateAndTime [ '2021-01-25T09:51:20.749812-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvWriterTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tdirectory := FileSystem memory workingDirectory / \'testData\'.\r\tdirectory createDirectory.\r\t\r\tcommaQuoteCsvFile := directory / \'commaQuote.csv\'.\r\ttabQuoteCsvFile :=  directory / \'tabQuote.csv\'.\r\t\r\tdataFrame := DataFrame withRows: #(\r\t\t(2.4 true \'rain\')\r\t\t(0.5 true \'rain\')\r\t\t(-1.2 true \'snow\')\r\t\t(-2.3 false \'-\')\r\t\t(3.2 true \'rain\')).\r\t\t\r\tdataFrame columnNames: #(temperature precipitation type).\r\tdataFrame rowNames: (#(\'01:10\' \'01:30\' \'01:50\' \'02:10\' \'02:30\')\r\t\tcollect: #asTime).',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1357' ],		#self : OmReference [ '1358' ],		#time : DateAndTime [ '2021-01-25T09:51:20.750013-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvWriterTest,				#isMetaSide : false			},			#name : #testWriteToCsv,			#protocol : #tests,			#sourceCode : 'testWriteToCsv\r\t| actual expected |\r\tdataFrame writeToCsv: commaQuoteCsvFile.\r\tactual := self readFile: commaQuoteCsvFile.\r\texpected := TestCsvStrings commaQuoteCsvString.\r\tself assert: actual lines equals: expected lines.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1358' ],		#self : OmReference [ '1359' ],		#time : DateAndTime [ '2021-01-25T09:51:20.750181-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvWriterTest,				#isMetaSide : false			},			#name : #testWriteToCsvLineEndLf,			#protocol : #tests,			#sourceCode : 'testWriteToCsvLineEndLf\r\t| writer actual expected |\r\twriter := DataFrameCsvWriter new.\r\twriter lineEndConvention: #lf.\r\tdataFrame writeTo: commaQuoteCsvFile using: writer.\r\tactual := self readFile: commaQuoteCsvFile.\r\texpected := String lf join: TestCsvStrings commaQuoteCsvString lines.\r\tself assert: actual lines equals: expected lines.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1359' ],		#self : OmReference [ '1360' ],		#time : DateAndTime [ '2021-01-25T09:51:20.750338-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameCsvWriterTest,				#isMetaSide : false			},			#name : #testWriteToCsvWithSeparatorTab,			#protocol : #tests,			#sourceCode : 'testWriteToCsvWithSeparatorTab\r\t| actual expected |\r\tdataFrame writeToCsv: tabQuoteCsvFile withSeparator: Character tab.\r\tactual := self readFile: tabQuoteCsvFile.\r\texpected := TestCsvStrings tabQuoteCsvString.\r\tself assertCollection: actual lines equals: expected lines.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1360' ],		#self : OmReference [ '1361' ],		#time : DateAndTime [ '2021-01-25T09:51:20.75058-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReaderTest,				#isMetaSide : false			},			#name : #'createFileNamed:withContents:',			#protocol : #running,			#sourceCode : 'createFileNamed: name withContents: aString\r\t| stream |\r\tstream := (directory / name) writeStream.\r\tstream nextPutAll: aString.\r\tstream close.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1361' ],		#self : OmReference [ '1362' ],		#time : DateAndTime [ '2021-01-25T09:51:20.7508-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReaderTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\tdirectory := FileSystem memory workingDirectory / \'testDataForJson\'.\r\tdirectory createDirectory.\r\t\r\tself createFileNamed: \'column.json\' withContents: TestJsonStrings columnJsonString.\r\tself createFileNamed: \'index.json\' withContents: TestJsonStrings indexJsonString.\r\tself createFileNamed: \'nonNull1.json\' withContents: TestJsonStrings nonNullJsonString1.\r\tself createFileNamed: \'records.json\' withContents: TestJsonStrings recordsJsonString.\r\tself createFileNamed: \'split.json\' withContents: TestJsonStrings splitJsonString.\r\tself createFileNamed: \'values.json\' withContents: TestJsonStrings valuesJsonString.\r\t\r\tdf := DataFrame withRows: #(\r\t\t(1 2 nil nil)\r\t\t(nil 2 3 nil)\r\t\t(nil nil nil 5)\r\t\t(1 nil 2 nil)).\r\t\r\tdfWithColNames := df deepCopy.\r\tdfWithColNames columnNames: #(\'col1\' \'col2\' \'col3\' \'col4\').\r\t\r\tdfWithRowNames := df deepCopy.\r\tdfWithRowNames rowNames: #(\'row1\' \'row2\' \'row3\' \'row4\').\r\t\r\tdfWithRowColNames := df deepCopy.\r\tdfWithRowColNames columnNames: #(\'col1\' \'col2\' \'col3\' \'col4\').\r\tdfWithRowColNames rowNames: #(\'row1\' \'row2\' \'row3\' \'row4\').\r\t\r\t\r\t\r',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1362' ],		#self : OmReference [ '1363' ],		#time : DateAndTime [ '2021-01-25T09:51:20.750985-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReaderTest,				#isMetaSide : false			},			#name : #'sortByRowColNames:',			#protocol : #running,			#sourceCode : 'sortByRowColNames: inputDf\r\t"Sorts df according to column and row names"\r\t\r\t| sortedRowNames sortedColNames dfColSorted outputDf |\r\tsortedRowNames := inputDf rowNames sorted.\r\tsortedColNames := inputDf columnNames sorted.\r\t\r\tdfColSorted := DataFrame withRowNames: inputDf rowNames.\r\tsortedColNames do: [ :col | dfColSorted addColumn: (inputDf column: col) asArray named: col ].\r\t\r\toutputDf := DataFrame withColumnNames: dfColSorted columnNames.\r\tsortedRowNames do: [ :row | outputDf addRow: (dfColSorted row: row) asArray named: row ].\r\t\r\t^ outputDf',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1363' ],		#self : OmReference [ '1364' ],		#time : DateAndTime [ '2021-01-25T09:51:20.752747-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReaderTest,				#isMetaSide : false			},			#name : #testReadFrom,			#protocol : #tests,			#sourceCode : 'testReadFrom\r\t| output |\r\r\toutput := DataFrameJsonReader new readFrom: directory / \'nonNull1.json\'.\r\t\r\tself assert: (self sortByRowColNames: output) equals: dfWithColNames.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1364' ],		#self : OmReference [ '1365' ],		#time : DateAndTime [ '2021-01-25T09:51:20.753101-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReaderTest,				#isMetaSide : false			},			#name : #testReadFromColumns,			#protocol : #tests,			#sourceCode : 'testReadFromColumns\r\t| output |\r\r\toutput := DataFrameJsonReader new readFrom: directory / \'column.json\'.\r\t\r\tself assert: (self sortByRowColNames: output) equals: dfWithRowColNames.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1365' ],		#self : OmReference [ '1366' ],		#time : DateAndTime [ '2021-01-25T09:51:20.753379-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReaderTest,				#isMetaSide : false			},			#name : #testReadFromIndex,			#protocol : #tests,			#sourceCode : 'testReadFromIndex\r\t| output |\r\r\toutput := DataFrameJsonReader new readFrom: directory / \'index.json\'.\r\t\r\tself assert: (self sortByRowColNames: output) equals: dfWithRowColNames transposed.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1366' ],		#self : OmReference [ '1367' ],		#time : DateAndTime [ '2021-01-25T09:51:20.753678-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReaderTest,				#isMetaSide : false			},			#name : #testReadFromJson,			#protocol : #tests,			#sourceCode : 'testReadFromJson\r\t| output |\r\toutput := DataFrame readFromJson: (directory / \'nonNull1.json\').\r\tself assert: (self sortByRowColNames: output) equals: dfWithColNames.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1367' ],		#self : OmReference [ '1368' ],		#time : DateAndTime [ '2021-01-25T09:51:20.753843-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReaderTest,				#isMetaSide : false			},			#name : #testReadFromJsonOrient,			#protocol : #tests,			#sourceCode : 'testReadFromJsonOrient\r\t| output |\r\toutput := DataFrame readFromJson: (directory / \'split.json\') orient: \'split\'.\r\tself assert: (self sortByRowColNames: output) equals: dfWithRowColNames.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1368' ],		#self : OmReference [ '1369' ],		#time : DateAndTime [ '2021-01-25T09:51:20.753993-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReaderTest,				#isMetaSide : false			},			#name : #testReadFromRecords,			#protocol : #tests,			#sourceCode : 'testReadFromRecords\r\t| output |\r\r\toutput := DataFrameJsonReader new readFrom: directory / \'records.json\'.\r\t\r\tself assert: (self sortByRowColNames: output) equals: dfWithColNames.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1369' ],		#self : OmReference [ '1370' ],		#time : DateAndTime [ '2021-01-25T09:51:20.754162-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReaderTest,				#isMetaSide : false			},			#name : #testReadFromSplit,			#protocol : #tests,			#sourceCode : 'testReadFromSplit\r\t| output |\r\r\toutput := DataFrameJsonReader new readFrom: directory / \'split.json\'.\r\t\r\tself assert: (self sortByRowColNames: output) equals: dfWithRowColNames.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1370' ],		#self : OmReference [ '1371' ],		#time : DateAndTime [ '2021-01-25T09:51:20.754371-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReaderTest,				#isMetaSide : false			},			#name : #testReadFromString,			#protocol : #tests,			#sourceCode : 'testReadFromString\r\t| output |\r\r\toutput := DataFrameJsonReader new readFrom: TestJsonStrings nonNullJsonString2.\r\t\r\tself assert: (self sortByRowColNames: output) equals: dfWithRowColNames.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1371' ],		#self : OmReference [ '1372' ],		#time : DateAndTime [ '2021-01-25T09:51:20.754535-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonReaderTest,				#isMetaSide : false			},			#name : #testReadFromValues,			#protocol : #tests,			#sourceCode : 'testReadFromValues\r\t| output |\r\r\toutput := DataFrameJsonReader new readFrom: directory / \'values.json\'.\r\t\r\tself assert: (self sortByRowColNames: output) equals: df.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1372' ],		#self : OmReference [ '1373' ],		#time : DateAndTime [ '2021-01-25T09:51:20.754747-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriterTest,				#isMetaSide : false			},			#name : #'readFile:',			#protocol : #running,			#sourceCode : 'readFile: aFileReference\r\t| stream contents |\r\tstream := aFileReference readStream.\r\tcontents := stream upToEnd.\r\tstream close.\r\t^ contents',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1373' ],		#self : OmReference [ '1374' ],		#time : DateAndTime [ '2021-01-25T09:51:20.754936-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriterTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\tdirectory := FileSystem memory workingDirectory / \'testDataForJson\'.\r\tdirectory createDirectory.\r\t\r\tdf := DataFrame withRows: #(\r\t\t(1 2 nil nil)\r\t\t(nil 2 3 nil)\r\t\t(nil nil nil 5)\r\t\t(1 nil 2 nil))\r\trowNames: #(\'row1\' \'row2\' \'row3\' \'row4\')\r\tcolumnNames: #(\'col1\' \'col2\' \'col3\' \'col4\').',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1374' ],		#self : OmReference [ '1375' ],		#time : DateAndTime [ '2021-01-25T09:51:20.755099-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriterTest,				#isMetaSide : false			},			#name : #testWriteAsString,			#protocol : #tests,			#sourceCode : 'testWriteAsString\r\t| actual expected |.\r\tactual := DataFrameJsonWriter new writeAsString: df.\r\texpected := \'\' join: (TestJsonStrings recordsJsonString \r\t\tregex: \'[^\\s]+\' matchesCollect: [:x|x]).\r\tself assert: actual equals: expected.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1375' ],		#self : OmReference [ '1376' ],		#time : DateAndTime [ '2021-01-25T09:51:20.755272-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriterTest,				#isMetaSide : false			},			#name : #testWriteTo,			#protocol : #tests,			#sourceCode : 'testWriteTo\r\t| file actual expected |\r\tfile := directory / \'output.json\'.\r\tDataFrameJsonWriter new write: df to: file.\r\tactual := self readFile: file.\r\texpected := \'\' join: (TestJsonStrings recordsJsonString \r\t\tregex: \'[^\\s]+\' matchesCollect: [:x|x]).\r\tself assert: actual lines equals: expected lines.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1376' ],		#self : OmReference [ '1377' ],		#time : DateAndTime [ '2021-01-25T09:51:20.755424-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriterTest,				#isMetaSide : false			},			#name : #testWriteToJson,			#protocol : #tests,			#sourceCode : 'testWriteToJson\r\t| file actual expected |\r\tfile := directory / \'output.json\'.\r\tdf writeToJson: file.\r\tactual := self readFile: file.\r\texpected := \'\' join: (TestJsonStrings recordsJsonString \r\t\tregex: \'[^\\s]+\' matchesCollect: [:x|x]).\r\tself assert: actual lines equals: expected lines.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1377' ],		#self : OmReference [ '1378' ],		#time : DateAndTime [ '2021-01-25T09:51:20.755574-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DataFrameJsonWriterTest,				#isMetaSide : false			},			#name : #testWriteToJsonOrient,			#protocol : #tests,			#sourceCode : 'testWriteToJsonOrient\r\t| file actual expected |\r\tfile := directory / \'output.json\'.\r\tdf writeToJson: file orient: \'values\'.\r\tactual := self readFile: file.\r\texpected := \'\' join: (TestJsonStrings valuesJsonString \r\t\tregex: \'[^\\s]+\' matchesCollect: [:x|x]).\r\tself assert: actual lines equals: expected lines.',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1378' ],		#self : OmReference [ '1379' ],		#time : DateAndTime [ '2021-01-25T09:51:20.755773-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestCsvStrings class',				#isMetaSide : true			},			#name : #commaCsvString,			#protocol : #running,			#sourceCode : 'commaCsvString\r\t^ \',temperature,precipitation,type\r1:10 am,2.4,true,rain\r1:30 am,0.5,true,rain\r1:50 am,-1.2,true,snow\r2:10 am,-2.3,false,-\r2:30 am,3.2,true,rain\r\'',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1379' ],		#self : OmReference [ '1380' ],		#time : DateAndTime [ '2021-01-25T09:51:20.755961-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestCsvStrings class',				#isMetaSide : true			},			#name : #commaQuoteCsvString,			#protocol : #running,			#sourceCode : 'commaQuoteCsvString\r\t^ \'"","temperature","precipitation","type"\r"1:10 am","2.4","true","rain"\r"1:30 am","0.5","true","rain"\r"1:50 am","-1.2","true","snow"\r"2:10 am","-2.3","false","-"\r"2:30 am","3.2","true","rain"\r\'',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1380' ],		#self : OmReference [ '1381' ],		#time : DateAndTime [ '2021-01-25T09:51:20.756118-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestCsvStrings class',				#isMetaSide : true			},			#name : #emptyCsvString,			#protocol : #running,			#sourceCode : 'emptyCsvString\r\t^ \'\'',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1381' ],		#self : OmReference [ '1382' ],		#time : DateAndTime [ '2021-01-25T09:51:20.756271-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestCsvStrings class',				#isMetaSide : true			},			#name : #tabCsvString,			#protocol : #running,			#sourceCode : 'tabCsvString\r\t^ \'\ttemperature\tprecipitation\ttype\r1:10 am\t2.4\ttrue\train\r1:30 am\t0.5\ttrue\train\r1:50 am\t-1.2\ttrue\tsnow\r2:10 am\t-2.3\tfalse\t-\r2:30 am\t3.2\ttrue\train\r\'',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1382' ],		#self : OmReference [ '1383' ],		#time : DateAndTime [ '2021-01-25T09:51:20.756421-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestCsvStrings class',				#isMetaSide : true			},			#name : #tabQuoteCsvString,			#protocol : #running,			#sourceCode : 'tabQuoteCsvString\r\t^ \'""\t"temperature"\t"precipitation"\t"type"\r"1:10 am"\t"2.4"\t"true"\t"rain"\r"1:30 am"\t"0.5"\t"true"\t"rain"\r"1:50 am"\t"-1.2"\t"true"\t"snow"\r"2:10 am"\t"-2.3"\t"false"\t"-"\r"2:30 am"\t"3.2"\t"true"\t"rain"\r\'',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1383' ],		#self : OmReference [ '1384' ],		#time : DateAndTime [ '2021-01-25T09:51:20.756623-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestJsonStrings class',				#isMetaSide : true			},			#name : #columnJsonString,			#protocol : #running,			#sourceCode : 'columnJsonString\r\t^ \'{"col1":{"row1":1.0,"row2":null,"row3":null,"row4":1.0},\r"col2":{"row1":2.0,"row2":2.0,"row3":null,"row4":null},\r"col3":{"row1":null,"row2":3.0,"row3":null,"row4":2.0},\r"col4":{"row1":null,"row2":null,"row3":5.0,"row4":null}}\'',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1384' ],		#self : OmReference [ '1385' ],		#time : DateAndTime [ '2021-01-25T09:51:20.756814-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestJsonStrings class',				#isMetaSide : true			},			#name : #indexJsonString,			#protocol : #running,			#sourceCode : 'indexJsonString\r\t^ \'{"row1":{"col1":1.0,"col2":2.0,"col3":null,"col4":null},\r"row2":{"col1":null,"col2":2.0,"col3":3.0,"col4":null},\r"row3":{"col1":null,"col2":null,"col3":null,"col4":5.0},\r"row4":{"col1":1.0,"col2":null,"col3":2.0,"col4":null}}\'',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1385' ],		#self : OmReference [ '1386' ],		#time : DateAndTime [ '2021-01-25T09:51:20.756979-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestJsonStrings class',				#isMetaSide : true			},			#name : #nonNullJsonString1,			#protocol : #running,			#sourceCode : 'nonNullJsonString1\r\t^ \'[{"col1":1, "col2":2},\r\t\t {"col3":3, "col2":2},\r\t\t {"col4":5},\r\t\t {"col1":1, "col3":2}]\'',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1386' ],		#self : OmReference [ '1387' ],		#time : DateAndTime [ '2021-01-25T09:51:20.757122-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestJsonStrings class',				#isMetaSide : true			},			#name : #nonNullJsonString2,			#protocol : #running,			#sourceCode : 'nonNullJsonString2\r\t^ \'{\r\t\t\t"col1": {"row1":1, "row4":1},\r\t\t\t"col2": {"row1":2, "row2":2},\r\t\t\t"col3": {"row2":3, "row4":2},\r\t\t\t"col4": {"row3":5}\r\t\t}\'',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1387' ],		#self : OmReference [ '1388' ],		#time : DateAndTime [ '2021-01-25T09:51:20.757271-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestJsonStrings class',				#isMetaSide : true			},			#name : #recordsJsonString,			#protocol : #running,			#sourceCode : 'recordsJsonString\r\t^ \'[{"col1":1,"col2":2,"col3":null,"col4":null},\r{"col1":null,"col2":2,"col3":3,"col4":null},\r{"col1":null,"col2":null,"col3":null,"col4":5},\r{"col1":1,"col2":null,"col3":2,"col4":null}]\'',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1388' ],		#self : OmReference [ '1389' ],		#time : DateAndTime [ '2021-01-25T09:51:20.757411-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestJsonStrings class',				#isMetaSide : true			},			#name : #splitJsonString,			#protocol : #running,			#sourceCode : 'splitJsonString\r\t^ \'{"columns":["col1","col2","col3","col4"],\r"index":["row1","row2","row3","row4"],\r"data":[[1.0,2.0,null,null],[null,2.0,3.0,null],[null,null,null,5.0],[1.0,null,2.0,null]]}\'',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1389' ],		#self : OmReference [ '1390' ],		#time : DateAndTime [ '2021-01-25T09:51:20.757546-04:00' ],		#trigger : OmReference [ '1342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TestJsonStrings class',				#isMetaSide : true			},			#name : #valuesJsonString,			#protocol : #running,			#sourceCode : 'valuesJsonString\r\t^ \'[[1,2,null,null],[null,2,3,null],\r[null,null,null,5],[1,null,2,null]]\'',			#stamp : '',			#package : #DataFrame-IO-Tests		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-01-25T09:52:23.707097-04:00' ],		#prior : OmReference [ '1390' ],		#self : OmReference [ '1391' ]	},	#content : EpSessionSnapshot {		#imageName : '/Users/leela/Documents/TestEvoViz/Pharo-Images/Baseline.image'	}}