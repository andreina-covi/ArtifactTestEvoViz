OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-02-03T19:29:57.311875-04:00' ],		#prior : OmReference [ 'Pharo9.0-SNAPSHOT-64bit-1570116.drzoporoo0umu4oztei57339y', '2' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #SGAViz			},			#name : #'addLegend:on:withFontColor:key:and:',			#protocol : #'*SmallSuiteGenerator-Visualization',			#sourceCode : 'addLegend: associations on: container withFontColor: color key: string and: blockLocation\r  | legend stack |\r  legend := RSLegend new\r     container: container;\r     defaultLabel: (self rsLabelWith: color);\r     yourself.\r\tstack := Stack new push: 2; push: 4; yourself.\r  associations do: [:assoc |  | colorBox |\r        colorBox := assoc value.\r        colorBox isArray \r\t\t\tifFalse: [ string = \'similarity\' \r\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\tlegend text: assoc key withShape: \r\t\t\t\t\t\t\t\t(RSLine new color: assoc value; width: stack pop; yourself; startPoint: 30@0; endPoint: 0@0; yourself) ] \r\t\t\t\t\t\t\tifFalse: [ legend text: assoc key withBoxColor: colorBox ] ] \r\t\t\tifTrue: [ colorBox first isColor \r\t\t\t\t\t\t\tifTrue: [ legend text: assoc key withShape: (legend defaultBox\r                             border: (self rsBorderWithColorBox: colorBox);\r                             paint: colorBox first) ] \r\t\t\t\t\t\t\tifFalse: [ legend text: assoc key withFadingRamp: colorBox ] ] ].\r  legend legendDo: [:l |  l\r           padding: 5;\r           scaleBy: 2.5 ].\r  blockLocation value: legend.\r  legend build',			#stamp : '',			#package : #SmallSuiteGenerator-Visualization		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #SGAViz			},			#name : #'addLegend:on:withFontColor:key:and:',			#protocol : #'*SmallSuiteGenerator-Visualization',			#sourceCode : 'addLegend: associations on: container withFontColor: color key: string and: blockLocation\r  | legend stack |\r  legend := RSLegend new\r     container: container;\r     defaultLabel: (self rsLabelWith: color);\r     yourself.\r\tstack := Stack new push: 2; push: 4; yourself.\r  associations doWithIndex: [:assoc :index |  | colorBox |\r        colorBox := assoc value.\r        colorBox isArray \r\t\t\tifFalse: [ string = \'similarity\' \r\t\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\t\tlegend text: assoc key withShape: \r\t\t\t\t\t\t\t\t(RSLine new color: assoc value; width: stack pop; yourself; startPoint: 30@0; endPoint: 0@0; yourself) ] \r\t\t\t\t\t\t\tifFalse: [  \r\t\t\t\t\t\t\t\tlegend text: assoc key withBoxColor: colorBox ] ]\r\t\t\tifTrue: [ string = \'method\' \r\t\t\t\tifTrue: [ index == 1 \r\t\t\t\t\tifTrue: [ legend text: assoc key withShape: (RSEllipse new color: ((LinearGradientPaint fromArray: colorBox) start: -20@0; stop: 20@0); extent: 20 asPoint; yourself) ] \r\t\t\t\t\tifFalse: [ legend text: assoc key withShape: (RSBox new size: 20; paint: ((LinearGradientPaint fromArray: colorBox) start: -20@0; stop: 20@0); yourself) ] ] \r\t\t\t\tifFalse: [ colorBox first isColor \r\t\t\t\t\tifTrue: [ legend text: assoc key withShape: (legend defaultBox\r                             border: (self rsBorderWithColorBox: colorBox);\r                             paint: colorBox first) ] \r\t\t\t\t\tifFalse: [ legend text: assoc key withFadingRamp: colorBox ] ] ] ].\r  legend legendDo: [:l |  l\r           padding: 5;\r           scaleBy: 2.5 ].\r  blockLocation value: legend.\r  legend build',			#stamp : '',			#package : #SmallSuiteGenerator-Visualization		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-02-03T19:29:57.314537-04:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #SGAViz			},			#name : #'addLegendOn:locations:with:',			#protocol : #'*SmallSuiteGenerator-Visualization',			#sourceCode : 'addLegendOn: canvas locations: locations with: dictColor\r\t| colors |\r\tself addLegend: (Array with: \'More-similar\' -> (dictColor at: \'edgeSimilarity\')\r\t\twith: (\'Less-similar\' -> (dictColor at: \'edgeSimilarity\'))) on: canvas withFontColor: (dictColor at: \'font\') key: \'similarity\' and: [ :legend | legend location below left offset: (1000@0) ].\r\t\t\r\tself addLegend: (Array with: \'Class coverage\' -> (dictColor at: \'classCoverage\')\r\t\twith: \'Method coverage\' -> (dictColor at: \'methodCoverage\')\r\t\twith: \'Branch coverage\' -> (dictColor at: \'statementCoverage\')) on: canvas withFontColor: (dictColor at: \'font\') key: \'coverage\' and: [:legend | legend location below left "legend translateTo: locations nextOrNil" offset: (1750@100 negated) ].\r\t\t\r\tcolors := dictColor at: \'rangeMethodColor\'.\r\tself addLegend: (Array  \r\t\t\twith: \'Testcase (TC)\' -> (dictColor at: \'backgroundTestCase\') \r\t\t\twith: \'TC with higher coverage than parents\' -> (Array with: (dictColor at: \'backgroundTestCase\') with: (dictColor at: \'borderTestCase\'))\r\t\t\twith: \'Executed methods\' -> (Array with: 0 -> colors first with: 1 -> (colors at: 19))) on: canvas  withFontColor: (dictColor at: \'font\') key: \'range\' and: [ :legend | legend location below center "legend translateTo: locations nextOrNil " offset: 0@150 negated ].\r\t\t\t\r\tself addLegend: (Array with: \'Lowest-Fitness\' -> (dictColor at: \'lowestCoverage\')\r\t\twith: (\'Average-Fitness\' -> (dictColor at: \'averageCoverage\'))\r\t\twith: (\'Fittest-Fitness\' -> (dictColor at: \'fittestCoverage\'))) on: canvas withFontColor: (dictColor at: \'font\') key: \'coverage\' and: [:legend | legend location below right " legend translateTo: locations nextOrNil "offset: -700@150 negated ]',			#stamp : '',			#package : #SmallSuiteGenerator-Visualization		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #SGAViz			},			#name : #'addLegendOn:locations:with:',			#protocol : #'*SmallSuiteGenerator-Visualization',			#sourceCode : 'addLegendOn: canvas locations: locations with: dictColor\r\t| colors |\r\tself addLegend: (Array with: \'Similar\' -> (dictColor at: \'edgeSimilarity\')\r\t\t"with: (\'Not-very-similar\' -> (Color white))") on: canvas withFontColor: (dictColor at: \'font\') key: \'similarity\' and: [ :legend | legend location below left offset: (1000@0) ].\r\t\t\r\tself addLegend: (Array with: \'Class coverage\' -> (dictColor at: \'classCoverage\')\r\t\twith: \'Method coverage\' -> (dictColor at: \'methodCoverage\')\r\t\twith: \'Branch coverage\' -> (dictColor at: \'statementCoverage\')) on: canvas withFontColor: (dictColor at: \'font\') key: \'coverage\' and: [:legend | legend location below left "legend translateTo: locations nextOrNil" offset: (1750@150 negated) ].\r\t\t\r\tcolors := dictColor at: \'rangeMethodColor\'.\r\tself addLegend: (Array  \r\t\t\twith: \'Testcase (TC)\' -> (dictColor at: \'backgroundTestCase\') \r\t\t\twith: \'TC with higher coverage than parents\' -> (Array with: (dictColor at: \'backgroundTestCase\') with: (dictColor at: \'borderTestCase\'))\r\t\t\twith: \'Executed methods\' -> (Array with: 0 -> colors first with: 1 -> (colors at: 19))) on: canvas  withFontColor: (dictColor at: \'font\') key: \'range\' and: [ :legend | legend location below center "legend translateTo: locations nextOrNil " offset: 0@150 negated ].\r\t\t\t\r\tself addLegend: (Array  \r\t\t\twith: \'Methods called directly\' -> (Array with: 0 -> colors first with: 1 -> (colors at: 19))\r\t\t\twith: \'Methods called indirectly\' -> (Array with: 0 -> colors first with: 1 -> (colors at: 19))) on: canvas  withFontColor: (dictColor at: \'font\') key: \'method\' and: [ :legend | legend location below right offset: -1600@150 negated ].\r\t\t\t\r\tself addLegend: (Array with: \'Lowest-Fitness\' -> (dictColor at: \'lowestCoverage\')\r\t\twith: (\'Average-Fitness\' -> (dictColor at: \'averageCoverage\'))\r\t\twith: (\'Fittest-Fitness\' -> (dictColor at: \'fittestCoverage\'))) on: canvas withFontColor: (dictColor at: \'font\') key: \'coverage\' and: [:legend | legend location below right " legend translateTo: locations nextOrNil "offset: -700@150 negated ]',			#stamp : '',			#package : #SmallSuiteGenerator-Visualization		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-02-03T19:29:57.315585-04:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #SGAViz			},			#name : #'groupTestCases:with:ofColor:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'groupTestCases: testCases with: testIds ofColor: dictColor and: size\t\r\t| group |\r\tgroup := RSGroup new.\r\tgroup addAll: (testCases collect: [:tC | \r\t\tRSComposite new \r\t\t\taddShape: (RSEllipse new \r\t\t\t\tsize: (size/12)@(size/12); \r\t\t\t\tcolor: (((testIds at: tC generationNumber ifAbsent: [#()]) includes: tC idPopulation) ifTrue: [ dictColor at: \'markedTestCaseNode\' ] ifFalse: [ \'testcaseNode\' ] );\r\t\t\t\tmodel: tC;\r\t\t\t\tdraggable;\r\t\t\t\tyourself);\r\t\t\taddShape: (RSLabel new \r\t\t\t\ttext: \'t\', tC idPopulation asString;\r\t\t\t\tcolor: (dictColor at: \'testcaseFontColor\');\r\t\t\t\tfontSize: (size/25);\r\t\t\t\tbold;\r\t\t\t\tposition: 0@0);\r\t\t\tmodel: tC;\r\t\t\tadjustToChildren;\r\t\t\tyourself.\r\t\t ]).\r\tRSCircleLayout new radius: size / 2; on: group.\r\t^ RSComposite new\r\t\tshapes: (group collect: #yourself);\r\t\t"paint: Color blue;"\r\t\tmodel: testCases;\r\t\tdraggable\r\t',			#stamp : '',			#package : #SmallSuiteGenerator		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#isMetaSide : false,				#className : #SGAViz			},			#name : #'groupTestCases:with:ofColor:and:',			#protocol : #'as yet unclassified',			#sourceCode : 'groupTestCases: testCases with: testIds ofColor: dictColor and: size\t\r\t| group |\r\tgroup := RSGroup new.\r\tgroup addAll: (testCases collect: [:tC | \r\t\tRSComposite new \r\t\t\taddShape: (RSEllipse new \r\t\t\t\tsize: (size/12)@(size/12); \r\t\t\t\tcolor: (((testIds at: tC generationNumber ifAbsent: [#()]) includes: tC idPopulation) ifTrue: [ dictColor at: \'markedTestCaseNode\' ] ifFalse: [ \'testcaseNode\' ] );\r\t\t\t\tmodel: tC;\r\t\t\t\tyourself);\r\t\t\taddShape: (RSLabel new \r\t\t\t\ttext: \'t\', tC idPopulation asString;\r\t\t\t\tcolor: (dictColor at: \'testcaseFontColor\');\r\t\t\t\tfontSize: (size/25);\r\t\t\t\tbold;\r\t\t\t\tposition: 0@0);\r\t\t\tmodel: tC;\r\t\t\tadjustToChildren;\r\t\t\tyourself.\r\t\t ]).\r\tRSCircleLayout new radius: size / 2; on: group.\r\t^ RSComposite new\r\t\tshapes: (group collect: #yourself);\r\t\t"paint: Color blue;"\r\t\tmodel: testCases\r\t',			#stamp : '',			#package : #SmallSuiteGenerator		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2021-02-03T19:30:09.682441-04:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpSessionSnapshot {		#imageName : '/Users/leela/Documents/TestEvoViz/ArtifactTestEvoViz/NeoJSON.image'	}}